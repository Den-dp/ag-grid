{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// community-modules/client-side-row-model/src/main.ts\nvar main_exports = {};\n__export(main_exports, {\n  ClientSideRowModelModule: () => ClientSideRowModelModule\n});\nmodule.exports = __toCommonJS(main_exports);\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nvar import_core9 = require(\"@ag-grid-community/core\");\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nvar import_core2 = require(\"@ag-grid-community/core\");\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideNodeManager.ts\nvar import_core = require(\"@ag-grid-community/core\");\nvar _ClientSideNodeManager = class _ClientSideNodeManager {\n  constructor(rootNode, gos, eventService, columnModel, selectionService, beans) {\n    this.nextId = 0;\n    // has row data actually been set\n    this.rowCountReady = false;\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gos = gos;\n    this.eventService = eventService;\n    this.columnModel = columnModel;\n    this.beans = beans;\n    this.selectionService = selectionService;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = _ClientSideNodeManager.ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterAggFilter = [];\n    this.rootNode.childrenAfterFilter = [];\n  }\n  getCopyOfNodesMap() {\n    return import_core._.cloneObject(this.allNodesMap);\n  }\n  getRowNode(id) {\n    return this.allNodesMap[id];\n  }\n  setRowData(rowData) {\n    if (typeof rowData === \"string\") {\n      console.warn(\"AG Grid: rowData must be an array.\");\n      return;\n    }\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowData);\n    const rootNode = this.rootNode;\n    const sibling = this.rootNode.sibling;\n    rootNode.childrenAfterFilter = null;\n    rootNode.childrenAfterGroup = null;\n    rootNode.childrenAfterAggFilter = null;\n    rootNode.childrenAfterSort = null;\n    rootNode.childrenMapped = null;\n    rootNode.updateHasChildren();\n    this.nextId = 0;\n    this.allNodesMap = {};\n    if (rowData) {\n      rootNode.allLeafChildren = rowData.map((dataItem) => this.createNode(dataItem, this.rootNode, _ClientSideNodeManager.TOP_LEVEL));\n    } else {\n      rootNode.allLeafChildren = [];\n      rootNode.childrenAfterGroup = [];\n    }\n    if (sibling) {\n      sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n      sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;\n      sibling.childrenAfterSort = rootNode.childrenAfterSort;\n      sibling.childrenMapped = rootNode.childrenMapped;\n      sibling.allLeafChildren = rootNode.allLeafChildren;\n    }\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);\n    const rowNodeTransaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const nodesToUnselect = [];\n    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeAdd(rowDataTran, rowNodeTransaction);\n    this.updateSelection(nodesToUnselect, \"rowDataChanged\");\n    if (rowNodeOrder) {\n      import_core._.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n    }\n    return rowNodeTransaction;\n  }\n  isRowCountReady() {\n    return this.rowCountReady;\n  }\n  dispatchRowDataUpdateStartedEvent(rowData) {\n    const event = {\n      type: import_core.Events.EVENT_ROW_DATA_UPDATE_STARTED,\n      firstRowData: (rowData == null ? void 0 : rowData.length) ? rowData[0] : null\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  updateSelection(nodesToUnselect, source) {\n    const selectionChanged = nodesToUnselect.length > 0;\n    if (selectionChanged) {\n      this.selectionService.setNodesSelected({\n        newValue: false,\n        nodes: nodesToUnselect,\n        suppressFinishActions: true,\n        source\n      });\n    }\n    this.selectionService.updateGroupsFromChildrenSelections(source);\n    if (selectionChanged) {\n      const event = {\n        type: import_core.Events.EVENT_SELECTION_CHANGED,\n        source\n      };\n      this.eventService.dispatchEvent(event);\n    }\n  }\n  executeAdd(rowDataTran, rowNodeTransaction) {\n    var _a;\n    const { add, addIndex } = rowDataTran;\n    if (import_core._.missingOrEmpty(add)) {\n      return;\n    }\n    const newNodes = add.map((item) => this.createNode(item, this.rootNode, _ClientSideNodeManager.TOP_LEVEL));\n    if (typeof addIndex === \"number\" && addIndex >= 0) {\n      const { allLeafChildren } = this.rootNode;\n      const len = allLeafChildren.length;\n      let normalisedAddIndex = addIndex;\n      const isTreeData = this.gos.get(\"treeData\");\n      if (isTreeData && addIndex > 0 && len > 0) {\n        for (let i = 0; i < len; i++) {\n          if (((_a = allLeafChildren[i]) == null ? void 0 : _a.rowIndex) == addIndex - 1) {\n            normalisedAddIndex = i + 1;\n            break;\n          }\n        }\n      }\n      const nodesBeforeIndex = allLeafChildren.slice(0, normalisedAddIndex);\n      const nodesAfterIndex = allLeafChildren.slice(normalisedAddIndex, allLeafChildren.length);\n      this.rootNode.allLeafChildren = [...nodesBeforeIndex, ...newNodes, ...nodesAfterIndex];\n    } else {\n      this.rootNode.allLeafChildren = [...this.rootNode.allLeafChildren, ...newNodes];\n    }\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n    rowNodeTransaction.add = newNodes;\n  }\n  executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { remove } = rowDataTran;\n    if (import_core._.missingOrEmpty(remove)) {\n      return;\n    }\n    const rowIdsRemoved = {};\n    remove.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      rowNode.clearRowTopAndRowIndex();\n      rowIdsRemoved[rowNode.id] = true;\n      delete this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter((rowNode) => !rowIdsRemoved[rowNode.id]);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n  }\n  executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { update } = rowDataTran;\n    if (import_core._.missingOrEmpty(update)) {\n      return;\n    }\n    update.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      rowNode.updateData(item);\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      this.setMasterForRow(rowNode, item, _ClientSideNodeManager.TOP_LEVEL, false);\n      rowNodeTransaction.update.push(rowNode);\n    });\n  }\n  lookupRowNode(data) {\n    const getRowIdFunc = this.gos.getCallback(\"getRowId\");\n    let rowNode;\n    if (getRowIdFunc) {\n      const id = getRowIdFunc({ data, level: 0 });\n      rowNode = this.allNodesMap[id];\n      if (!rowNode) {\n        console.error(`AG Grid: could not find row id=${id}, data item was not found for this id`);\n        return null;\n      }\n    } else {\n      rowNode = this.rootNode.allLeafChildren.find((node) => node.data === data);\n      if (!rowNode) {\n        console.error(`AG Grid: could not find data item as object was not found`, data);\n        console.error(`Consider using getRowId to help the Grid find matching row data`);\n        return null;\n      }\n    }\n    return rowNode || null;\n  }\n  createNode(dataItem, parent, level) {\n    const node = new import_core.RowNode(this.beans);\n    node.group = false;\n    this.setMasterForRow(node, dataItem, level, true);\n    const suppressParentsInRowNodes = this.gos.get(\"suppressParentsInRowNodes\");\n    if (parent && !suppressParentsInRowNodes) {\n      node.parent = parent;\n    }\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n    if (this.allNodesMap[node.id]) {\n      console.warn(`AG Grid: duplicate node id '${node.id}' detected from getRowId callback, this could cause issues in your grid.`);\n    }\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  }\n  setMasterForRow(rowNode, data, level, setExpanded) {\n    const isTreeData = this.gos.get(\"treeData\");\n    if (isTreeData) {\n      rowNode.setMaster(false);\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      const masterDetail = this.gos.get(\"masterDetail\");\n      if (masterDetail) {\n        const isRowMasterFunc = this.gos.get(\"isRowMaster\");\n        if (isRowMasterFunc) {\n          rowNode.setMaster(isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n      if (setExpanded) {\n        const rowGroupColumns = this.columnModel.getRowGroupColumns();\n        const numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n        const masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  }\n  isExpanded(level) {\n    const expandByDefault = this.gos.get(\"groupDefaultExpanded\");\n    if (expandByDefault === -1) {\n      return true;\n    }\n    return level < expandByDefault;\n  }\n};\n_ClientSideNodeManager.TOP_LEVEL = 0;\n_ClientSideNodeManager.ROOT_NODE_ID = \"ROOT_NODE_ID\";\nvar ClientSideNodeManager = _ClientSideNodeManager;\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nvar ClientSideRowModel = class extends import_core2.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.onRowHeightChanged_debounced = import_core2._.debounce(this.onRowHeightChanged.bind(this), 100);\n    this.rowsToDisplay = [];\n    /** Has the start method been called */\n    this.hasStarted = false;\n    /** E.g. data has been set into the node manager already */\n    this.shouldSkipSettingDataOnStart = false;\n    /**\n     * This is to prevent refresh model being called when it's already being called.\n     * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,\n     * which then triggers the listener here that calls refresh model again but at the filter stage\n     * (which is about to be run by the original call).\n     */\n    this.isRefreshingModel = false;\n    this.rowCountReady = false;\n  }\n  init() {\n    const refreshEverythingFunc = this.refreshModel.bind(this, { step: import_core2.ClientSideRowModelSteps.EVERYTHING });\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      // after cols change, row grouping (the first stage) could of changed\n      afterColumnsChanged: true,\n      keepRenderedRows: true,\n      // we want animations cos sorting or filtering could be applied\n      animate\n    });\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: import_core2.ClientSideRowModelSteps.PIVOT }));\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanges.bind(this));\n    this.addManagedListener(this.eventService, import_core2.Events.EVENT_GRID_READY, () => this.onGridReady());\n    this.addPropertyListeners();\n    this.rootNode = new import_core2.RowNode(this.beans);\n    this.nodeManager = new ClientSideNodeManager(\n      this.rootNode,\n      this.gos,\n      this.eventService,\n      this.columnModel,\n      this.selectionService,\n      this.beans\n    );\n  }\n  addPropertyListeners() {\n    const resetProps = /* @__PURE__ */ new Set([\n      \"treeData\",\n      \"masterDetail\"\n    ]);\n    const groupStageRefreshProps = /* @__PURE__ */ new Set([\n      \"suppressParentsInRowNodes\",\n      \"groupDefaultExpanded\",\n      \"groupAllowUnbalanced\",\n      \"initialGroupOrderComparator\",\n      \"groupHideOpenParents\",\n      \"groupDisplayType\"\n    ]);\n    const filterStageRefreshProps = /* @__PURE__ */ new Set([\n      \"excludeChildrenWhenTreeDataFiltering\"\n    ]);\n    const pivotStageRefreshProps = /* @__PURE__ */ new Set([\n      \"removePivotHeaderRowWhenSingleValueColumn\",\n      \"pivotRowTotals\",\n      \"pivotColumnGroupTotals\",\n      \"suppressExpandablePivotGroups\"\n    ]);\n    const aggregateStageRefreshProps = /* @__PURE__ */ new Set([\n      \"getGroupRowAgg\",\n      \"alwaysAggregateAtRootLevel\",\n      \"groupIncludeTotalFooter\",\n      \"suppressAggFilteredOnly\",\n      \"grandTotalRow\"\n    ]);\n    const sortStageRefreshProps = /* @__PURE__ */ new Set([\n      \"postSortRows\",\n      \"groupDisplayType\",\n      \"accentedSort\"\n    ]);\n    const filterAggStageRefreshProps = /* @__PURE__ */ new Set([]);\n    const flattenStageRefreshProps = /* @__PURE__ */ new Set([\n      \"groupRemoveSingleChildren\",\n      \"groupRemoveLowestSingleChildren\",\n      \"groupIncludeFooter\",\n      \"groupTotalRow\"\n    ]);\n    const allProps = [\n      ...resetProps,\n      ...groupStageRefreshProps,\n      ...filterStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...aggregateStageRefreshProps,\n      ...sortStageRefreshProps,\n      ...filterAggStageRefreshProps,\n      ...flattenStageRefreshProps\n    ];\n    this.addManagedPropertyListeners(allProps, (params) => {\n      var _a;\n      const properties = (_a = params.changeSet) == null ? void 0 : _a.properties;\n      if (!properties) {\n        return;\n      }\n      ;\n      const arePropertiesImpacted = (propSet) => properties.some((prop) => propSet.has(prop));\n      if (arePropertiesImpacted(resetProps)) {\n        this.setRowData(this.rootNode.allLeafChildren.map((child) => child.data));\n        return;\n      }\n      if (arePropertiesImpacted(groupStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.EVERYTHING });\n        return;\n      }\n      if (arePropertiesImpacted(filterStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.FILTER });\n        return;\n      }\n      if (arePropertiesImpacted(pivotStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.PIVOT });\n        return;\n      }\n      if (arePropertiesImpacted(aggregateStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.AGGREGATE });\n        return;\n      }\n      if (arePropertiesImpacted(sortStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.SORT });\n        return;\n      }\n      if (arePropertiesImpacted(filterAggStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.FILTER_AGGREGATES });\n        return;\n      }\n      if (arePropertiesImpacted(flattenStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.MAP });\n      }\n    });\n    this.addManagedPropertyListener(\"rowHeight\", () => this.resetRowHeights());\n  }\n  start() {\n    this.hasStarted = true;\n    if (this.shouldSkipSettingDataOnStart) {\n      this.dispatchUpdateEventsAndRefresh();\n    } else {\n      this.setInitialData();\n    }\n  }\n  setInitialData() {\n    const rowData = this.gos.get(\"rowData\");\n    if (rowData) {\n      this.shouldSkipSettingDataOnStart = true;\n      this.setRowData(rowData);\n    }\n  }\n  ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    let atLeastOneChange;\n    let res = false;\n    do {\n      atLeastOneChange = false;\n      const rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n      const rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n      const firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n      const lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n      for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n        const rowNode = this.getRow(rowIndex);\n        if (rowNode.rowHeightEstimated) {\n          const rowHeight = this.gos.getRowHeightForNode(rowNode);\n          rowNode.setRowHeight(rowHeight.height);\n          atLeastOneChange = true;\n          res = true;\n        }\n      }\n      if (atLeastOneChange) {\n        this.setRowTopAndRowIndex();\n      }\n    } while (atLeastOneChange);\n    return res;\n  }\n  setRowTopAndRowIndex() {\n    const defaultRowHeight = this.environment.getDefaultRowHeight();\n    let nextRowTop = 0;\n    const displayedRowsMapped = /* @__PURE__ */ new Set();\n    const allowEstimate = this.gos.isDomLayout(\"normal\");\n    for (let i = 0; i < this.rowsToDisplay.length; i++) {\n      const rowNode = this.rowsToDisplay[i];\n      if (rowNode.id != null) {\n        displayedRowsMapped.add(rowNode.id);\n      }\n      if (rowNode.rowHeight == null) {\n        const rowHeight = this.gos.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);\n        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n      }\n      rowNode.setRowTop(nextRowTop);\n      rowNode.setRowIndex(i);\n      nextRowTop += rowNode.rowHeight;\n    }\n    return displayedRowsMapped;\n  }\n  clearRowTopAndRowIndex(changedPath, displayedRowsMapped) {\n    const changedPathActive = changedPath.isActive();\n    const clearIfNotDisplayed = (rowNode) => {\n      if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\n        rowNode.clearRowTopAndRowIndex();\n      }\n    };\n    const recurse = (rowNode) => {\n      clearIfNotDisplayed(rowNode);\n      clearIfNotDisplayed(rowNode.detailNode);\n      clearIfNotDisplayed(rowNode.sibling);\n      if (rowNode.hasChildren()) {\n        if (rowNode.childrenAfterGroup) {\n          const isRootNode = rowNode.level == -1;\n          const skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\n          if (!skipChildren) {\n            rowNode.childrenAfterGroup.forEach(recurse);\n          }\n        }\n      }\n    };\n    recurse(this.rootNode);\n  }\n  // returns false if row was moved, otherwise true\n  ensureRowsAtPixel(rowNodes, pixel, increment = 0) {\n    const indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n    const rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    if (rowNodeAtPixelNow === rowNodes[0]) {\n      return false;\n    }\n    rowNodes.forEach((rowNode) => {\n      import_core2._.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n    });\n    rowNodes.forEach((rowNode, idx) => {\n      import_core2._.insertIntoArray(this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n    });\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n    return true;\n  }\n  highlightRowAtPixel(rowNode, pixel) {\n    const indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n    const rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n    if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n      if (this.lastHighlightedRow) {\n        this.lastHighlightedRow.setHighlighted(null);\n        this.lastHighlightedRow = null;\n      }\n      return;\n    }\n    const highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n    if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n      this.lastHighlightedRow.setHighlighted(null);\n      this.lastHighlightedRow = null;\n    }\n    rowNodeAtPixelNow.setHighlighted(highlight);\n    this.lastHighlightedRow = rowNodeAtPixelNow;\n  }\n  getHighlightPosition(pixel, rowNode) {\n    if (!rowNode) {\n      const index = this.getRowIndexAtPixel(pixel);\n      rowNode = this.getRow(index || 0);\n      if (!rowNode) {\n        return import_core2.RowHighlightPosition.Below;\n      }\n    }\n    const { rowTop, rowHeight } = rowNode;\n    return pixel - rowTop < rowHeight / 2 ? import_core2.RowHighlightPosition.Above : import_core2.RowHighlightPosition.Below;\n  }\n  getLastHighlightedRowNode() {\n    return this.lastHighlightedRow;\n  }\n  isLastRowIndexKnown() {\n    return true;\n  }\n  getRowCount() {\n    if (this.rowsToDisplay) {\n      return this.rowsToDisplay.length;\n    }\n    return 0;\n  }\n  getTopLevelRowCount() {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return 1;\n    }\n    const filteredChildren = this.rootNode.childrenAfterAggFilter;\n    return filteredChildren ? filteredChildren.length : 0;\n  }\n  getTopLevelRowDisplayedIndex(topLevelIndex) {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return topLevelIndex;\n    }\n    let rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n    if (this.gos.get(\"groupHideOpenParents\")) {\n      while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n        rowNode = rowNode.childrenAfterSort[0];\n      }\n    }\n    return rowNode.rowIndex;\n  }\n  getRowBounds(index) {\n    if (import_core2._.missing(this.rowsToDisplay)) {\n      return null;\n    }\n    const rowNode = this.rowsToDisplay[index];\n    if (rowNode) {\n      return {\n        rowTop: rowNode.rowTop,\n        rowHeight: rowNode.rowHeight\n      };\n    }\n    return null;\n  }\n  onRowGroupOpened() {\n    const animate = this.gos.isAnimateRows();\n    this.refreshModel({ step: import_core2.ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });\n  }\n  onFilterChanged(event) {\n    if (event.afterDataChange) {\n      return;\n    }\n    const animate = this.gos.isAnimateRows();\n    const primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some((col) => col.isPrimary());\n    const step = primaryOrQuickFilterChanged ? import_core2.ClientSideRowModelSteps.FILTER : import_core2.ClientSideRowModelSteps.FILTER_AGGREGATES;\n    this.refreshModel({ step, keepRenderedRows: true, animate });\n  }\n  onSortChanged() {\n    const animate = this.gos.isAnimateRows();\n    this.refreshModel({ step: import_core2.ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate, keepEditingRows: true });\n  }\n  getType() {\n    return \"clientSide\";\n  }\n  onValueChanged() {\n    if (this.columnModel.isPivotActive()) {\n      this.refreshModel({ step: import_core2.ClientSideRowModelSteps.PIVOT });\n    } else {\n      this.refreshModel({ step: import_core2.ClientSideRowModelSteps.AGGREGATE });\n    }\n  }\n  createChangePath(rowNodeTransactions) {\n    const noTransactions = import_core2._.missingOrEmpty(rowNodeTransactions);\n    const changedPath = new import_core2.ChangedPath(false, this.rootNode);\n    if (noTransactions || this.gos.get(\"treeData\")) {\n      changedPath.setInactive();\n    }\n    return changedPath;\n  }\n  isSuppressModelUpdateAfterUpdateTransaction(params) {\n    if (!this.gos.get(\"suppressModelUpdateAfterUpdateTransaction\")) {\n      return false;\n    }\n    if (params.rowNodeTransactions == null) {\n      return false;\n    }\n    const transWithAddsOrDeletes = params.rowNodeTransactions.filter(\n      (tx) => tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0\n    );\n    const transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n    return transactionsContainUpdatesOnly;\n  }\n  buildRefreshModelParams(step) {\n    let paramsStep = import_core2.ClientSideRowModelSteps.EVERYTHING;\n    const stepsMapped = {\n      everything: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      group: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      filter: import_core2.ClientSideRowModelSteps.FILTER,\n      map: import_core2.ClientSideRowModelSteps.MAP,\n      aggregate: import_core2.ClientSideRowModelSteps.AGGREGATE,\n      sort: import_core2.ClientSideRowModelSteps.SORT,\n      pivot: import_core2.ClientSideRowModelSteps.PIVOT\n    };\n    if (import_core2._.exists(step)) {\n      paramsStep = stepsMapped[step];\n    }\n    if (import_core2._.missing(paramsStep)) {\n      console.error(`AG Grid: invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(\", \")}`);\n      return void 0;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    };\n    return modelParams;\n  }\n  refreshModel(paramsOrStep) {\n    if (!this.hasStarted || this.isRefreshingModel || this.columnModel.shouldRowModelIgnoreRefresh()) {\n      return;\n    }\n    let params = typeof paramsOrStep === \"object\" && \"step\" in paramsOrStep ? paramsOrStep : this.buildRefreshModelParams(paramsOrStep);\n    if (!params) {\n      return;\n    }\n    if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n      return;\n    }\n    const changedPath = this.createChangePath(params.rowNodeTransactions);\n    this.isRefreshingModel = true;\n    switch (params.step) {\n      case import_core2.ClientSideRowModelSteps.EVERYTHING:\n        this.doRowGrouping(\n          params.rowNodeTransactions,\n          params.rowNodeOrder,\n          changedPath,\n          !!params.afterColumnsChanged\n        );\n      case import_core2.ClientSideRowModelSteps.FILTER:\n        this.doFilter(changedPath);\n      case import_core2.ClientSideRowModelSteps.PIVOT:\n        this.doPivot(changedPath);\n      case import_core2.ClientSideRowModelSteps.AGGREGATE:\n        this.doAggregate(changedPath);\n      case import_core2.ClientSideRowModelSteps.FILTER_AGGREGATES:\n        this.doFilterAggregates(changedPath);\n      case import_core2.ClientSideRowModelSteps.SORT:\n        this.doSort(params.rowNodeTransactions, changedPath);\n      case import_core2.ClientSideRowModelSteps.MAP:\n        this.doRowsToDisplay();\n    }\n    const displayedNodesMapped = this.setRowTopAndRowIndex();\n    this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\n    this.isRefreshingModel = false;\n    const event = {\n      type: import_core2.Events.EVENT_MODEL_UPDATED,\n      animate: params.animate,\n      keepRenderedRows: params.keepRenderedRows,\n      newData: params.newData,\n      newPage: false,\n      keepUndoRedoStack: params.keepUndoRedoStack\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  isEmpty() {\n    const rowsMissing = import_core2._.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n    return import_core2._.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();\n  }\n  isRowsToRender() {\n    return import_core2._.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n  }\n  getNodesInRangeForSelection(firstInRange, lastInRange) {\n    let started = !lastInRange;\n    let finished = false;\n    const result = [];\n    const groupsSelectChildren = this.gos.get(\"groupSelectsChildren\");\n    this.forEachNodeAfterFilterAndSort((rowNode) => {\n      if (finished) {\n        return;\n      }\n      if (started) {\n        if (rowNode === lastInRange || rowNode === firstInRange) {\n          finished = true;\n          if (rowNode.group && groupsSelectChildren) {\n            result.push(...rowNode.allLeafChildren);\n            return;\n          }\n        }\n      }\n      if (!started) {\n        if (rowNode !== lastInRange && rowNode !== firstInRange) {\n          return;\n        }\n        started = true;\n      }\n      const includeThisNode = !rowNode.group || !groupsSelectChildren;\n      if (includeThisNode) {\n        result.push(rowNode);\n        return;\n      }\n    });\n    return result;\n  }\n  setDatasource(datasource) {\n    console.error(\"AG Grid: should never call setDatasource on clientSideRowController\");\n  }\n  getTopLevelNodes() {\n    return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n  }\n  getRootNode() {\n    return this.rootNode;\n  }\n  getRow(index) {\n    return this.rowsToDisplay[index];\n  }\n  isRowPresent(rowNode) {\n    return this.rowsToDisplay.indexOf(rowNode) >= 0;\n  }\n  getRowIndexAtPixel(pixelToMatch) {\n    if (this.isEmpty() || this.rowsToDisplay.length === 0) {\n      return -1;\n    }\n    let bottomPointer = 0;\n    let topPointer = this.rowsToDisplay.length - 1;\n    if (pixelToMatch <= 0) {\n      return 0;\n    }\n    const lastNode = import_core2._.last(this.rowsToDisplay);\n    if (lastNode.rowTop <= pixelToMatch) {\n      return this.rowsToDisplay.length - 1;\n    }\n    let oldBottomPointer = -1;\n    let oldTopPointer = -1;\n    while (true) {\n      const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n      const currentRowNode = this.rowsToDisplay[midPointer];\n      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n        return midPointer;\n      }\n      if (currentRowNode.rowTop < pixelToMatch) {\n        bottomPointer = midPointer + 1;\n      } else if (currentRowNode.rowTop > pixelToMatch) {\n        topPointer = midPointer - 1;\n      }\n      const caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;\n      if (caughtInInfiniteLoop) {\n        return midPointer;\n      }\n      oldBottomPointer = bottomPointer;\n      oldTopPointer = topPointer;\n    }\n  }\n  isRowInPixel(rowNode, pixelToMatch) {\n    const topPixel = rowNode.rowTop;\n    const bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n    const pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n    return pixelInRow;\n  }\n  forEachLeafNode(callback) {\n    if (this.rootNode.allLeafChildren) {\n      this.rootNode.allLeafChildren.forEach((rowNode, index) => callback(rowNode, index));\n    }\n  }\n  forEachNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterGroup || []],\n      callback,\n      recursionType: 0 /* Normal */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilter(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterAggFilter || []],\n      callback,\n      recursionType: 1 /* AfterFilter */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilterAndSort(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterSort || []],\n      callback,\n      recursionType: 2 /* AfterFilterAndSort */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachPivotNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [this.rootNode],\n      callback,\n      recursionType: 3 /* PivotNodes */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  // iterates through each item in memory, and calls the callback function\n  // nodes - the rowNodes to traverse\n  // callback - the user provided callback\n  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n  // index - works similar to the index in forEach in javascript's array function\n  recursivelyWalkNodesAndCallback(params) {\n    const { nodes, callback, recursionType, includeFooterNodes } = params;\n    let { index } = params;\n    const addFooters = (position) => {\n      var _a;\n      const parentNode = (_a = nodes[0]) == null ? void 0 : _a.parent;\n      if (!parentNode)\n        return;\n      const grandTotal = includeFooterNodes && this.gos.getGrandTotalRow();\n      const isGroupIncludeFooter = this.gos.getGroupTotalRowCallback();\n      const groupTotal = includeFooterNodes && isGroupIncludeFooter({ node: parentNode });\n      const isRootNode = parentNode === this.rootNode;\n      if (isRootNode) {\n        if (grandTotal === position) {\n          parentNode.createFooter();\n          callback(parentNode.sibling, index++);\n        }\n        return;\n      }\n      if (groupTotal === position) {\n        parentNode.createFooter();\n        callback(parentNode.sibling, index++);\n      }\n    };\n    addFooters(\"top\");\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      callback(node, index++);\n      if (node.hasChildren() && !node.footer) {\n        let nodeChildren = null;\n        switch (recursionType) {\n          case 0 /* Normal */:\n            nodeChildren = node.childrenAfterGroup;\n            break;\n          case 1 /* AfterFilter */:\n            nodeChildren = node.childrenAfterAggFilter;\n            break;\n          case 2 /* AfterFilterAndSort */:\n            nodeChildren = node.childrenAfterSort;\n            break;\n          case 3 /* PivotNodes */:\n            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n            break;\n        }\n        if (nodeChildren) {\n          index = this.recursivelyWalkNodesAndCallback({\n            nodes: [...nodeChildren],\n            callback,\n            recursionType,\n            index,\n            includeFooterNodes\n          });\n        }\n      }\n    }\n    addFooters(\"bottom\");\n    return index;\n  }\n  // it's possible to recompute the aggregate without doing the other parts\n  // + api.refreshClientSideRowModel('aggregate')\n  doAggregate(changedPath) {\n    var _a;\n    (_a = this.aggregationStage) == null ? void 0 : _a.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doFilterAggregates(changedPath) {\n    if (this.filterAggregatesStage) {\n      this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });\n    } else {\n      this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;\n    }\n  }\n  // + gridApi.expandAll()\n  // + gridApi.collapseAll()\n  expandOrCollapseAll(expand) {\n    const usingTreeData = this.gos.get(\"treeData\");\n    const usingPivotMode = this.columnModel.isPivotActive();\n    const recursiveExpandOrCollapse = (rowNodes) => {\n      if (!rowNodes) {\n        return;\n      }\n      rowNodes.forEach((rowNode) => {\n        const actionRow = () => {\n          rowNode.expanded = expand;\n          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n        };\n        if (usingTreeData) {\n          const hasChildren = import_core2._.exists(rowNode.childrenAfterGroup);\n          if (hasChildren) {\n            actionRow();\n          }\n          return;\n        }\n        if (usingPivotMode) {\n          const notLeafGroup = !rowNode.leafGroup;\n          if (notLeafGroup) {\n            actionRow();\n          }\n          return;\n        }\n        const isRowGroup = rowNode.group;\n        if (isRowGroup) {\n          actionRow();\n        }\n      });\n    };\n    if (this.rootNode) {\n      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n    }\n    this.refreshModel({ step: import_core2.ClientSideRowModelSteps.MAP });\n    const eventSource = expand ? \"expandAll\" : \"collapseAll\";\n    const event = {\n      type: import_core2.Events.EVENT_EXPAND_COLLAPSE_ALL,\n      source: eventSource\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  doSort(rowNodeTransactions, changedPath) {\n    this.sortStage.execute({\n      rowNode: this.rootNode,\n      rowNodeTransactions,\n      changedPath\n    });\n  }\n  doRowGrouping(rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n    if (this.groupStage) {\n      if (rowNodeTransactions) {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          rowNodeTransactions,\n          rowNodeOrder,\n          changedPath\n        });\n      } else {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          changedPath,\n          afterColumnsChanged\n        });\n      }\n      if (this.gos.get(\"groupSelectsChildren\")) {\n        const selectionChanged = this.selectionService.updateGroupsFromChildrenSelections(\"rowGroupChanged\", changedPath);\n        if (selectionChanged) {\n          const event = {\n            type: import_core2.Events.EVENT_SELECTION_CHANGED,\n            source: \"rowGroupChanged\"\n          };\n          this.eventService.dispatchEvent(event);\n        }\n      }\n    } else {\n      this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n      if (this.rootNode.sibling) {\n        this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;\n      }\n      this.rootNode.updateHasChildren();\n    }\n    if (this.nodeManager.isRowCountReady()) {\n      this.rowCountReady = true;\n      this.eventService.dispatchEventOnce({\n        type: import_core2.Events.EVENT_ROW_COUNT_READY\n      });\n    }\n  }\n  doFilter(changedPath) {\n    this.filterStage.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doPivot(changedPath) {\n    var _a;\n    (_a = this.pivotStage) == null ? void 0 : _a.execute({ rowNode: this.rootNode, changedPath });\n  }\n  getCopyOfNodesMap() {\n    return this.nodeManager.getCopyOfNodesMap();\n  }\n  getRowNode(id) {\n    const idIsGroup = typeof id == \"string\" && id.indexOf(import_core2.RowNode.ID_PREFIX_ROW_GROUP) == 0;\n    if (idIsGroup) {\n      let res = void 0;\n      this.forEachNode((node) => {\n        if (node.id === id) {\n          res = node;\n        }\n      });\n      return res;\n    }\n    return this.nodeManager.getRowNode(id);\n  }\n  // rows: the rows to put into the model\n  setRowData(rowData) {\n    this.selectionService.reset(\"rowDataChanged\");\n    this.nodeManager.setRowData(rowData);\n    if (this.hasStarted) {\n      this.dispatchUpdateEventsAndRefresh();\n    }\n  }\n  dispatchUpdateEventsAndRefresh() {\n    const rowDataUpdatedEvent = {\n      type: import_core2.Events.EVENT_ROW_DATA_UPDATED\n    };\n    this.eventService.dispatchEvent(rowDataUpdatedEvent);\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      newData: true\n    });\n  }\n  batchUpdateRowData(rowDataTransaction, callback) {\n    if (this.applyAsyncTransactionsTimeout == null) {\n      this.rowDataTransactionBatch = [];\n      const waitMillis = this.gos.getAsyncTransactionWaitMillis();\n      this.applyAsyncTransactionsTimeout = window.setTimeout(() => {\n        this.executeBatchUpdateRowData();\n      }, waitMillis);\n    }\n    this.rowDataTransactionBatch.push({ rowDataTransaction, callback });\n  }\n  flushAsyncTransactions() {\n    if (this.applyAsyncTransactionsTimeout != null) {\n      clearTimeout(this.applyAsyncTransactionsTimeout);\n      this.executeBatchUpdateRowData();\n    }\n  }\n  executeBatchUpdateRowData() {\n    this.valueCache.onDataChanged();\n    const callbackFuncsBound = [];\n    const rowNodeTrans = [];\n    let forceRowNodeOrder = false;\n    if (this.rowDataTransactionBatch) {\n      this.rowDataTransactionBatch.forEach((tranItem) => {\n        const rowNodeTran = this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);\n        rowNodeTrans.push(rowNodeTran);\n        if (tranItem.callback) {\n          callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n        }\n        if (typeof tranItem.rowDataTransaction.addIndex === \"number\") {\n          forceRowNodeOrder = true;\n        }\n      });\n    }\n    this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);\n    if (callbackFuncsBound.length > 0) {\n      window.setTimeout(() => {\n        callbackFuncsBound.forEach((func) => func());\n      }, 0);\n    }\n    if (rowNodeTrans.length > 0) {\n      const event = {\n        type: import_core2.Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,\n        results: rowNodeTrans\n      };\n      this.eventService.dispatchEvent(event);\n    }\n    this.rowDataTransactionBatch = null;\n    this.applyAsyncTransactionsTimeout = void 0;\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.valueCache.onDataChanged();\n    const rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n    const forceRowNodeOrder = typeof rowDataTran.addIndex === \"number\";\n    this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);\n    return rowNodeTran;\n  }\n  createRowNodeOrder() {\n    const suppressSortOrder = this.gos.get(\"suppressMaintainUnsortedOrder\");\n    if (suppressSortOrder) {\n      return;\n    }\n    const orderMap = {};\n    if (this.rootNode && this.rootNode.allLeafChildren) {\n      for (let index = 0; index < this.rootNode.allLeafChildren.length; index++) {\n        const node = this.rootNode.allLeafChildren[index];\n        orderMap[node.id] = index;\n      }\n    }\n    return orderMap;\n  }\n  // common to updateRowData and batchUpdateRowData\n  commonUpdateRowData(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {\n    if (!this.hasStarted) {\n      return;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    if (forceRowNodeOrder) {\n      rowNodeOrder = this.createRowNodeOrder();\n    }\n    const event = {\n      type: import_core2.Events.EVENT_ROW_DATA_UPDATED\n    };\n    this.eventService.dispatchEvent(event);\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      rowNodeTransactions: rowNodeTrans,\n      rowNodeOrder,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n  }\n  doRowsToDisplay() {\n    this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n  }\n  onRowHeightChanged() {\n    this.refreshModel({ step: import_core2.ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true, keepUndoRedoStack: true });\n  }\n  /** This method is debounced. It is used for row auto-height. If we don't debounce,\n   * then the Row Models will end up recalculating each row position\n   * for each row height change and result in the Row Renderer laying out rows.\n   * This is particularly bad if using print layout, and showing eg 1,000 rows,\n   * each row will change it's height, causing Row Model to update 1,000 times.\n   */\n  onRowHeightChangedDebounced() {\n    this.onRowHeightChanged_debounced();\n  }\n  resetRowHeights() {\n    const atLeastOne = this.resetRowHeightsForAllRowNodes();\n    this.rootNode.setRowHeight(this.rootNode.rowHeight, true);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);\n    }\n    if (atLeastOne) {\n      this.onRowHeightChanged();\n    }\n  }\n  resetRowHeightsForAllRowNodes() {\n    let atLeastOne = false;\n    this.forEachNode((rowNode) => {\n      rowNode.setRowHeight(rowNode.rowHeight, true);\n      const detailNode = rowNode.detailNode;\n      if (detailNode) {\n        detailNode.setRowHeight(detailNode.rowHeight, true);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);\n      }\n      atLeastOne = true;\n    });\n    return atLeastOne;\n  }\n  onGridStylesChanges() {\n    if (this.columnModel.isAutoRowHeightActive()) {\n      return;\n    }\n    this.resetRowHeights();\n  }\n  onGridReady() {\n    if (this.hasStarted) {\n      return;\n    }\n    this.setInitialData();\n  }\n  isRowDataLoaded() {\n    return this.rowCountReady;\n  }\n};\n__decorateClass([\n  (0, import_core2.Autowired)(\"columnModel\")\n], ClientSideRowModel.prototype, \"columnModel\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"selectionService\")\n], ClientSideRowModel.prototype, \"selectionService\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"valueCache\")\n], ClientSideRowModel.prototype, \"valueCache\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"beans\")\n], ClientSideRowModel.prototype, \"beans\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"filterStage\")\n], ClientSideRowModel.prototype, \"filterStage\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"sortStage\")\n], ClientSideRowModel.prototype, \"sortStage\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"flattenStage\")\n], ClientSideRowModel.prototype, \"flattenStage\", 2);\n__decorateClass([\n  (0, import_core2.Optional)(\"groupStage\")\n], ClientSideRowModel.prototype, \"groupStage\", 2);\n__decorateClass([\n  (0, import_core2.Optional)(\"aggregationStage\")\n], ClientSideRowModel.prototype, \"aggregationStage\", 2);\n__decorateClass([\n  (0, import_core2.Optional)(\"pivotStage\")\n], ClientSideRowModel.prototype, \"pivotStage\", 2);\n__decorateClass([\n  (0, import_core2.Optional)(\"filterAggregatesStage\")\n], ClientSideRowModel.prototype, \"filterAggregatesStage\", 2);\n__decorateClass([\n  import_core2.PostConstruct\n], ClientSideRowModel.prototype, \"init\", 1);\nClientSideRowModel = __decorateClass([\n  (0, import_core2.Bean)(\"rowModel\")\n], ClientSideRowModel);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterStage.ts\nvar import_core3 = require(\"@ag-grid-community/core\");\nvar FilterStage = class extends import_core3.BeanStub {\n  execute(params) {\n    const { changedPath } = params;\n    this.filterService.filter(changedPath);\n  }\n};\n__decorateClass([\n  (0, import_core3.Autowired)(\"filterService\")\n], FilterStage.prototype, \"filterService\", 2);\nFilterStage = __decorateClass([\n  (0, import_core3.Bean)(\"filterStage\")\n], FilterStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortStage.ts\nvar import_core4 = require(\"@ag-grid-community/core\");\nvar SortStage = class extends import_core4.BeanStub {\n  execute(params) {\n    const sortOptions = this.sortController.getSortOptions();\n    const sortActive = import_core4._.exists(sortOptions) && sortOptions.length > 0;\n    const deltaSort = sortActive && import_core4._.exists(params.rowNodeTransactions) && this.gos.get(\"deltaSort\");\n    const sortContainsGroupColumns = sortOptions.some((opt) => {\n      const isSortingCoupled = this.gos.isColumnsSortingCoupledToGroup();\n      if (isSortingCoupled) {\n        return opt.column.isPrimary() && opt.column.isRowGroupActive();\n      }\n      return !!opt.column.getColDef().showRowGroup;\n    });\n    this.sortService.sort(sortOptions, sortActive, deltaSort, params.rowNodeTransactions, params.changedPath, sortContainsGroupColumns);\n  }\n};\n__decorateClass([\n  (0, import_core4.Autowired)(\"sortService\")\n], SortStage.prototype, \"sortService\", 2);\n__decorateClass([\n  (0, import_core4.Autowired)(\"sortController\")\n], SortStage.prototype, \"sortController\", 2);\nSortStage = __decorateClass([\n  (0, import_core4.Bean)(\"sortStage\")\n], SortStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/flattenStage.ts\nvar import_core5 = require(\"@ag-grid-community/core\");\nvar FlattenStage = class extends import_core5.BeanStub {\n  execute(params) {\n    const rootNode = params.rowNode;\n    const result = [];\n    const skipLeafNodes = this.beans.columnModel.isPivotMode();\n    const showRootNode = skipLeafNodes && rootNode.leafGroup;\n    const topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n    const details = this.getFlattenDetails();\n    this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);\n    const atLeastOneRowPresent = result.length > 0;\n    const includeGrandTotalRow = !showRootNode && atLeastOneRowPresent && details.grandTotalRow;\n    if (includeGrandTotalRow) {\n      rootNode.createFooter();\n      const addToTop = details.grandTotalRow === \"top\";\n      this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0, addToTop);\n    }\n    return result;\n  }\n  getFlattenDetails() {\n    const groupRemoveSingleChildren = this.gos.get(\"groupRemoveSingleChildren\");\n    const groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gos.get(\"groupRemoveLowestSingleChildren\");\n    return {\n      groupRemoveLowestSingleChildren,\n      groupRemoveSingleChildren,\n      isGroupMultiAutoColumn: this.gos.isGroupMultiAutoColumn(),\n      hideOpenParents: this.gos.get(\"groupHideOpenParents\"),\n      grandTotalRow: this.gos.getGrandTotalRow(),\n      groupTotalRow: this.gos.getGroupTotalRowCallback()\n    };\n  }\n  recursivelyAddToRowsToDisplay(details, rowsToFlatten, result, skipLeafNodes, uiLevel) {\n    if (import_core5._.missingOrEmpty(rowsToFlatten)) {\n      return;\n    }\n    for (let i = 0; i < rowsToFlatten.length; i++) {\n      const rowNode = rowsToFlatten[i];\n      const isParent = rowNode.hasChildren();\n      const isSkippedLeafNode = skipLeafNodes && !isParent;\n      const isRemovedSingleChildrenGroup = details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;\n      const isRemovedLowestSingleChildrenGroup = details.groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;\n      const neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n      const isHiddenOpenParent = details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;\n      const thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n      if (thisRowShouldBeRendered) {\n        this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);\n      }\n      if (skipLeafNodes && rowNode.leafGroup) {\n        continue;\n      }\n      if (isParent) {\n        const excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n        if (rowNode.expanded || excludedParent) {\n          const doesRowShowFooter = details.groupTotalRow({ node: rowNode });\n          if (!doesRowShowFooter) {\n            rowNode.destroyFooter();\n          }\n          const uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n          if (doesRowShowFooter === \"top\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n          this.recursivelyAddToRowsToDisplay(\n            details,\n            rowNode.childrenAfterSort,\n            result,\n            skipLeafNodes,\n            uiLevelForChildren\n          );\n          if (doesRowShowFooter === \"bottom\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n        }\n      } else if (rowNode.master && rowNode.expanded) {\n        const detailNode = this.createDetailNode(rowNode);\n        this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);\n      }\n    }\n  }\n  // duplicated method, it's also in floatingRowModel\n  addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel, addToTop) {\n    if (addToTop) {\n      result.unshift(rowNode);\n    } else {\n      result.push(rowNode);\n    }\n    rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);\n  }\n  createDetailNode(masterNode) {\n    if (import_core5._.exists(masterNode.detailNode)) {\n      return masterNode.detailNode;\n    }\n    const detailNode = new import_core5.RowNode(this.beans);\n    detailNode.detail = true;\n    detailNode.selectable = false;\n    detailNode.parent = masterNode;\n    if (import_core5._.exists(masterNode.id)) {\n      detailNode.id = \"detail_\" + masterNode.id;\n    }\n    detailNode.data = masterNode.data;\n    detailNode.level = masterNode.level + 1;\n    masterNode.detailNode = detailNode;\n    return detailNode;\n  }\n};\n__decorateClass([\n  (0, import_core5.Autowired)(\"beans\")\n], FlattenStage.prototype, \"beans\", 2);\nFlattenStage = __decorateClass([\n  (0, import_core5.Bean)(\"flattenStage\")\n], FlattenStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortService.ts\nvar import_core6 = require(\"@ag-grid-community/core\");\nvar SortService = class extends import_core6.BeanStub {\n  sort(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {\n    const groupMaintainOrder = this.gos.get(\"groupMaintainOrder\");\n    const groupColumnsPresent = this.columnModel.getAllGridColumns().some((c) => c.isRowGroupActive());\n    let allDirtyNodes = {};\n    if (useDeltaSort && rowNodeTransactions) {\n      allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);\n    }\n    const isPivotMode = this.columnModel.isPivotMode();\n    const postSortFunc = this.gos.getCallback(\"postSortRows\");\n    const callback = (rowNode) => {\n      var _a;\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\n      const skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;\n      let skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\n      if (skipSortingGroups) {\n        const nextGroup = (_a = this.columnModel.getRowGroupColumns()) == null ? void 0 : _a[rowNode.level + 1];\n        const wasSortExplicitlyRemoved = (nextGroup == null ? void 0 : nextGroup.getSort()) === null;\n        const childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);\n        if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {\n          const indexedOrders = {};\n          rowNode.childrenAfterSort.forEach((node, idx) => {\n            indexedOrders[node.id] = idx;\n          });\n          childrenToBeSorted.sort((row1, row2) => {\n            var _a2, _b;\n            return ((_a2 = indexedOrders[row1.id]) != null ? _a2 : 0) - ((_b = indexedOrders[row2.id]) != null ? _b : 0);\n          });\n        }\n        rowNode.childrenAfterSort = childrenToBeSorted;\n      } else if (!sortActive || skipSortingPivotLeafs) {\n        rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter.slice(0);\n      } else if (useDeltaSort) {\n        rowNode.childrenAfterSort = this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);\n      } else {\n        rowNode.childrenAfterSort = this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\n      }\n      this.updateChildIndexes(rowNode);\n      if (postSortFunc) {\n        const params = { nodes: rowNode.childrenAfterSort };\n        postSortFunc(params);\n      }\n    };\n    if (changedPath) {\n      changedPath.forEachChangedNodeDepthFirst(callback);\n    }\n    this.updateGroupDataForHideOpenParents(changedPath);\n  }\n  calculateDirtyNodes(rowNodeTransactions) {\n    const dirtyNodes = {};\n    const addNodesFunc = (rowNodes) => {\n      if (rowNodes) {\n        rowNodes.forEach((rowNode) => dirtyNodes[rowNode.id] = true);\n      }\n    };\n    if (rowNodeTransactions) {\n      rowNodeTransactions.forEach((tran) => {\n        addNodesFunc(tran.add);\n        addNodesFunc(tran.update);\n        addNodesFunc(tran.remove);\n      });\n    }\n    return dirtyNodes;\n  }\n  doDeltaSort(rowNode, allTouchedNodes, changedPath, sortOptions) {\n    const unsortedRows = rowNode.childrenAfterAggFilter;\n    const oldSortedRows = rowNode.childrenAfterSort;\n    if (!oldSortedRows) {\n      return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);\n    }\n    const untouchedRowsMap = {};\n    const touchedRows = [];\n    unsortedRows.forEach((row) => {\n      if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {\n        touchedRows.push(row);\n      } else {\n        untouchedRowsMap[row.id] = true;\n      }\n    });\n    const sortedUntouchedRows = oldSortedRows.filter((child) => untouchedRowsMap[child.id]);\n    const mapNodeToSortedNode = (rowNode2, pos) => ({ currentPos: pos, rowNode: rowNode2 });\n    const sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort((a, b) => this.rowNodeSorter.compareRowNodes(sortOptions, a, b));\n    return this.mergeSortedArrays(\n      sortOptions,\n      sortedChangedRows,\n      sortedUntouchedRows.map(mapNodeToSortedNode)\n    ).map(({ rowNode: rowNode2 }) => rowNode2);\n  }\n  // Merge two sorted arrays into each other\n  mergeSortedArrays(sortOptions, arr1, arr2) {\n    const res = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n      const compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n      if (compareResult < 0) {\n        res.push(arr1[i++]);\n      } else {\n        res.push(arr2[j++]);\n      }\n    }\n    while (i < arr1.length) {\n      res.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n      res.push(arr2[j++]);\n    }\n    return res;\n  }\n  updateChildIndexes(rowNode) {\n    if (import_core6._.missing(rowNode.childrenAfterSort)) {\n      return;\n    }\n    const listToSort = rowNode.childrenAfterSort;\n    for (let i = 0; i < listToSort.length; i++) {\n      const child = listToSort[i];\n      const firstChild = i === 0;\n      const lastChild = i === rowNode.childrenAfterSort.length - 1;\n      child.setFirstChild(firstChild);\n      child.setLastChild(lastChild);\n      child.setChildIndex(i);\n    }\n  }\n  updateGroupDataForHideOpenParents(changedPath) {\n    if (!this.gos.get(\"groupHideOpenParents\")) {\n      return;\n    }\n    if (this.gos.get(\"treeData\")) {\n      import_core6._.warnOnce(`The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them.`);\n      return false;\n    }\n    const callback = (rowNode) => {\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n      rowNode.childrenAfterSort.forEach((child) => {\n        if (child.hasChildren()) {\n          callback(child);\n        }\n      });\n    };\n    if (changedPath) {\n      changedPath.executeFromRootNode((rowNode) => callback(rowNode));\n    }\n  }\n  pullDownGroupDataForHideOpenParents(rowNodes, clearOperation) {\n    if (!this.gos.get(\"groupHideOpenParents\") || import_core6._.missing(rowNodes)) {\n      return;\n    }\n    rowNodes.forEach((childRowNode) => {\n      const groupDisplayCols = this.columnModel.getGroupDisplayColumns();\n      groupDisplayCols.forEach((groupDisplayCol) => {\n        const showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n        if (typeof showRowGroup !== \"string\") {\n          console.error(\"AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup\");\n          return;\n        }\n        const displayingGroupKey = showRowGroup;\n        const rowGroupColumn = this.columnModel.getPrimaryColumn(displayingGroupKey);\n        const thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n        if (thisRowNodeMatches) {\n          return;\n        }\n        if (clearOperation) {\n          childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);\n        } else {\n          const parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n          if (parentToStealFrom) {\n            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n          }\n        }\n      });\n    });\n  }\n};\n__decorateClass([\n  (0, import_core6.Autowired)(\"columnModel\")\n], SortService.prototype, \"columnModel\", 2);\n__decorateClass([\n  (0, import_core6.Autowired)(\"rowNodeSorter\")\n], SortService.prototype, \"rowNodeSorter\", 2);\nSortService = __decorateClass([\n  (0, import_core6.Bean)(\"sortService\")\n], SortService);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterService.ts\nvar import_core7 = require(\"@ag-grid-community/core\");\nvar FilterService = class extends import_core7.BeanStub {\n  filter(changedPath) {\n    const filterActive = this.filterManager.isChildFilterPresent();\n    this.filterNodes(filterActive, changedPath);\n  }\n  filterNodes(filterActive, changedPath) {\n    const filterCallback = (rowNode, includeChildNodes) => {\n      if (rowNode.hasChildren()) {\n        if (filterActive && !includeChildNodes) {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter((childNode) => {\n            const passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n            const passBecauseDataPasses = childNode.data && this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            return passBecauseChildren || passBecauseDataPasses;\n          });\n        } else {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        }\n      } else {\n        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n      }\n    };\n    if (this.doingTreeDataFiltering()) {\n      const treeDataDepthFirstFilter = (rowNode, alreadyFoundInParent) => {\n        if (rowNode.childrenAfterGroup) {\n          for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            const childNode = rowNode.childrenAfterGroup[i];\n            const foundInParent = alreadyFoundInParent || this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            if (childNode.childrenAfterGroup) {\n              treeDataDepthFirstFilter(rowNode.childrenAfterGroup[i], foundInParent);\n            } else {\n              filterCallback(childNode, foundInParent);\n            }\n          }\n        }\n        filterCallback(rowNode, alreadyFoundInParent);\n      };\n      const treeDataFilterCallback = (rowNode) => treeDataDepthFirstFilter(rowNode, false);\n      changedPath.executeFromRootNode(treeDataFilterCallback);\n    } else {\n      const defaultFilterCallback = (rowNode) => filterCallback(rowNode, false);\n      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n    }\n  }\n  doingTreeDataFiltering() {\n    return this.gos.get(\"treeData\") && !this.gos.get(\"excludeChildrenWhenTreeDataFiltering\");\n  }\n};\n__decorateClass([\n  (0, import_core7.Autowired)(\"filterManager\")\n], FilterService.prototype, \"filterManager\", 2);\nFilterService = __decorateClass([\n  (0, import_core7.Bean)(\"filterService\")\n], FilterService);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/immutableService.ts\nvar import_core8 = require(\"@ag-grid-community/core\");\nvar ImmutableService = class extends import_core8.BeanStub {\n  postConstruct() {\n    if (this.rowModel.getType() === \"clientSide\") {\n      this.clientSideRowModel = this.rowModel;\n      this.addManagedPropertyListener(\"rowData\", () => this.onRowDataUpdated());\n    }\n  }\n  isActive() {\n    const getRowIdProvided = this.gos.exists(\"getRowId\");\n    const resetRowDataOnUpdate = this.gos.get(\"resetRowDataOnUpdate\");\n    if (resetRowDataOnUpdate) {\n      return false;\n    }\n    return getRowIdProvided;\n  }\n  setRowData(rowData) {\n    const transactionAndMap = this.createTransactionForRowData(rowData);\n    if (!transactionAndMap) {\n      return;\n    }\n    const [transaction, orderIdMap] = transactionAndMap;\n    this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n  }\n  // converts the setRowData() command to a transaction\n  createTransactionForRowData(rowData) {\n    if (import_core8._.missing(this.clientSideRowModel)) {\n      console.error(\"AG Grid: ImmutableService only works with ClientSideRowModel\");\n      return;\n    }\n    const getRowIdFunc = this.gos.getCallback(\"getRowId\");\n    if (getRowIdFunc == null) {\n      console.error(\"AG Grid: ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!\");\n      return;\n    }\n    const transaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n    const suppressSortOrder = this.gos.get(\"suppressMaintainUnsortedOrder\");\n    const orderMap = suppressSortOrder ? void 0 : {};\n    if (import_core8._.exists(rowData)) {\n      rowData.forEach((data, index) => {\n        const id = getRowIdFunc({ data, level: 0 });\n        const existingNode = existingNodesMap[id];\n        if (orderMap) {\n          orderMap[id] = index;\n        }\n        if (existingNode) {\n          const dataHasChanged = existingNode.data !== data;\n          if (dataHasChanged) {\n            transaction.update.push(data);\n          }\n          existingNodesMap[id] = void 0;\n        } else {\n          transaction.add.push(data);\n        }\n      });\n    }\n    import_core8._.iterateObject(existingNodesMap, (id, rowNode) => {\n      if (rowNode) {\n        transaction.remove.push(rowNode.data);\n      }\n    });\n    return [transaction, orderMap];\n  }\n  onRowDataUpdated() {\n    const rowData = this.gos.get(\"rowData\");\n    if (!rowData) {\n      return;\n    }\n    if (this.isActive()) {\n      this.setRowData(rowData);\n    } else {\n      this.selectionService.reset(\"rowDataChanged\");\n      this.clientSideRowModel.setRowData(rowData);\n    }\n  }\n};\n__decorateClass([\n  (0, import_core8.Autowired)(\"rowModel\")\n], ImmutableService.prototype, \"rowModel\", 2);\n__decorateClass([\n  (0, import_core8.Autowired)(\"rowRenderer\")\n], ImmutableService.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  (0, import_core8.Autowired)(\"selectionService\")\n], ImmutableService.prototype, \"selectionService\", 2);\n__decorateClass([\n  import_core8.PostConstruct\n], ImmutableService.prototype, \"postConstruct\", 1);\nImmutableService = __decorateClass([\n  (0, import_core8.Bean)(\"immutableService\")\n], ImmutableService);\n\n// community-modules/client-side-row-model/src/version.ts\nvar VERSION = \"31.3.4\";\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nvar ClientSideRowModelModule = {\n  version: VERSION,\n  moduleName: import_core9.ModuleNames.ClientSideRowModelModule,\n  rowModel: \"clientSide\",\n  beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService]\n};\n"],
  "mappings": "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",
  "names": ["target", "all", "name", "to", "from", "except", "desc", "key", "mod", "decorators", "kind", "result", "i", "decorator", "_ClientSideNodeManager", "rootNode", "gos", "eventService", "columnModel", "selectionService", "beans", "id", "rowData", "sibling", "dataItem", "rowDataTran", "rowNodeOrder", "rowNodeTransaction", "nodesToUnselect", "event", "source", "selectionChanged", "_a", "add", "addIndex", "newNodes", "item", "allLeafChildren", "len", "normalisedAddIndex", "nodesBeforeIndex", "nodesAfterIndex", "remove", "rowIdsRemoved", "rowNode", "update", "data", "getRowIdFunc", "node", "parent", "level", "suppressParentsInRowNodes", "setExpanded", "isRowMasterFunc", "rowGroupColumns", "numRowGroupColumns", "masterRowLevel", "expandByDefault", "refreshEverythingFunc", "animate", "refreshEverythingAfterColsChangedFunc", "resetProps", "groupStageRefreshProps", "filterStageRefreshProps", "pivotStageRefreshProps", "aggregateStageRefreshProps", "sortStageRefreshProps", "filterAggStageRefreshProps", "flattenStageRefreshProps", "allProps", "params", "properties", "arePropertiesImpacted", "propSet", "prop", "child", "startPixel", "endPixel", "startLimitIndex", "endLimitIndex", "atLeastOneChange", "res", "rowAtStartPixel", "rowAtEndPixel", "firstRow", "lastRow", "rowIndex", "rowHeight", "defaultRowHeight", "nextRowTop", "displayedRowsMapped", "allowEstimate", "changedPath", "changedPathActive", "clearIfNotDisplayed", "recurse", "isRootNode", "rowNodes", "pixel", "increment", "indexAtPixelNow", "rowNodeAtPixelNow", "idx", "highlight", "index", "rowTop", "filteredChildren", "topLevelIndex", "step", "col", "rowNodeTransactions", "noTransactions", "transWithAddsOrDeletes", "tx", "paramsStep", "stepsMapped", "paramsOrStep", "displayedNodesMapped", "rowsMissing", "firstInRange", "lastInRange", "started", "finished", "groupsSelectChildren", "datasource", "pixelToMatch", "bottomPointer", "topPointer", "oldBottomPointer", "oldTopPointer", "midPointer", "currentRowNode", "topPixel", "bottomPixel", "callback", "includeFooterNodes", "nodes", "recursionType", "addFooters", "position", "parentNode", "grandTotal", "isGroupIncludeFooter", "groupTotal", "nodeChildren", "expand", "usingTreeData", "usingPivotMode", "recursiveExpandOrCollapse", "actionRow", "eventSource", "afterColumnsChanged", "rowDataUpdatedEvent", "rowDataTransaction", "waitMillis", "callbackFuncsBound", "rowNodeTrans", "forceRowNodeOrder", "tranItem", "rowNodeTran", "func", "orderMap", "atLeastOne", "detailNode", "sortOptions", "sortActive", "deltaSort", "sortContainsGroupColumns", "opt", "skipLeafNodes", "showRootNode", "topList", "details", "atLeastOneRowPresent", "addToTop", "groupRemoveSingleChildren", "rowsToFlatten", "uiLevel", "isParent", "isSkippedLeafNode", "isRemovedSingleChildrenGroup", "isRemovedLowestSingleChildrenGroup", "neverAllowToExpand", "isHiddenOpenParent", "excludedParent", "doesRowShowFooter", "uiLevelForChildren", "masterNode", "useDeltaSort", "groupMaintainOrder", "groupColumnsPresent", "c", "allDirtyNodes", "isPivotMode", "postSortFunc", "skipSortingPivotLeafs", "nextGroup", "wasSortExplicitlyRemoved", "childrenToBeSorted", "indexedOrders", "row1", "row2", "_a2", "_b", "dirtyNodes", "addNodesFunc", "tran", "allTouchedNodes", "unsortedRows", "oldSortedRows", "untouchedRowsMap", "touchedRows", "row", "sortedUntouchedRows", "mapNodeToSortedNode", "rowNode2", "pos", "sortedChangedRows", "a", "b", "arr1", "arr2", "j", "listToSort", "firstChild", "lastChild", "clearOperation", "childRowNode", "groupDisplayCol", "showRowGroup", "displayingGroupKey", "rowGroupColumn", "parentToStealFrom", "filterActive", "filterCallback", "includeChildNodes", "childNode", "passBecauseChildren", "passBecauseDataPasses", "treeDataDepthFirstFilter", "alreadyFoundInParent", "foundInParent", "treeDataFilterCallback", "defaultFilterCallback", "getRowIdProvided", "transactionAndMap", "transaction", "orderIdMap", "existingNodesMap", "existingNode"]
}
