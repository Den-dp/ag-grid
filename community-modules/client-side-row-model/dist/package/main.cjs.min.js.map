{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// community-modules/client-side-row-model/src/main.ts\nvar main_exports = {};\n__export(main_exports, {\n  ClientSideRowModelModule: () => ClientSideRowModelModule\n});\nmodule.exports = __toCommonJS(main_exports);\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nvar import_core9 = require(\"@ag-grid-community/core\");\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nvar import_core2 = require(\"@ag-grid-community/core\");\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideNodeManager.ts\nvar import_core = require(\"@ag-grid-community/core\");\nvar ROOT_NODE_ID = \"ROOT_NODE_ID\";\nvar TOP_LEVEL = 0;\nvar ClientSideNodeManager = class {\n  constructor(rootNode, gos, eventService, funcColsService, selectionService, beans) {\n    this.nextId = 0;\n    // has row data actually been set\n    this.rowCountReady = false;\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gos = gos;\n    this.eventService = eventService;\n    this.funcColsService = funcColsService;\n    this.beans = beans;\n    this.selectionService = selectionService;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterAggFilter = [];\n    this.rootNode.childrenAfterFilter = [];\n  }\n  getCopyOfNodesMap() {\n    return (0, import_core._cloneObject)(this.allNodesMap);\n  }\n  getRowNode(id) {\n    return this.allNodesMap[id];\n  }\n  setRowData(rowData) {\n    if (typeof rowData === \"string\") {\n      (0, import_core._warnOnce)(\"rowData must be an array.\");\n      return;\n    }\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowData);\n    const rootNode = this.rootNode;\n    const sibling = this.rootNode.sibling;\n    rootNode.childrenAfterFilter = null;\n    rootNode.childrenAfterGroup = null;\n    rootNode.childrenAfterAggFilter = null;\n    rootNode.childrenAfterSort = null;\n    rootNode.childrenMapped = null;\n    rootNode.updateHasChildren();\n    this.nextId = 0;\n    this.allNodesMap = {};\n    if (rowData) {\n      rootNode.allLeafChildren = rowData.map((dataItem) => this.createNode(dataItem, this.rootNode, TOP_LEVEL));\n    } else {\n      rootNode.allLeafChildren = [];\n      rootNode.childrenAfterGroup = [];\n    }\n    if (sibling) {\n      sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n      sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;\n      sibling.childrenAfterSort = rootNode.childrenAfterSort;\n      sibling.childrenMapped = rootNode.childrenMapped;\n      sibling.allLeafChildren = rootNode.allLeafChildren;\n    }\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);\n    const rowNodeTransaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const nodesToUnselect = [];\n    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeAdd(rowDataTran, rowNodeTransaction);\n    this.updateSelection(nodesToUnselect, \"rowDataChanged\");\n    if (rowNodeOrder) {\n      (0, import_core._sortRowNodesByOrder)(this.rootNode.allLeafChildren, rowNodeOrder);\n    }\n    return rowNodeTransaction;\n  }\n  isRowCountReady() {\n    return this.rowCountReady;\n  }\n  dispatchRowDataUpdateStartedEvent(rowData) {\n    const event = {\n      type: \"rowDataUpdateStarted\",\n      firstRowData: rowData?.length ? rowData[0] : null\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  updateSelection(nodesToUnselect, source) {\n    const selectionChanged = nodesToUnselect.length > 0;\n    if (selectionChanged) {\n      this.selectionService.setNodesSelected({\n        newValue: false,\n        nodes: nodesToUnselect,\n        suppressFinishActions: true,\n        source\n      });\n    }\n    this.selectionService.updateGroupsFromChildrenSelections(source);\n    if (selectionChanged) {\n      const event = {\n        type: \"selectionChanged\",\n        source\n      };\n      this.eventService.dispatchEvent(event);\n    }\n  }\n  executeAdd(rowDataTran, rowNodeTransaction) {\n    const { add, addIndex } = rowDataTran;\n    if ((0, import_core._missingOrEmpty)(add)) {\n      return;\n    }\n    const newNodes = add.map((item) => this.createNode(item, this.rootNode, TOP_LEVEL));\n    const allLeafChildren = this.rootNode.allLeafChildren;\n    if (typeof addIndex === \"number\" && addIndex >= 0) {\n      const len = allLeafChildren.length;\n      let normalisedAddIndex = addIndex;\n      const isTreeData = this.gos.get(\"treeData\");\n      if (isTreeData && addIndex > 0 && len > 0) {\n        for (let i = 0; i < len; i++) {\n          if (allLeafChildren[i]?.rowIndex == addIndex - 1) {\n            normalisedAddIndex = i + 1;\n            break;\n          }\n        }\n      }\n      const nodesBeforeIndex = allLeafChildren.slice(0, normalisedAddIndex);\n      const nodesAfterIndex = allLeafChildren.slice(normalisedAddIndex, allLeafChildren.length);\n      this.rootNode.allLeafChildren = [...nodesBeforeIndex, ...newNodes, ...nodesAfterIndex];\n    } else {\n      this.rootNode.allLeafChildren = [...allLeafChildren, ...newNodes];\n    }\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = allLeafChildren;\n    }\n    rowNodeTransaction.add = newNodes;\n  }\n  executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { remove } = rowDataTran;\n    if ((0, import_core._missingOrEmpty)(remove)) {\n      return;\n    }\n    const rowIdsRemoved = {};\n    remove.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      rowNode.clearRowTopAndRowIndex();\n      rowIdsRemoved[rowNode.id] = true;\n      delete this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren?.filter((rowNode) => !rowIdsRemoved[rowNode.id]) ?? null;\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n  }\n  executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { update } = rowDataTran;\n    if ((0, import_core._missingOrEmpty)(update)) {\n      return;\n    }\n    update.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      rowNode.updateData(item);\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      this.setMasterForRow(rowNode, item, TOP_LEVEL, false);\n      rowNodeTransaction.update.push(rowNode);\n    });\n  }\n  lookupRowNode(data) {\n    const getRowIdFunc = this.gos.getRowIdCallback();\n    let rowNode;\n    if (getRowIdFunc) {\n      const id = getRowIdFunc({ data, level: 0 });\n      rowNode = this.allNodesMap[id];\n      if (!rowNode) {\n        (0, import_core._errorOnce)(`could not find row id=${id}, data item was not found for this id`);\n        return null;\n      }\n    } else {\n      rowNode = this.rootNode.allLeafChildren?.find((node) => node.data === data);\n      if (!rowNode) {\n        (0, import_core._errorOnce)(`could not find data item as object was not found`, data);\n        (0, import_core._errorOnce)(`Consider using getRowId to help the Grid find matching row data`);\n        return null;\n      }\n    }\n    return rowNode || null;\n  }\n  createNode(dataItem, parent, level) {\n    const node = new import_core.RowNode(this.beans);\n    node.group = false;\n    this.setMasterForRow(node, dataItem, level, true);\n    if (parent) {\n      node.parent = parent;\n    }\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n    if (this.allNodesMap[node.id]) {\n      (0, import_core._warnOnce)(\n        `duplicate node id '${node.id}' detected from getRowId callback, this could cause issues in your grid.`\n      );\n    }\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  }\n  setMasterForRow(rowNode, data, level, setExpanded) {\n    const isTreeData = this.gos.get(\"treeData\");\n    if (isTreeData) {\n      rowNode.setMaster(false);\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      const masterDetail = this.gos.get(\"masterDetail\");\n      if (masterDetail) {\n        const isRowMasterFunc = this.gos.get(\"isRowMaster\");\n        if (isRowMasterFunc) {\n          rowNode.setMaster(isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n      if (setExpanded) {\n        const rowGroupColumns = this.funcColsService.getRowGroupColumns();\n        const numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n        const masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  }\n  isExpanded(level) {\n    const expandByDefault = this.gos.get(\"groupDefaultExpanded\");\n    if (expandByDefault === -1) {\n      return true;\n    }\n    return level < expandByDefault;\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nvar ClientSideRowModel = class extends import_core2.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"rowModel\";\n    this.onRowHeightChanged_debounced = (0, import_core2._debounce)(this.onRowHeightChanged.bind(this), 100);\n    this.rowsToDisplay = [];\n    /** Has the start method been called */\n    this.hasStarted = false;\n    /** E.g. data has been set into the node manager already */\n    this.shouldSkipSettingDataOnStart = false;\n    /**\n     * This is to prevent refresh model being called when it's already being called.\n     * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,\n     * which then triggers the listener here that calls refresh model again but at the filter stage\n     * (which is about to be run by the original call).\n     */\n    this.isRefreshingModel = false;\n    this.rowCountReady = false;\n  }\n  wireBeans(beans) {\n    this.beans = beans;\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n    this.selectionService = beans.selectionService;\n    this.valueCache = beans.valueCache;\n    this.environment = beans.environment;\n    this.filterStage = beans.filterStage;\n    this.sortStage = beans.sortStage;\n    this.flattenStage = beans.flattenStage;\n    this.groupStage = beans.groupStage;\n    this.aggregationStage = beans.aggregationStage;\n    this.pivotStage = beans.pivotStage;\n    this.filterAggregatesStage = beans.filterAggregatesStage;\n  }\n  postConstruct() {\n    const refreshEverythingFunc = this.refreshModel.bind(this, { step: import_core2.ClientSideRowModelSteps.EVERYTHING });\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      // after cols change, row grouping (the first stage) could of changed\n      afterColumnsChanged: true,\n      keepRenderedRows: true,\n      // we want animations cos sorting or filtering could be applied\n      animate\n    });\n    this.addManagedEventListeners({\n      newColumnsLoaded: refreshEverythingAfterColsChangedFunc,\n      columnRowGroupChanged: refreshEverythingFunc,\n      columnValueChanged: this.onValueChanged.bind(this),\n      columnPivotChanged: this.refreshModel.bind(this, { step: import_core2.ClientSideRowModelSteps.PIVOT }),\n      filterChanged: this.onFilterChanged.bind(this),\n      sortChanged: this.onSortChanged.bind(this),\n      columnPivotModeChanged: refreshEverythingFunc,\n      gridStylesChanged: this.onGridStylesChanges.bind(this),\n      gridReady: this.onGridReady.bind(this)\n    });\n    this.addPropertyListeners();\n    this.rootNode = new import_core2.RowNode(this.beans);\n    this.nodeManager = new ClientSideNodeManager(\n      this.rootNode,\n      this.gos,\n      this.eventService,\n      this.funcColsService,\n      this.selectionService,\n      this.beans\n    );\n  }\n  addPropertyListeners() {\n    const resetProps = /* @__PURE__ */ new Set([\"treeData\", \"masterDetail\"]);\n    const groupStageRefreshProps = /* @__PURE__ */ new Set([\n      \"groupDefaultExpanded\",\n      \"groupAllowUnbalanced\",\n      \"initialGroupOrderComparator\",\n      \"groupHideOpenParents\",\n      \"groupDisplayType\"\n    ]);\n    const filterStageRefreshProps = /* @__PURE__ */ new Set([\"excludeChildrenWhenTreeDataFiltering\"]);\n    const pivotStageRefreshProps = /* @__PURE__ */ new Set([\n      \"removePivotHeaderRowWhenSingleValueColumn\",\n      \"pivotRowTotals\",\n      \"pivotColumnGroupTotals\",\n      \"suppressExpandablePivotGroups\"\n    ]);\n    const aggregateStageRefreshProps = /* @__PURE__ */ new Set([\n      \"getGroupRowAgg\",\n      \"alwaysAggregateAtRootLevel\",\n      \"groupIncludeTotalFooter\",\n      \"suppressAggFilteredOnly\",\n      \"grandTotalRow\"\n    ]);\n    const sortStageRefreshProps = /* @__PURE__ */ new Set([\n      \"postSortRows\",\n      \"groupDisplayType\",\n      \"accentedSort\"\n    ]);\n    const filterAggStageRefreshProps = /* @__PURE__ */ new Set([]);\n    const flattenStageRefreshProps = /* @__PURE__ */ new Set([\n      \"groupRemoveSingleChildren\",\n      \"groupRemoveLowestSingleChildren\",\n      \"groupIncludeFooter\",\n      \"groupTotalRow\"\n    ]);\n    const allProps = [\n      ...resetProps,\n      ...groupStageRefreshProps,\n      ...filterStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...aggregateStageRefreshProps,\n      ...sortStageRefreshProps,\n      ...filterAggStageRefreshProps,\n      ...flattenStageRefreshProps\n    ];\n    this.addManagedPropertyListeners(allProps, (params) => {\n      const properties = params.changeSet?.properties;\n      if (!properties) {\n        return;\n      }\n      const arePropertiesImpacted = (propSet) => properties.some((prop) => propSet.has(prop));\n      if (arePropertiesImpacted(resetProps)) {\n        this.setRowData(this.rootNode.allLeafChildren.map((child) => child.data));\n        return;\n      }\n      if (arePropertiesImpacted(groupStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.EVERYTHING });\n        return;\n      }\n      if (arePropertiesImpacted(filterStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.FILTER });\n        return;\n      }\n      if (arePropertiesImpacted(pivotStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.PIVOT });\n        return;\n      }\n      if (arePropertiesImpacted(aggregateStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.AGGREGATE });\n        return;\n      }\n      if (arePropertiesImpacted(sortStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.SORT });\n        return;\n      }\n      if (arePropertiesImpacted(filterAggStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.FILTER_AGGREGATES });\n        return;\n      }\n      if (arePropertiesImpacted(flattenStageRefreshProps)) {\n        this.refreshModel({ step: import_core2.ClientSideRowModelSteps.MAP });\n      }\n    });\n    this.addManagedPropertyListener(\"rowHeight\", () => this.resetRowHeights());\n  }\n  start() {\n    this.hasStarted = true;\n    if (this.shouldSkipSettingDataOnStart) {\n      this.dispatchUpdateEventsAndRefresh();\n    } else {\n      this.setInitialData();\n    }\n  }\n  setInitialData() {\n    const rowData = this.gos.get(\"rowData\");\n    if (rowData) {\n      this.shouldSkipSettingDataOnStart = true;\n      this.setRowData(rowData);\n    }\n  }\n  ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    let atLeastOneChange;\n    let res = false;\n    do {\n      atLeastOneChange = false;\n      const rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n      const rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n      const firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n      const lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n      for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n        const rowNode = this.getRow(rowIndex);\n        if (rowNode.rowHeightEstimated) {\n          const rowHeight = this.gos.getRowHeightForNode(rowNode);\n          rowNode.setRowHeight(rowHeight.height);\n          atLeastOneChange = true;\n          res = true;\n        }\n      }\n      if (atLeastOneChange) {\n        this.setRowTopAndRowIndex();\n      }\n    } while (atLeastOneChange);\n    return res;\n  }\n  setRowTopAndRowIndex() {\n    const defaultRowHeight = this.environment.getDefaultRowHeight();\n    let nextRowTop = 0;\n    const displayedRowsMapped = /* @__PURE__ */ new Set();\n    const allowEstimate = this.gos.isDomLayout(\"normal\");\n    for (let i = 0; i < this.rowsToDisplay.length; i++) {\n      const rowNode = this.rowsToDisplay[i];\n      if (rowNode.id != null) {\n        displayedRowsMapped.add(rowNode.id);\n      }\n      if (rowNode.rowHeight == null) {\n        const rowHeight = this.gos.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);\n        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n      }\n      rowNode.setRowTop(nextRowTop);\n      rowNode.setRowIndex(i);\n      nextRowTop += rowNode.rowHeight;\n    }\n    return displayedRowsMapped;\n  }\n  clearRowTopAndRowIndex(changedPath, displayedRowsMapped) {\n    const changedPathActive = changedPath.isActive();\n    const clearIfNotDisplayed = (rowNode) => {\n      if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\n        rowNode.clearRowTopAndRowIndex();\n      }\n    };\n    const recurse = (rowNode) => {\n      clearIfNotDisplayed(rowNode);\n      clearIfNotDisplayed(rowNode.detailNode);\n      clearIfNotDisplayed(rowNode.sibling);\n      if (rowNode.hasChildren()) {\n        if (rowNode.childrenAfterGroup) {\n          const isRootNode = rowNode.level == -1;\n          const skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\n          if (!skipChildren) {\n            rowNode.childrenAfterGroup.forEach(recurse);\n          }\n        }\n      }\n    };\n    recurse(this.rootNode);\n  }\n  // returns false if row was moved, otherwise true\n  ensureRowsAtPixel(rowNodes, pixel, increment = 0) {\n    const indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n    const rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    if (rowNodeAtPixelNow === rowNodes[0]) {\n      return false;\n    }\n    rowNodes.forEach((rowNode) => {\n      (0, import_core2._removeFromArray)(this.rootNode.allLeafChildren, rowNode);\n    });\n    rowNodes.forEach((rowNode, idx) => {\n      (0, import_core2._insertIntoArray)(this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n    });\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n    return true;\n  }\n  highlightRowAtPixel(rowNode, pixel) {\n    const indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n    const rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n    if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n      if (this.lastHighlightedRow) {\n        this.lastHighlightedRow.setHighlighted(null);\n        this.lastHighlightedRow = null;\n      }\n      return;\n    }\n    const highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n    if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n      this.lastHighlightedRow.setHighlighted(null);\n      this.lastHighlightedRow = null;\n    }\n    rowNodeAtPixelNow.setHighlighted(highlight);\n    this.lastHighlightedRow = rowNodeAtPixelNow;\n  }\n  getHighlightPosition(pixel, rowNode) {\n    if (!rowNode) {\n      const index = this.getRowIndexAtPixel(pixel);\n      rowNode = this.getRow(index || 0);\n      if (!rowNode) {\n        return import_core2.RowHighlightPosition.Below;\n      }\n    }\n    const { rowTop, rowHeight } = rowNode;\n    return pixel - rowTop < rowHeight / 2 ? import_core2.RowHighlightPosition.Above : import_core2.RowHighlightPosition.Below;\n  }\n  getLastHighlightedRowNode() {\n    return this.lastHighlightedRow;\n  }\n  isLastRowIndexKnown() {\n    return true;\n  }\n  getRowCount() {\n    if (this.rowsToDisplay) {\n      return this.rowsToDisplay.length;\n    }\n    return 0;\n  }\n  getTopLevelRowCount() {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return 1;\n    }\n    const totalFooterInc = this.rootNode.sibling ? 1 : 0;\n    const filteredChildren = this.rootNode.childrenAfterAggFilter;\n    return (filteredChildren ? filteredChildren.length : 0) + totalFooterInc;\n  }\n  getTopLevelRowDisplayedIndex(topLevelIndex) {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return topLevelIndex;\n    }\n    let adjustedIndex = topLevelIndex;\n    if (this.rowsToDisplay[0].footer) {\n      if (topLevelIndex === 0) {\n        return 0;\n      }\n      adjustedIndex -= 1;\n    }\n    let rowNode = this.rootNode.childrenAfterSort[adjustedIndex];\n    if (this.gos.get(\"groupHideOpenParents\")) {\n      while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n        rowNode = rowNode.childrenAfterSort[0];\n      }\n    }\n    return rowNode.rowIndex;\n  }\n  getRowBounds(index) {\n    if ((0, import_core2._missing)(this.rowsToDisplay)) {\n      return null;\n    }\n    const rowNode = this.rowsToDisplay[index];\n    if (rowNode) {\n      return {\n        rowTop: rowNode.rowTop,\n        rowHeight: rowNode.rowHeight\n      };\n    }\n    return null;\n  }\n  onRowGroupOpened() {\n    const animate = this.gos.isAnimateRows();\n    this.refreshModel({ step: import_core2.ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });\n  }\n  onFilterChanged(event) {\n    if (event.afterDataChange) {\n      return;\n    }\n    const animate = this.gos.isAnimateRows();\n    const primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some((col) => col.isPrimary());\n    const step = primaryOrQuickFilterChanged ? import_core2.ClientSideRowModelSteps.FILTER : import_core2.ClientSideRowModelSteps.FILTER_AGGREGATES;\n    this.refreshModel({ step, keepRenderedRows: true, animate });\n  }\n  onSortChanged() {\n    const animate = this.gos.isAnimateRows();\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.SORT,\n      keepRenderedRows: true,\n      animate,\n      keepEditingRows: true\n    });\n  }\n  getType() {\n    return \"clientSide\";\n  }\n  onValueChanged() {\n    if (this.columnModel.isPivotActive()) {\n      this.refreshModel({ step: import_core2.ClientSideRowModelSteps.PIVOT });\n    } else {\n      this.refreshModel({ step: import_core2.ClientSideRowModelSteps.AGGREGATE });\n    }\n  }\n  createChangePath(rowNodeTransactions) {\n    const noTransactions = (0, import_core2._missingOrEmpty)(rowNodeTransactions);\n    const changedPath = new import_core2.ChangedPath(false, this.rootNode);\n    if (noTransactions || this.gos.get(\"treeData\")) {\n      changedPath.setInactive();\n    }\n    return changedPath;\n  }\n  isSuppressModelUpdateAfterUpdateTransaction(params) {\n    if (!this.gos.get(\"suppressModelUpdateAfterUpdateTransaction\")) {\n      return false;\n    }\n    if (params.rowNodeTransactions == null) {\n      return false;\n    }\n    const transWithAddsOrDeletes = params.rowNodeTransactions.filter(\n      (tx) => tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0\n    );\n    const transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n    return transactionsContainUpdatesOnly;\n  }\n  buildRefreshModelParams(step) {\n    let paramsStep = import_core2.ClientSideRowModelSteps.EVERYTHING;\n    const stepsMapped = {\n      everything: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      group: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      filter: import_core2.ClientSideRowModelSteps.FILTER,\n      map: import_core2.ClientSideRowModelSteps.MAP,\n      aggregate: import_core2.ClientSideRowModelSteps.AGGREGATE,\n      sort: import_core2.ClientSideRowModelSteps.SORT,\n      pivot: import_core2.ClientSideRowModelSteps.PIVOT\n    };\n    if ((0, import_core2._exists)(step)) {\n      paramsStep = stepsMapped[step];\n    }\n    if ((0, import_core2._missing)(paramsStep)) {\n      (0, import_core2._errorOnce)(`invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(\", \")}`);\n      return void 0;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    };\n    return modelParams;\n  }\n  refreshModel(paramsOrStep) {\n    if (!this.hasStarted || this.isRefreshingModel || this.columnModel.isChangeEventsDispatching()) {\n      return;\n    }\n    const params = typeof paramsOrStep === \"object\" && \"step\" in paramsOrStep ? paramsOrStep : this.buildRefreshModelParams(paramsOrStep);\n    if (!params) {\n      return;\n    }\n    if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n      return;\n    }\n    const changedPath = this.createChangePath(params.rowNodeTransactions);\n    this.isRefreshingModel = true;\n    switch (params.step) {\n      case import_core2.ClientSideRowModelSteps.EVERYTHING:\n        this.doRowGrouping(\n          params.rowNodeTransactions,\n          params.rowNodeOrder,\n          changedPath,\n          !!params.afterColumnsChanged\n        );\n      case import_core2.ClientSideRowModelSteps.FILTER:\n        this.doFilter(changedPath);\n      case import_core2.ClientSideRowModelSteps.PIVOT:\n        this.doPivot(changedPath);\n      case import_core2.ClientSideRowModelSteps.AGGREGATE:\n        this.doAggregate(changedPath);\n      case import_core2.ClientSideRowModelSteps.FILTER_AGGREGATES:\n        this.doFilterAggregates(changedPath);\n      case import_core2.ClientSideRowModelSteps.SORT:\n        this.doSort(params.rowNodeTransactions, changedPath);\n      case import_core2.ClientSideRowModelSteps.MAP:\n        this.doRowsToDisplay();\n    }\n    const displayedNodesMapped = this.setRowTopAndRowIndex();\n    this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\n    this.isRefreshingModel = false;\n    const event = {\n      type: \"modelUpdated\",\n      animate: params.animate,\n      keepRenderedRows: params.keepRenderedRows,\n      newData: params.newData,\n      newPage: false,\n      keepUndoRedoStack: params.keepUndoRedoStack\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  isEmpty() {\n    const rowsMissing = (0, import_core2._missing)(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n    return (0, import_core2._missing)(this.rootNode) || rowsMissing || !this.columnModel.isReady();\n  }\n  isRowsToRender() {\n    return (0, import_core2._exists)(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n  }\n  getNodesInRangeForSelection(firstInRange, lastInRange) {\n    let started = false;\n    let finished = false;\n    const result = [];\n    const groupsSelectChildren = this.gos.get(\"groupSelectsChildren\");\n    this.forEachNodeAfterFilterAndSort((rowNode) => {\n      if (finished) {\n        return;\n      }\n      if (started) {\n        if (rowNode === lastInRange || rowNode === firstInRange) {\n          finished = true;\n          if (rowNode.group && groupsSelectChildren) {\n            result.push(...rowNode.allLeafChildren);\n            return;\n          }\n        }\n      }\n      if (!started) {\n        if (rowNode !== lastInRange && rowNode !== firstInRange) {\n          return;\n        }\n        started = true;\n      }\n      const includeThisNode = !rowNode.group || !groupsSelectChildren;\n      if (includeThisNode) {\n        result.push(rowNode);\n        return;\n      }\n    });\n    return result;\n  }\n  // eslint-disable-next-line\n  setDatasource(datasource) {\n    (0, import_core2._errorOnce)(\"should never call setDatasource on clientSideRowController\");\n  }\n  getTopLevelNodes() {\n    return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n  }\n  getRootNode() {\n    return this.rootNode;\n  }\n  getRow(index) {\n    return this.rowsToDisplay[index];\n  }\n  isRowPresent(rowNode) {\n    return this.rowsToDisplay.indexOf(rowNode) >= 0;\n  }\n  getRowIndexAtPixel(pixelToMatch) {\n    if (this.isEmpty() || this.rowsToDisplay.length === 0) {\n      return -1;\n    }\n    let bottomPointer = 0;\n    let topPointer = this.rowsToDisplay.length - 1;\n    if (pixelToMatch <= 0) {\n      return 0;\n    }\n    const lastNode = (0, import_core2._last)(this.rowsToDisplay);\n    if (lastNode.rowTop <= pixelToMatch) {\n      return this.rowsToDisplay.length - 1;\n    }\n    let oldBottomPointer = -1;\n    let oldTopPointer = -1;\n    while (true) {\n      const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n      const currentRowNode = this.rowsToDisplay[midPointer];\n      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n        return midPointer;\n      }\n      if (currentRowNode.rowTop < pixelToMatch) {\n        bottomPointer = midPointer + 1;\n      } else if (currentRowNode.rowTop > pixelToMatch) {\n        topPointer = midPointer - 1;\n      }\n      const caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;\n      if (caughtInInfiniteLoop) {\n        return midPointer;\n      }\n      oldBottomPointer = bottomPointer;\n      oldTopPointer = topPointer;\n    }\n  }\n  isRowInPixel(rowNode, pixelToMatch) {\n    const topPixel = rowNode.rowTop;\n    const bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n    const pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n    return pixelInRow;\n  }\n  forEachLeafNode(callback) {\n    if (this.rootNode.allLeafChildren) {\n      this.rootNode.allLeafChildren.forEach((rowNode, index) => callback(rowNode, index));\n    }\n  }\n  forEachNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterGroup || []],\n      callback,\n      recursionType: 0 /* Normal */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilter(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterAggFilter || []],\n      callback,\n      recursionType: 1 /* AfterFilter */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilterAndSort(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterSort || []],\n      callback,\n      recursionType: 2 /* AfterFilterAndSort */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachPivotNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [this.rootNode],\n      callback,\n      recursionType: 3 /* PivotNodes */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  // iterates through each item in memory, and calls the callback function\n  // nodes - the rowNodes to traverse\n  // callback - the user provided callback\n  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n  // index - works similar to the index in forEach in javascript's array function\n  recursivelyWalkNodesAndCallback(params) {\n    const { nodes, callback, recursionType, includeFooterNodes } = params;\n    let { index } = params;\n    const addFooters = (position) => {\n      const parentNode = nodes[0]?.parent;\n      if (!parentNode)\n        return;\n      const grandTotal = includeFooterNodes && this.gos.getGrandTotalRow();\n      const isGroupIncludeFooter = this.gos.getGroupTotalRowCallback();\n      const groupTotal = includeFooterNodes && isGroupIncludeFooter({ node: parentNode });\n      const isRootNode = parentNode === this.rootNode;\n      if (isRootNode) {\n        if (grandTotal === position) {\n          parentNode.createFooter();\n          callback(parentNode.sibling, index++);\n        }\n        return;\n      }\n      if (groupTotal === position) {\n        parentNode.createFooter();\n        callback(parentNode.sibling, index++);\n      }\n    };\n    addFooters(\"top\");\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      callback(node, index++);\n      if (node.hasChildren() && !node.footer) {\n        let nodeChildren = null;\n        switch (recursionType) {\n          case 0 /* Normal */:\n            nodeChildren = node.childrenAfterGroup;\n            break;\n          case 1 /* AfterFilter */:\n            nodeChildren = node.childrenAfterAggFilter;\n            break;\n          case 2 /* AfterFilterAndSort */:\n            nodeChildren = node.childrenAfterSort;\n            break;\n          case 3 /* PivotNodes */:\n            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n            break;\n        }\n        if (nodeChildren) {\n          index = this.recursivelyWalkNodesAndCallback({\n            nodes: [...nodeChildren],\n            callback,\n            recursionType,\n            index,\n            includeFooterNodes\n          });\n        }\n      }\n    }\n    addFooters(\"bottom\");\n    return index;\n  }\n  // it's possible to recompute the aggregate without doing the other parts\n  // + api.refreshClientSideRowModel('aggregate')\n  doAggregate(changedPath) {\n    this.aggregationStage?.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doFilterAggregates(changedPath) {\n    if (this.filterAggregatesStage) {\n      this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });\n    } else {\n      this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;\n    }\n  }\n  // + gridApi.expandAll()\n  // + gridApi.collapseAll()\n  expandOrCollapseAll(expand) {\n    const usingTreeData = this.gos.get(\"treeData\");\n    const usingPivotMode = this.columnModel.isPivotActive();\n    const recursiveExpandOrCollapse = (rowNodes) => {\n      if (!rowNodes) {\n        return;\n      }\n      rowNodes.forEach((rowNode) => {\n        const actionRow = () => {\n          rowNode.expanded = expand;\n          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n        };\n        if (usingTreeData) {\n          const hasChildren = (0, import_core2._exists)(rowNode.childrenAfterGroup);\n          if (hasChildren) {\n            actionRow();\n          }\n          return;\n        }\n        if (usingPivotMode) {\n          const notLeafGroup = !rowNode.leafGroup;\n          if (notLeafGroup) {\n            actionRow();\n          }\n          return;\n        }\n        const isRowGroup = rowNode.group;\n        if (isRowGroup) {\n          actionRow();\n        }\n      });\n    };\n    if (this.rootNode) {\n      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n    }\n    this.refreshModel({ step: import_core2.ClientSideRowModelSteps.MAP });\n    const eventSource = expand ? \"expandAll\" : \"collapseAll\";\n    const event = {\n      type: \"expandOrCollapseAll\",\n      source: eventSource\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  doSort(rowNodeTransactions, changedPath) {\n    this.sortStage.execute({\n      rowNode: this.rootNode,\n      rowNodeTransactions,\n      changedPath\n    });\n  }\n  doRowGrouping(rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n    if (this.groupStage) {\n      if (rowNodeTransactions) {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          rowNodeTransactions,\n          rowNodeOrder,\n          changedPath\n        });\n      } else {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          changedPath,\n          afterColumnsChanged\n        });\n      }\n      if (this.gos.get(\"groupSelectsChildren\")) {\n        const selectionChanged = this.selectionService.updateGroupsFromChildrenSelections(\n          \"rowGroupChanged\",\n          changedPath\n        );\n        if (selectionChanged) {\n          const event = {\n            type: \"selectionChanged\",\n            source: \"rowGroupChanged\"\n          };\n          this.eventService.dispatchEvent(event);\n        }\n      }\n    } else {\n      this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n      if (this.rootNode.sibling) {\n        this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;\n      }\n      this.rootNode.updateHasChildren();\n    }\n    if (this.nodeManager.isRowCountReady()) {\n      this.rowCountReady = true;\n      this.eventService.dispatchEventOnce({\n        type: \"rowCountReady\"\n      });\n    }\n  }\n  doFilter(changedPath) {\n    this.filterStage.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doPivot(changedPath) {\n    this.pivotStage?.execute({ rowNode: this.rootNode, changedPath });\n  }\n  getCopyOfNodesMap() {\n    return this.nodeManager.getCopyOfNodesMap();\n  }\n  getRowNode(id) {\n    const idIsGroup = typeof id == \"string\" && id.indexOf(import_core2.RowNode.ID_PREFIX_ROW_GROUP) == 0;\n    if (idIsGroup) {\n      let res = void 0;\n      this.forEachNode((node) => {\n        if (node.id === id) {\n          res = node;\n        }\n      });\n      return res;\n    }\n    return this.nodeManager.getRowNode(id);\n  }\n  // rows: the rows to put into the model\n  setRowData(rowData) {\n    this.selectionService.reset(\"rowDataChanged\");\n    this.nodeManager.setRowData(rowData);\n    if (this.hasStarted) {\n      this.dispatchUpdateEventsAndRefresh();\n    }\n  }\n  dispatchUpdateEventsAndRefresh() {\n    const rowDataUpdatedEvent = {\n      type: \"rowDataUpdated\"\n    };\n    this.eventService.dispatchEvent(rowDataUpdatedEvent);\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      newData: true\n    });\n  }\n  batchUpdateRowData(rowDataTransaction, callback) {\n    if (this.applyAsyncTransactionsTimeout == null) {\n      this.rowDataTransactionBatch = [];\n      const waitMillis = this.gos.getAsyncTransactionWaitMillis();\n      this.applyAsyncTransactionsTimeout = window.setTimeout(() => {\n        this.executeBatchUpdateRowData();\n      }, waitMillis);\n    }\n    this.rowDataTransactionBatch.push({ rowDataTransaction, callback });\n  }\n  flushAsyncTransactions() {\n    if (this.applyAsyncTransactionsTimeout != null) {\n      clearTimeout(this.applyAsyncTransactionsTimeout);\n      this.executeBatchUpdateRowData();\n    }\n  }\n  executeBatchUpdateRowData() {\n    this.valueCache.onDataChanged();\n    const callbackFuncsBound = [];\n    const rowNodeTrans = [];\n    let forceRowNodeOrder = false;\n    if (this.rowDataTransactionBatch) {\n      this.rowDataTransactionBatch.forEach((tranItem) => {\n        const rowNodeTran = this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);\n        rowNodeTrans.push(rowNodeTran);\n        if (tranItem.callback) {\n          callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n        }\n        if (typeof tranItem.rowDataTransaction.addIndex === \"number\") {\n          forceRowNodeOrder = true;\n        }\n      });\n    }\n    this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);\n    if (callbackFuncsBound.length > 0) {\n      window.setTimeout(() => {\n        callbackFuncsBound.forEach((func) => func());\n      }, 0);\n    }\n    if (rowNodeTrans.length > 0) {\n      const event = {\n        type: \"asyncTransactionsFlushed\",\n        results: rowNodeTrans\n      };\n      this.eventService.dispatchEvent(event);\n    }\n    this.rowDataTransactionBatch = null;\n    this.applyAsyncTransactionsTimeout = void 0;\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.valueCache.onDataChanged();\n    const rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n    const forceRowNodeOrder = typeof rowDataTran.addIndex === \"number\";\n    this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);\n    return rowNodeTran;\n  }\n  createRowNodeOrder() {\n    const suppressSortOrder = this.gos.get(\"suppressMaintainUnsortedOrder\");\n    if (suppressSortOrder) {\n      return;\n    }\n    const orderMap = {};\n    if (this.rootNode && this.rootNode.allLeafChildren) {\n      for (let index = 0; index < this.rootNode.allLeafChildren.length; index++) {\n        const node = this.rootNode.allLeafChildren[index];\n        orderMap[node.id] = index;\n      }\n    }\n    return orderMap;\n  }\n  // common to updateRowData and batchUpdateRowData\n  commonUpdateRowData(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {\n    if (!this.hasStarted) {\n      return;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    if (forceRowNodeOrder) {\n      rowNodeOrder = this.createRowNodeOrder();\n    }\n    const event = {\n      type: \"rowDataUpdated\"\n    };\n    this.eventService.dispatchEvent(event);\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.EVERYTHING,\n      rowNodeTransactions: rowNodeTrans,\n      rowNodeOrder,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n  }\n  doRowsToDisplay() {\n    this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n  }\n  onRowHeightChanged() {\n    this.refreshModel({\n      step: import_core2.ClientSideRowModelSteps.MAP,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      keepUndoRedoStack: true\n    });\n  }\n  /** This method is debounced. It is used for row auto-height. If we don't debounce,\n   * then the Row Models will end up recalculating each row position\n   * for each row height change and result in the Row Renderer laying out rows.\n   * This is particularly bad if using print layout, and showing eg 1,000 rows,\n   * each row will change it's height, causing Row Model to update 1,000 times.\n   */\n  onRowHeightChangedDebounced() {\n    this.onRowHeightChanged_debounced();\n  }\n  resetRowHeights() {\n    const atLeastOne = this.resetRowHeightsForAllRowNodes();\n    this.rootNode.setRowHeight(this.rootNode.rowHeight, true);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);\n    }\n    if (atLeastOne) {\n      this.onRowHeightChanged();\n    }\n  }\n  resetRowHeightsForAllRowNodes() {\n    let atLeastOne = false;\n    this.forEachNode((rowNode) => {\n      rowNode.setRowHeight(rowNode.rowHeight, true);\n      const detailNode = rowNode.detailNode;\n      if (detailNode) {\n        detailNode.setRowHeight(detailNode.rowHeight, true);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);\n      }\n      atLeastOne = true;\n    });\n    return atLeastOne;\n  }\n  onGridStylesChanges(e) {\n    if (e.rowHeightChanged) {\n      if (this.columnModel.isAutoRowHeightActive()) {\n        return;\n      }\n      this.resetRowHeights();\n    }\n  }\n  onGridReady() {\n    if (this.hasStarted) {\n      return;\n    }\n    this.setInitialData();\n  }\n  isRowDataLoaded() {\n    return this.rowCountReady;\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModelApi.ts\nvar import_core3 = require(\"@ag-grid-community/core\");\nfunction onGroupExpandedOrCollapsed(beans) {\n  beans.expansionService.onGroupExpandedOrCollapsed();\n}\nfunction refreshClientSideRowModel(beans, step) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.refreshModel(step);\n}\nfunction forEachLeafNode(beans, callback) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.forEachLeafNode(callback);\n}\nfunction forEachNodeAfterFilter(beans, callback) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.forEachNodeAfterFilter(callback);\n}\nfunction forEachNodeAfterFilterAndSort(beans, callback) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.forEachNodeAfterFilterAndSort(callback);\n}\nfunction resetRowHeights(beans) {\n  if (beans.columnModel.isAutoRowHeightActive()) {\n    (0, import_core3._warnOnce)(\"calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.\");\n    return;\n  }\n  beans.rowModelHelperService?.getClientSideRowModel()?.resetRowHeights();\n}\nfunction applyTransaction(beans, rowDataTransaction) {\n  return beans.frameworkOverrides.wrapIncoming(\n    () => beans.rowModelHelperService?.getClientSideRowModel()?.updateRowData(rowDataTransaction)\n  );\n}\nfunction applyTransactionAsync(beans, rowDataTransaction, callback) {\n  beans.frameworkOverrides.wrapIncoming(\n    () => beans.rowModelHelperService?.getClientSideRowModel()?.batchUpdateRowData(rowDataTransaction, callback)\n  );\n}\nfunction flushAsyncTransactions(beans) {\n  beans.frameworkOverrides.wrapIncoming(\n    () => beans.rowModelHelperService?.getClientSideRowModel()?.flushAsyncTransactions()\n  );\n}\nfunction getBestCostNodeSelection(beans) {\n  return beans.selectionService.getBestCostNodeSelection();\n}\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterStage.ts\nvar import_core4 = require(\"@ag-grid-community/core\");\nvar FilterStage = class extends import_core4.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"filterStage\";\n  }\n  wireBeans(beans) {\n    this.filterManager = beans.filterManager;\n  }\n  execute(params) {\n    const { changedPath } = params;\n    this.filter(changedPath);\n  }\n  filter(changedPath) {\n    const filterActive = !!this.filterManager?.isChildFilterPresent();\n    this.filterNodes(filterActive, changedPath);\n  }\n  filterNodes(filterActive, changedPath) {\n    const filterCallback = (rowNode, includeChildNodes) => {\n      if (rowNode.hasChildren()) {\n        if (filterActive && !includeChildNodes) {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter((childNode) => {\n            const passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n            const passBecauseDataPasses = childNode.data && this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            return passBecauseChildren || passBecauseDataPasses;\n          });\n        } else {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        }\n      } else {\n        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n      }\n    };\n    if (this.doingTreeDataFiltering()) {\n      const treeDataDepthFirstFilter = (rowNode, alreadyFoundInParent) => {\n        if (rowNode.childrenAfterGroup) {\n          for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            const childNode = rowNode.childrenAfterGroup[i];\n            const foundInParent = alreadyFoundInParent || this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            if (childNode.childrenAfterGroup) {\n              treeDataDepthFirstFilter(rowNode.childrenAfterGroup[i], foundInParent);\n            } else {\n              filterCallback(childNode, foundInParent);\n            }\n          }\n        }\n        filterCallback(rowNode, alreadyFoundInParent);\n      };\n      const treeDataFilterCallback = (rowNode) => treeDataDepthFirstFilter(rowNode, false);\n      changedPath.executeFromRootNode(treeDataFilterCallback);\n    } else {\n      const defaultFilterCallback = (rowNode) => filterCallback(rowNode, false);\n      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n    }\n  }\n  doingTreeDataFiltering() {\n    return this.gos.get(\"treeData\") && !this.gos.get(\"excludeChildrenWhenTreeDataFiltering\");\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/flattenStage.ts\nvar import_core5 = require(\"@ag-grid-community/core\");\nvar FlattenStage = class extends import_core5.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"flattenStage\";\n  }\n  wireBeans(beans) {\n    this.beans = beans;\n    this.columnModel = beans.columnModel;\n  }\n  execute(params) {\n    const rootNode = params.rowNode;\n    const result = [];\n    const skipLeafNodes = this.columnModel.isPivotMode();\n    const showRootNode = skipLeafNodes && rootNode.leafGroup;\n    const topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n    const details = this.getFlattenDetails();\n    this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);\n    const atLeastOneRowPresent = result.length > 0;\n    const includeGrandTotalRow = !showRootNode && // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)\n    atLeastOneRowPresent && details.grandTotalRow;\n    if (includeGrandTotalRow) {\n      rootNode.createFooter();\n      const addToTop = details.grandTotalRow === \"top\";\n      this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0, addToTop);\n    }\n    return result;\n  }\n  getFlattenDetails() {\n    const groupRemoveSingleChildren = this.gos.get(\"groupRemoveSingleChildren\");\n    const groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gos.get(\"groupRemoveLowestSingleChildren\");\n    return {\n      groupRemoveLowestSingleChildren,\n      groupRemoveSingleChildren,\n      isGroupMultiAutoColumn: this.gos.isGroupMultiAutoColumn(),\n      hideOpenParents: this.gos.get(\"groupHideOpenParents\"),\n      grandTotalRow: this.gos.getGrandTotalRow(),\n      groupTotalRow: this.gos.getGroupTotalRowCallback()\n    };\n  }\n  recursivelyAddToRowsToDisplay(details, rowsToFlatten, result, skipLeafNodes, uiLevel) {\n    if ((0, import_core5._missingOrEmpty)(rowsToFlatten)) {\n      return;\n    }\n    for (let i = 0; i < rowsToFlatten.length; i++) {\n      const rowNode = rowsToFlatten[i];\n      const isParent = rowNode.hasChildren();\n      const isSkippedLeafNode = skipLeafNodes && !isParent;\n      const isRemovedSingleChildrenGroup = details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;\n      const isRemovedLowestSingleChildrenGroup = details.groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;\n      const neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n      const isHiddenOpenParent = details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;\n      const thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n      if (thisRowShouldBeRendered) {\n        this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);\n      }\n      if (skipLeafNodes && rowNode.leafGroup) {\n        continue;\n      }\n      if (isParent) {\n        const excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n        if (rowNode.expanded || excludedParent) {\n          const doesRowShowFooter = details.groupTotalRow({ node: rowNode });\n          if (!doesRowShowFooter) {\n            rowNode.destroyFooter();\n          }\n          const uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n          if (doesRowShowFooter === \"top\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n          this.recursivelyAddToRowsToDisplay(\n            details,\n            rowNode.childrenAfterSort,\n            result,\n            skipLeafNodes,\n            uiLevelForChildren\n          );\n          if (doesRowShowFooter === \"bottom\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n        }\n      } else if (rowNode.master && rowNode.expanded) {\n        const detailNode = this.createDetailNode(rowNode);\n        this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);\n      }\n    }\n  }\n  // duplicated method, it's also in floatingRowModel\n  addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel, addToTop) {\n    if (addToTop) {\n      result.unshift(rowNode);\n    } else {\n      result.push(rowNode);\n    }\n    rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);\n  }\n  createDetailNode(masterNode) {\n    if ((0, import_core5._exists)(masterNode.detailNode)) {\n      return masterNode.detailNode;\n    }\n    const detailNode = new import_core5.RowNode(this.beans);\n    detailNode.detail = true;\n    detailNode.selectable = false;\n    detailNode.parent = masterNode;\n    if ((0, import_core5._exists)(masterNode.id)) {\n      detailNode.id = \"detail_\" + masterNode.id;\n    }\n    detailNode.data = masterNode.data;\n    detailNode.level = masterNode.level + 1;\n    masterNode.detailNode = detailNode;\n    return detailNode;\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/immutableService.ts\nvar import_core6 = require(\"@ag-grid-community/core\");\nvar ImmutableService = class extends import_core6.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"immutableService\";\n  }\n  wireBeans(beans) {\n    this.rowModel = beans.rowModel;\n    this.selectionService = beans.selectionService;\n  }\n  postConstruct() {\n    if (this.rowModel.getType() === \"clientSide\") {\n      this.clientSideRowModel = this.rowModel;\n      this.addManagedPropertyListener(\"rowData\", () => this.onRowDataUpdated());\n    }\n  }\n  isActive() {\n    const getRowIdProvided = this.gos.exists(\"getRowId\");\n    const resetRowDataOnUpdate = this.gos.get(\"resetRowDataOnUpdate\");\n    if (resetRowDataOnUpdate) {\n      return false;\n    }\n    return getRowIdProvided;\n  }\n  setRowData(rowData) {\n    const transactionAndMap = this.createTransactionForRowData(rowData);\n    if (!transactionAndMap) {\n      return;\n    }\n    const [transaction, orderIdMap] = transactionAndMap;\n    this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n  }\n  // converts the setRowData() command to a transaction\n  createTransactionForRowData(rowData) {\n    if ((0, import_core6._missing)(this.clientSideRowModel)) {\n      (0, import_core6._errorOnce)(\"ImmutableService only works with ClientSideRowModel\");\n      return;\n    }\n    const getRowIdFunc = this.gos.getRowIdCallback();\n    if (getRowIdFunc == null) {\n      (0, import_core6._errorOnce)(\"ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!\");\n      return;\n    }\n    const transaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n    const suppressSortOrder = this.gos.get(\"suppressMaintainUnsortedOrder\");\n    const orderMap = suppressSortOrder ? void 0 : {};\n    if ((0, import_core6._exists)(rowData)) {\n      rowData.forEach((data, index) => {\n        const id = getRowIdFunc({ data, level: 0 });\n        const existingNode = existingNodesMap[id];\n        if (orderMap) {\n          orderMap[id] = index;\n        }\n        if (existingNode) {\n          const dataHasChanged = existingNode.data !== data;\n          if (dataHasChanged) {\n            transaction.update.push(data);\n          }\n          existingNodesMap[id] = void 0;\n        } else {\n          transaction.add.push(data);\n        }\n      });\n    }\n    (0, import_core6._iterateObject)(existingNodesMap, (id, rowNode) => {\n      if (rowNode) {\n        transaction.remove.push(rowNode.data);\n      }\n    });\n    return [transaction, orderMap];\n  }\n  onRowDataUpdated() {\n    const rowData = this.gos.get(\"rowData\");\n    if (!rowData) {\n      return;\n    }\n    if (this.isActive()) {\n      this.setRowData(rowData);\n    } else {\n      this.selectionService.reset(\"rowDataChanged\");\n      this.clientSideRowModel.setRowData(rowData);\n    }\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortService.ts\nvar import_core7 = require(\"@ag-grid-community/core\");\nvar SortService = class extends import_core7.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"sortService\";\n  }\n  wireBeans(beans) {\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n    this.rowNodeSorter = beans.rowNodeSorter;\n    this.showRowGroupColsService = beans.showRowGroupColsService;\n  }\n  sort(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {\n    const groupMaintainOrder = this.gos.get(\"groupMaintainOrder\");\n    const groupColumnsPresent = this.columnModel.getCols().some((c) => c.isRowGroupActive());\n    let allDirtyNodes = {};\n    if (useDeltaSort && rowNodeTransactions) {\n      allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);\n    }\n    const isPivotMode = this.columnModel.isPivotMode();\n    const postSortFunc = this.gos.getCallback(\"postSortRows\");\n    const callback = (rowNode) => {\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\n      const skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;\n      const skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\n      if (skipSortingGroups) {\n        const nextGroup = this.funcColsService.getRowGroupColumns()?.[rowNode.level + 1];\n        const wasSortExplicitlyRemoved = nextGroup?.getSort() === null;\n        const childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);\n        if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {\n          const indexedOrders = {};\n          rowNode.childrenAfterSort.forEach((node, idx) => {\n            indexedOrders[node.id] = idx;\n          });\n          childrenToBeSorted.sort(\n            (row1, row2) => (indexedOrders[row1.id] ?? 0) - (indexedOrders[row2.id] ?? 0)\n          );\n        }\n        rowNode.childrenAfterSort = childrenToBeSorted;\n      } else if (!sortActive || skipSortingPivotLeafs) {\n        rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter.slice(0);\n      } else if (useDeltaSort) {\n        rowNode.childrenAfterSort = this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);\n      } else {\n        rowNode.childrenAfterSort = this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\n      }\n      this.updateChildIndexes(rowNode);\n      if (postSortFunc) {\n        const params = { nodes: rowNode.childrenAfterSort };\n        postSortFunc(params);\n      }\n    };\n    if (changedPath) {\n      changedPath.forEachChangedNodeDepthFirst(callback);\n    }\n    this.updateGroupDataForHideOpenParents(changedPath);\n  }\n  calculateDirtyNodes(rowNodeTransactions) {\n    const dirtyNodes = {};\n    const addNodesFunc = (rowNodes) => {\n      if (rowNodes) {\n        rowNodes.forEach((rowNode) => dirtyNodes[rowNode.id] = true);\n      }\n    };\n    if (rowNodeTransactions) {\n      rowNodeTransactions.forEach((tran) => {\n        addNodesFunc(tran.add);\n        addNodesFunc(tran.update);\n        addNodesFunc(tran.remove);\n      });\n    }\n    return dirtyNodes;\n  }\n  doDeltaSort(rowNode, allTouchedNodes, changedPath, sortOptions) {\n    const unsortedRows = rowNode.childrenAfterAggFilter;\n    const oldSortedRows = rowNode.childrenAfterSort;\n    if (!oldSortedRows) {\n      return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);\n    }\n    const untouchedRowsMap = {};\n    const touchedRows = [];\n    unsortedRows.forEach((row) => {\n      if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {\n        touchedRows.push(row);\n      } else {\n        untouchedRowsMap[row.id] = true;\n      }\n    });\n    const sortedUntouchedRows = oldSortedRows.filter((child) => untouchedRowsMap[child.id]);\n    const mapNodeToSortedNode = (rowNode2, pos) => ({\n      currentPos: pos,\n      rowNode: rowNode2\n    });\n    const sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort((a, b) => this.rowNodeSorter.compareRowNodes(sortOptions, a, b));\n    return this.mergeSortedArrays(sortOptions, sortedChangedRows, sortedUntouchedRows.map(mapNodeToSortedNode)).map(\n      ({ rowNode: rowNode2 }) => rowNode2\n    );\n  }\n  // Merge two sorted arrays into each other\n  mergeSortedArrays(sortOptions, arr1, arr2) {\n    const res = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n      const compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n      if (compareResult < 0) {\n        res.push(arr1[i++]);\n      } else {\n        res.push(arr2[j++]);\n      }\n    }\n    while (i < arr1.length) {\n      res.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n      res.push(arr2[j++]);\n    }\n    return res;\n  }\n  updateChildIndexes(rowNode) {\n    if ((0, import_core7._missing)(rowNode.childrenAfterSort)) {\n      return;\n    }\n    const listToSort = rowNode.childrenAfterSort;\n    for (let i = 0; i < listToSort.length; i++) {\n      const child = listToSort[i];\n      const firstChild = i === 0;\n      const lastChild = i === rowNode.childrenAfterSort.length - 1;\n      child.setFirstChild(firstChild);\n      child.setLastChild(lastChild);\n      child.setChildIndex(i);\n    }\n  }\n  updateGroupDataForHideOpenParents(changedPath) {\n    if (!this.gos.get(\"groupHideOpenParents\")) {\n      return;\n    }\n    if (this.gos.get(\"treeData\")) {\n      (0, import_core7._warnOnce)(\n        `The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them.`\n      );\n      return false;\n    }\n    const callback = (rowNode) => {\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n      rowNode.childrenAfterSort.forEach((child) => {\n        if (child.hasChildren()) {\n          callback(child);\n        }\n      });\n    };\n    if (changedPath) {\n      changedPath.executeFromRootNode((rowNode) => callback(rowNode));\n    }\n  }\n  pullDownGroupDataForHideOpenParents(rowNodes, clearOperation) {\n    if (!this.gos.get(\"groupHideOpenParents\") || (0, import_core7._missing)(rowNodes)) {\n      return;\n    }\n    rowNodes.forEach((childRowNode) => {\n      const groupDisplayCols = this.showRowGroupColsService?.getShowRowGroupCols() ?? [];\n      groupDisplayCols.forEach((groupDisplayCol) => {\n        const showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n        if (typeof showRowGroup !== \"string\") {\n          (0, import_core7._errorOnce)(\n            \"groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup\"\n          );\n          return;\n        }\n        const displayingGroupKey = showRowGroup;\n        const rowGroupColumn = this.columnModel.getColDefCol(displayingGroupKey);\n        const thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n        if (thisRowNodeMatches) {\n          return;\n        }\n        if (clearOperation) {\n          childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);\n        } else {\n          const parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n          if (parentToStealFrom) {\n            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n          }\n        }\n      });\n    });\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortStage.ts\nvar import_core8 = require(\"@ag-grid-community/core\");\nvar SortStage = class extends import_core8.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"sortStage\";\n  }\n  wireBeans(beans) {\n    this.sortService = beans.sortService;\n    this.sortController = beans.sortController;\n  }\n  execute(params) {\n    const sortOptions = this.sortController.getSortOptions();\n    const sortActive = (0, import_core8._exists)(sortOptions) && sortOptions.length > 0;\n    const deltaSort = sortActive && (0, import_core8._exists)(params.rowNodeTransactions) && // in time we can remove this check, so that delta sort is always\n    // on if transactions are present. it's off for now so that we can\n    // selectively turn it on and test it with some select users before\n    // rolling out to everyone.\n    this.gos.get(\"deltaSort\");\n    const sortContainsGroupColumns = sortOptions.some((opt) => {\n      const isSortingCoupled = this.gos.isColumnsSortingCoupledToGroup();\n      if (isSortingCoupled) {\n        return opt.column.isPrimary() && opt.column.isRowGroupActive();\n      }\n      return !!opt.column.getColDef().showRowGroup;\n    });\n    this.sortService.sort(\n      sortOptions,\n      sortActive,\n      deltaSort,\n      params.rowNodeTransactions,\n      params.changedPath,\n      sortContainsGroupColumns\n    );\n  }\n};\n\n// community-modules/client-side-row-model/src/version.ts\nvar VERSION = \"32.0.0\";\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nvar ClientSideRowModelCoreModule = {\n  version: VERSION,\n  moduleName: `${import_core9.ModuleNames.ClientSideRowModelModule}-core`,\n  rowModel: \"clientSide\",\n  beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, ImmutableService]\n};\nvar ClientSideRowModelApiModule = {\n  version: VERSION,\n  moduleName: `${import_core9.ModuleNames.ClientSideRowModelModule}-api`,\n  beans: [import_core9.RowModelHelperService],\n  apiFunctions: {\n    onGroupExpandedOrCollapsed,\n    refreshClientSideRowModel,\n    forEachLeafNode,\n    forEachNodeAfterFilter,\n    forEachNodeAfterFilterAndSort,\n    resetRowHeights,\n    applyTransaction,\n    applyTransactionAsync,\n    flushAsyncTransactions,\n    getBestCostNodeSelection\n  },\n  dependantModules: [ClientSideRowModelCoreModule, import_core9._CsrmSsrmSharedApiModule]\n};\nvar ClientSideRowModelModule = {\n  version: VERSION,\n  moduleName: import_core9.ModuleNames.ClientSideRowModelModule,\n  dependantModules: [ClientSideRowModelCoreModule, ClientSideRowModelApiModule]\n};\n"],
  "mappings": "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",
  "names": ["target", "all", "name", "to", "from", "except", "desc", "key", "mod", "rootNode", "gos", "eventService", "funcColsService", "selectionService", "beans", "id", "rowData", "sibling", "dataItem", "rowDataTran", "rowNodeOrder", "rowNodeTransaction", "nodesToUnselect", "event", "source", "selectionChanged", "add", "addIndex", "newNodes", "item", "allLeafChildren", "len", "normalisedAddIndex", "i", "nodesBeforeIndex", "nodesAfterIndex", "remove", "rowIdsRemoved", "rowNode", "update", "data", "getRowIdFunc", "node", "parent", "level", "setExpanded", "isRowMasterFunc", "rowGroupColumns", "numRowGroupColumns", "masterRowLevel", "expandByDefault", "refreshEverythingFunc", "animate", "refreshEverythingAfterColsChangedFunc", "resetProps", "groupStageRefreshProps", "filterStageRefreshProps", "pivotStageRefreshProps", "aggregateStageRefreshProps", "sortStageRefreshProps", "filterAggStageRefreshProps", "flattenStageRefreshProps", "allProps", "params", "properties", "arePropertiesImpacted", "propSet", "prop", "child", "startPixel", "endPixel", "startLimitIndex", "endLimitIndex", "atLeastOneChange", "res", "rowAtStartPixel", "rowAtEndPixel", "firstRow", "lastRow", "rowIndex", "rowHeight", "defaultRowHeight", "nextRowTop", "displayedRowsMapped", "allowEstimate", "changedPath", "changedPathActive", "clearIfNotDisplayed", "recurse", "isRootNode", "rowNodes", "pixel", "increment", "indexAtPixelNow", "rowNodeAtPixelNow", "idx", "highlight", "index", "rowTop", "totalFooterInc", "filteredChildren", "topLevelIndex", "adjustedIndex", "step", "col", "rowNodeTransactions", "noTransactions", "transWithAddsOrDeletes", "tx", "paramsStep", "stepsMapped", "paramsOrStep", "displayedNodesMapped", "rowsMissing", "firstInRange", "lastInRange", "started", "finished", "result", "groupsSelectChildren", "datasource", "pixelToMatch", "bottomPointer", "topPointer", "oldBottomPointer", "oldTopPointer", "midPointer", "currentRowNode", "topPixel", "bottomPixel", "callback", "includeFooterNodes", "nodes", "recursionType", "addFooters", "position", "parentNode", "grandTotal", "isGroupIncludeFooter", "groupTotal", "nodeChildren", "expand", "usingTreeData", "usingPivotMode", "recursiveExpandOrCollapse", "actionRow", "afterColumnsChanged", "rowDataUpdatedEvent", "rowDataTransaction", "waitMillis", "callbackFuncsBound", "rowNodeTrans", "forceRowNodeOrder", "tranItem", "rowNodeTran", "func", "orderMap", "atLeastOne", "detailNode", "filterActive", "filterCallback", "includeChildNodes", "childNode", "passBecauseChildren", "passBecauseDataPasses", "treeDataDepthFirstFilter", "alreadyFoundInParent", "foundInParent", "treeDataFilterCallback", "defaultFilterCallback", "skipLeafNodes", "showRootNode", "topList", "details", "atLeastOneRowPresent", "addToTop", "groupRemoveSingleChildren", "rowsToFlatten", "uiLevel", "isParent", "isSkippedLeafNode", "isRemovedSingleChildrenGroup", "isRemovedLowestSingleChildrenGroup", "neverAllowToExpand", "isHiddenOpenParent", "excludedParent", "doesRowShowFooter", "uiLevelForChildren", "masterNode", "getRowIdProvided", "transactionAndMap", "transaction", "orderIdMap", "existingNodesMap", "existingNode", "sortOptions", "sortActive", "useDeltaSort", "sortContainsGroupColumns", "groupMaintainOrder", "groupColumnsPresent", "allDirtyNodes", "isPivotMode", "postSortFunc", "skipSortingPivotLeafs", "wasSortExplicitlyRemoved", "childrenToBeSorted", "indexedOrders", "row1", "row2", "dirtyNodes", "addNodesFunc", "tran", "allTouchedNodes", "unsortedRows", "oldSortedRows", "untouchedRowsMap", "touchedRows", "row", "sortedUntouchedRows", "mapNodeToSortedNode", "rowNode2", "pos", "sortedChangedRows", "a", "b", "arr1", "arr2", "j", "listToSort", "firstChild", "lastChild", "clearOperation", "childRowNode", "groupDisplayCol", "showRowGroup", "displayingGroupKey", "rowGroupColumn", "parentToStealFrom", "deltaSort", "opt"]
}
