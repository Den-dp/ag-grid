---
title: "Row Grouping - Single Column"
enterprise: true
---
Display the Group Structure with a single generated column in the grid.

{% gridExampleRunner title="Enabling Single Group Column" name="enabling-single-group-column"  exampleHeight=540 /%}

## Enabling a Single Group Column

The example above demonstrates that both `country` and `year` are grouped. Only a single group column is used to
display the group value cells.

The Single Group Column is enabled by default, but it can be set explicitly by setting the `groupDisplayType` grid option
to `"singleColumn"` as shown below:

```{% frameworkTransform=true %}
const gridOptions = {
    groupDisplayType: 'singleColumn',
}
```

## Configuring the Column

The Single Group Column is added to the grid when row grouping is present, and can be configured via the `autoGroupColumnDef` grid
option.

{% gridExampleRunner title="Single Group Column Configuration" name="single-group-column-configuration"  exampleHeight=515 /%}

The example above uses the configuration demonstrated below to change the columns header name and apply a minimum width.
It also [Configures the Group Cell Component](./group-cell-renderer/) using the `cellRendererParams` option to add checkboxes and remove
the count from each row group.

```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        headerName: 'My Group',
        minWidth: 220,
        cellRendererParams: {
            suppressCount: true,
            checkbox: true,
        }
    },
}
```

## Group Cell Renderer
The column uses the `agGroupCellRenderer` component to display the group information, as well as the chevron control
for expanding and collapsing rows.

This can be configured with several [Group Renderer Properties](./grouping-single-group-column/#configurable-properties-reference) using
the `autoGroupColumnDef` property `cellRendererParams`. The example below removes the row count and enables checkboxes for row selection.

{% gridExampleRunner title="Group Cell Renderer Configuration" name="renderer-config-group-cell" /%}

This demonstrates the following configuration:
```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        cellRendererParams: {
            suppressCount: true,
            checkbox: true,
        }
    },
}
```

### Configurable Options

{% interfaceDocumentation interfaceName="IGroupCellRendererParams" overrideSrc="group-cell-renderer/group-cell-renderer.json" config={ "description": "" } /%}

### Inner Renderer

When using the group cell renderer, the `agGroupCellRenderer` component will inherit the grouped columns renderer and display this inside of the group cell,
adjacent to any configured checkboxes, cell count, and the expand/collapse chevron control.

This inner renderer can be overridden with a [Custom Cell Component](./component-cell-renderer/) by setting the `innerRenderer` and `innerRendererParams` properties
on the `cellRendererParams` configuration.

{% gridExampleRunner title="Group Cell Renderer Configuration" name="renderer-config-inner" /%}

The example above uses the following configuration to provide a custom inner renderer to the group column:
```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        cellRendererParams: {
            innerRenderer: InnerRenderer,
            innerRendererParams: {foo: 'bar'},
        }
    },
}
```

### Custom Cell Renderer

The Group Cell Renderer can be entirely replaced with a [Custom Cell Component](./component-cell-renderer/) by setting the `cellRenderer` property on the `autoGroupColumnDef`
configuration.

{% gridExampleRunner title="Custom Group Cell Renderer" name="renderer-config-custom" /%}

{% note %}
It is also possible to [Dynamically Select Cell Renderers](./component-cell-renderer/#dynamic-component-selection).
{% /note %}

## Hiding Parents of Individual Rows

Groups with only a single child can be hidden from the grid by setting the `groupRemoveSingleChildren` grid option to `true`. To only remove
groups with a single leaf child, instead set `groupRemoveLowestSingleChildren` to `true`.

{% gridExampleRunner title="Removing Single Children" name="remove-single-children"  exampleHeight=540 /%}

The grid can be configured to hide all parents of a single row by using the following configuration:
```{% frameworkTransform=true %}
const gridOptions = {
    groupRemoveSingleChildren: true,
}
```

Only the lowest level groups of single rows will be hidden by using `groupRemoveLowestSingleChildren`:
```{% frameworkTransform=true %}
const gridOptions = {
    groupRemoveLowestSingleChildren: true,
}
```

{% note %}
Filtering does not impact what groups get removed, only groups containing a single child before filtering is applied are removed.
{% /note %}

{% note %}
The properties `groupRemoveSingleChildren`, `groupRemoveLowestSingleChildren` and `groupHideOpenParents` are mutually exclusive.
{% /note %}

## Next Up

Continue to the next section to learn about the [Multiple Group Columns](./grouping-multiple-group-columns/) display type.
