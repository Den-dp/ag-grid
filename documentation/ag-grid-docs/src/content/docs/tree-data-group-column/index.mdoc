---
title: "Tree Data - Group Column"
enterprise: true
---
Customise the generated group column when using Tree Data.

## Group Column Configuration

When using Tree Data, the grid will automatically generate a group column to display the hierarchy.
This column can be configured by using the `autoGroupColumnDef` grid option, allowing any [Column Property](./column-definitions/)
to be overridden.

{% gridExampleRunner title="Group Column Configuration" name="group-column" /%}

The example above sets different header text, a minimum width, and adds checkboxes to each cell the following configuration:

```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        headerName: 'My Group',
        minWidth: 220,
        cellRendererParams: {
            checkbox: true,
        }
    },
}
```

## Group Cell Component

The grid uses the `agGroupCellRenderer` component to render the group column cells.

### Child Row Counts

When showing child counts with Tree Data, the child count is a count of all descendants, including groups.

{% gridExampleRunner title="Child Counts" name="child-counts" /%}

### Default Component Options

The options configurable on the `agGroupCellRenderer` via the column definition `cellRendererParams` are:

{% interfaceDocumentation interfaceName="IGroupCellRendererParams" overrideSrc="group-cell-renderer/group-cell-renderer.json" /%}

### Custom Component

Where the default `agGroupCellRenderer` does not meet your requirements, you can provide a custom cell renderer component, via
the `cellRenderer` property in the `autoGroupColumnDef` grid option.

The above example provides a custom cell renderer which:
* Uses a custom icon to represent the groups expanded state
* Responds to row expanded to update if the group is expanded or collapsed from another source
* Cleans up all event listeners when it's destroyed

{% gridExampleRunner title="Custom Component" name="custom-component" /%}

### Dynamic Component Selection

