import{ModuleNames as d}from"@ag-grid-community/core";import{EnterpriseCoreModule as u}from"@ag-grid-enterprise/core";var c="32.0.0";import{BeanStub as R,RowNode as l,_iterateObject as f,_missing as g,_warnOnce as p}from"@ag-grid-community/core";var N=class extends R{constructor(){super(...arguments),this.beanName="rowModel",this.firstRow=-1,this.lastRow=-1,this.rowCount=-1,this.rowNodesByIndex={}}wireBeans(t){this.rowRenderer=t.rowRenderer,this.focusService=t.focusService,this.beans=t}ensureRowHeightsValid(t,e,o,s){return!1}postConstruct(){this.rowHeight=this.gos.getRowHeightAsNumber(),this.addManagedEventListeners({viewportChanged:this.onViewportChanged.bind(this)}),this.addManagedPropertyListener("viewportDatasource",()=>this.updateDatasource()),this.addManagedPropertyListener("rowHeight",()=>{this.rowHeight=this.gos.getRowHeightAsNumber(),this.updateRowHeights()})}start(){this.updateDatasource()}isLastRowIndexKnown(){return!0}destroy(){this.destroyDatasource(),super.destroy()}destroyDatasource(){this.viewportDatasource&&(this.viewportDatasource.destroy&&this.viewportDatasource.destroy(),this.rowRenderer.datasourceChanged(),this.firstRow=-1,this.lastRow=-1)}updateDatasource(){const t=this.gos.get("viewportDatasource");t&&this.setViewportDatasource(t)}getViewportRowModelPageSize(){return this.gos.get("viewportRowModelPageSize")}getViewportRowModelBufferSize(){return this.gos.get("viewportRowModelBufferSize")}calculateFirstRow(t){const e=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),s=t-e;return s<0?0:Math.floor(s/o)*o}calculateLastRow(t){if(t===-1)return t;const e=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),s=t+e,i=Math.ceil(s/o)*o,r=this.rowCount-1;return Math.min(i,r)}onViewportChanged(t){const e=this.calculateFirstRow(t.firstRow),o=this.calculateLastRow(t.lastRow);(this.firstRow!==e||this.lastRow!==o)&&(this.firstRow=e,this.lastRow=o,this.purgeRowsNotInViewport(),this.viewportDatasource&&this.viewportDatasource.setViewportRange(this.firstRow,this.lastRow))}purgeRowsNotInViewport(){Object.keys(this.rowNodesByIndex).forEach(t=>{const e=parseInt(t,10);if(e<this.firstRow||e>this.lastRow){if(this.isRowFocused(e))return;delete this.rowNodesByIndex[e]}})}isRowFocused(t){const e=this.focusService.getFocusCellToUseAfterRefresh();return!e||e.rowPinned!=null?!1:e.rowIndex===t}setViewportDatasource(t){this.destroyDatasource(),this.viewportDatasource=t,this.rowCount=-1,t.init?t.init({setRowCount:this.setRowCount.bind(this),setRowData:this.setRowData.bind(this),getRow:this.getRow.bind(this)}):p("viewport is missing init method.")}getType(){return"viewport"}getRow(t){return this.rowNodesByIndex[t]||(this.rowNodesByIndex[t]=this.createBlankRowNode(t)),this.rowNodesByIndex[t]}getRowNode(t){let e;return this.forEachNode(o=>{o.id===t&&(e=o)}),e}getRowCount(){return this.rowCount===-1?0:this.rowCount}getRowIndexAtPixel(t){return this.rowHeight!==0?Math.floor(t/this.rowHeight):0}getRowBounds(t){return{rowHeight:this.rowHeight,rowTop:this.rowHeight*t}}updateRowHeights(){this.forEachNode(e=>{e.setRowHeight(this.rowHeight),e.setRowTop(this.rowHeight*e.rowIndex)});const t={type:"modelUpdated",newData:!1,newPage:!1,keepRenderedRows:!0,animate:!1};this.eventService.dispatchEvent(t)}getTopLevelRowCount(){return this.getRowCount()}getTopLevelRowDisplayedIndex(t){return t}isEmpty(){return this.rowCount>0}isRowsToRender(){return this.rowCount>0}getNodesInRangeForSelection(t,e){const o=t.rowIndex,s=e.rowIndex,i=o<this.firstRow||o>this.lastRow,r=s<this.firstRow||s>this.lastRow;if(i||r)return[];const a=[],w=o<=s?o:s,h=o<=s?s:o;for(let n=w;n<=h;n++)a.push(this.rowNodesByIndex[n]);return a}forEachNode(t){let e=0;Object.keys(this.rowNodesByIndex).forEach(o=>{const s=parseInt(o,10),i=this.rowNodesByIndex[s];t(i,e),e++})}setRowData(t){f(t,(e,o)=>{const s=parseInt(e,10);if(s>=this.firstRow&&s<=this.lastRow){let i=this.rowNodesByIndex[s];g(i)&&(i=this.createBlankRowNode(s),this.rowNodesByIndex[s]=i),i.setDataAndId(o,s.toString())}})}createBlankRowNode(t){const e=new l(this.beans);return e.setRowHeight(this.rowHeight),e.setRowTop(this.rowHeight*t),e.setRowIndex(t),e}setRowCount(t,e=!1){if(t===this.rowCount)return;this.rowCount=t,this.eventService.dispatchEventOnce({type:"rowCountReady"});const o={type:"modelUpdated",newData:!1,newPage:!1,keepRenderedRows:e,animate:!1};this.eventService.dispatchEvent(o)}isRowPresent(t){return!!this.getRowNode(t.id)}},v={version:c,moduleName:d.ViewportRowModelModule,rowModel:"viewport",beans:[N],dependantModules:[u]};export{v as ViewportRowModelModule};
