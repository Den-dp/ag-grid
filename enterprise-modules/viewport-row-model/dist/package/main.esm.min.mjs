var l=Object.defineProperty,p=Object.getOwnPropertyDescriptor,w=(t,e,o,s)=>{for(var r=s>1?void 0:s?p(e,o):e,n=t.length-1,a;n>=0;n--)(a=t[n])&&(r=(s?a(e,o,r):a(r))||r);return s&&r&&l(e,o,r),r};import{ModuleNames as g}from"@ag-grid-community/core";import{EnterpriseCoreModule as N}from"@ag-grid-enterprise/core";var v="31.3.2";import{_ as u,Autowired as c,Bean as y,BeanStub as D,Events as h,PostConstruct as x,PreDestroy as I,RowNode as E}from"@ag-grid-community/core";var i=class extends D{constructor(){super(...arguments),this.firstRow=-1,this.lastRow=-1,this.rowCount=-1,this.rowNodesByIndex={}}ensureRowHeightsValid(t,e,o,s){return!1}init(){this.rowHeight=this.gos.getRowHeightAsNumber(),this.addManagedListener(this.eventService,h.EVENT_VIEWPORT_CHANGED,this.onViewportChanged.bind(this)),this.addManagedPropertyListener("viewportDatasource",()=>this.updateDatasource()),this.addManagedPropertyListener("rowHeight",()=>{this.rowHeight=this.gos.getRowHeightAsNumber(),this.updateRowHeights()})}start(){this.updateDatasource()}isLastRowIndexKnown(){return!0}destroyDatasource(){this.viewportDatasource&&(this.viewportDatasource.destroy&&this.viewportDatasource.destroy(),this.rowRenderer.datasourceChanged(),this.firstRow=-1,this.lastRow=-1)}updateDatasource(){const t=this.gos.get("viewportDatasource");t&&this.setViewportDatasource(t)}getViewportRowModelPageSize(){return this.gos.get("viewportRowModelPageSize")}getViewportRowModelBufferSize(){return this.gos.get("viewportRowModelBufferSize")}calculateFirstRow(t){const e=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),s=t-e;return s<0?0:Math.floor(s/o)*o}calculateLastRow(t){if(t===-1)return t;const e=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),s=t+e,r=Math.ceil(s/o)*o,n=this.rowCount-1;return Math.min(r,n)}onViewportChanged(t){const e=this.calculateFirstRow(t.firstRow),o=this.calculateLastRow(t.lastRow);(this.firstRow!==e||this.lastRow!==o)&&(this.firstRow=e,this.lastRow=o,this.purgeRowsNotInViewport(),this.viewportDatasource&&this.viewportDatasource.setViewportRange(this.firstRow,this.lastRow))}purgeRowsNotInViewport(){Object.keys(this.rowNodesByIndex).forEach(t=>{const e=parseInt(t,10);if(e<this.firstRow||e>this.lastRow){if(this.isRowFocused(e))return;delete this.rowNodesByIndex[e]}})}isRowFocused(t){const e=this.focusService.getFocusCellToUseAfterRefresh();return!e||e.rowPinned!=null?!1:e.rowIndex===t}setViewportDatasource(t){this.destroyDatasource(),this.viewportDatasource=t,this.rowCount=-1,t.init?t.init({setRowCount:this.setRowCount.bind(this),setRowData:this.setRowData.bind(this),getRow:this.getRow.bind(this)}):console.warn("AG Grid: viewport is missing init method.")}getType(){return"viewport"}getRow(t){return this.rowNodesByIndex[t]||(this.rowNodesByIndex[t]=this.createBlankRowNode(t)),this.rowNodesByIndex[t]}getRowNode(t){let e;return this.forEachNode(o=>{o.id===t&&(e=o)}),e}getRowCount(){return this.rowCount===-1?0:this.rowCount}getRowIndexAtPixel(t){return this.rowHeight!==0?Math.floor(t/this.rowHeight):0}getRowBounds(t){return{rowHeight:this.rowHeight,rowTop:this.rowHeight*t}}updateRowHeights(){this.forEachNode(e=>{e.setRowHeight(this.rowHeight),e.setRowTop(this.rowHeight*e.rowIndex)});const t={type:h.EVENT_MODEL_UPDATED,newData:!1,newPage:!1,keepRenderedRows:!0,animate:!1};this.eventService.dispatchEvent(t)}getTopLevelRowCount(){return this.getRowCount()}getTopLevelRowDisplayedIndex(t){return t}isEmpty(){return this.rowCount>0}isRowsToRender(){return this.rowCount>0}getNodesInRangeForSelection(t,e){const o=u.missing(t)?0:t.rowIndex,s=e.rowIndex,r=o<this.firstRow||o>this.lastRow,n=s<this.firstRow||s>this.lastRow;if(r||n)return[];const a=[],R=o<=s?o:s,f=o<=s?s:o;for(let d=R;d<=f;d++)a.push(this.rowNodesByIndex[d]);return a}forEachNode(t){let e=0;Object.keys(this.rowNodesByIndex).forEach(o=>{const s=parseInt(o,10),r=this.rowNodesByIndex[s];t(r,e),e++})}setRowData(t){u.iterateObject(t,(e,o)=>{const s=parseInt(e,10);if(s>=this.firstRow&&s<=this.lastRow){let r=this.rowNodesByIndex[s];u.missing(r)&&(r=this.createBlankRowNode(s),this.rowNodesByIndex[s]=r),r.setDataAndId(o,s.toString())}})}createBlankRowNode(t){const e=new E(this.beans);return e.setRowHeight(this.rowHeight),e.setRowTop(this.rowHeight*t),e.setRowIndex(t),e}setRowCount(t,e=!1){if(t===this.rowCount)return;this.rowCount=t,this.eventService.dispatchEventOnce({type:h.EVENT_ROW_COUNT_READY});const o={type:h.EVENT_MODEL_UPDATED,newData:!1,newPage:!1,keepRenderedRows:e,animate:!1};this.eventService.dispatchEvent(o)}isRowPresent(t){return!!this.getRowNode(t.id)}};w([c("rowRenderer")],i.prototype,"rowRenderer",2),w([c("focusService")],i.prototype,"focusService",2),w([c("beans")],i.prototype,"beans",2),w([x],i.prototype,"init",1),w([I],i.prototype,"destroyDatasource",1),i=w([y("rowModel")],i);var M={version:v,moduleName:g.ViewportRowModelModule,rowModel:"viewport",beans:[i],dependantModules:[N]};export{M as ViewportRowModelModule};
