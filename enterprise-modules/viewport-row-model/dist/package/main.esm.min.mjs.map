{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["// enterprise-modules/viewport-row-model/src/viewportRowModelModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/viewport-row-model/src/version.ts\nvar VERSION = \"32.0.0\";\n\n// enterprise-modules/viewport-row-model/src/viewportRowModel/viewportRowModel.ts\nimport { BeanStub, RowNode, _iterateObject, _missing, _warnOnce } from \"@ag-grid-community/core\";\nvar ViewportRowModel = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"rowModel\";\n    // rowRenderer tells us these\n    this.firstRow = -1;\n    this.lastRow = -1;\n    // datasource tells us this\n    this.rowCount = -1;\n    this.rowNodesByIndex = {};\n  }\n  wireBeans(beans) {\n    this.rowRenderer = beans.rowRenderer;\n    this.focusService = beans.focusService;\n    this.beans = beans;\n  }\n  // we don't implement as lazy row heights is not supported in this row model\n  ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    return false;\n  }\n  postConstruct() {\n    this.rowHeight = this.gos.getRowHeightAsNumber();\n    this.addManagedEventListeners({ viewportChanged: this.onViewportChanged.bind(this) });\n    this.addManagedPropertyListener(\"viewportDatasource\", () => this.updateDatasource());\n    this.addManagedPropertyListener(\"rowHeight\", () => {\n      this.rowHeight = this.gos.getRowHeightAsNumber();\n      this.updateRowHeights();\n    });\n  }\n  start() {\n    this.updateDatasource();\n  }\n  isLastRowIndexKnown() {\n    return true;\n  }\n  destroy() {\n    this.destroyDatasource();\n    super.destroy();\n  }\n  destroyDatasource() {\n    if (!this.viewportDatasource) {\n      return;\n    }\n    if (this.viewportDatasource.destroy) {\n      this.viewportDatasource.destroy();\n    }\n    this.rowRenderer.datasourceChanged();\n    this.firstRow = -1;\n    this.lastRow = -1;\n  }\n  updateDatasource() {\n    const datasource = this.gos.get(\"viewportDatasource\");\n    if (datasource) {\n      this.setViewportDatasource(datasource);\n    }\n  }\n  getViewportRowModelPageSize() {\n    return this.gos.get(\"viewportRowModelPageSize\");\n  }\n  getViewportRowModelBufferSize() {\n    return this.gos.get(\"viewportRowModelBufferSize\");\n  }\n  calculateFirstRow(firstRenderedRow) {\n    const bufferSize = this.getViewportRowModelBufferSize();\n    const pageSize = this.getViewportRowModelPageSize();\n    const afterBuffer = firstRenderedRow - bufferSize;\n    if (afterBuffer < 0) {\n      return 0;\n    }\n    return Math.floor(afterBuffer / pageSize) * pageSize;\n  }\n  calculateLastRow(lastRenderedRow) {\n    if (lastRenderedRow === -1) {\n      return lastRenderedRow;\n    }\n    const bufferSize = this.getViewportRowModelBufferSize();\n    const pageSize = this.getViewportRowModelPageSize();\n    const afterBuffer = lastRenderedRow + bufferSize;\n    const result = Math.ceil(afterBuffer / pageSize) * pageSize;\n    const lastRowIndex = this.rowCount - 1;\n    return Math.min(result, lastRowIndex);\n  }\n  onViewportChanged(event) {\n    const newFirst = this.calculateFirstRow(event.firstRow);\n    const newLast = this.calculateLastRow(event.lastRow);\n    if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n      this.firstRow = newFirst;\n      this.lastRow = newLast;\n      this.purgeRowsNotInViewport();\n      if (this.viewportDatasource) {\n        this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n      }\n    }\n  }\n  purgeRowsNotInViewport() {\n    Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n      const index = parseInt(indexStr, 10);\n      if (index < this.firstRow || index > this.lastRow) {\n        if (this.isRowFocused(index)) {\n          return;\n        }\n        delete this.rowNodesByIndex[index];\n      }\n    });\n  }\n  isRowFocused(rowIndex) {\n    const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n    if (!focusedCell) {\n      return false;\n    }\n    if (focusedCell.rowPinned != null) {\n      return false;\n    }\n    const hasFocus = focusedCell.rowIndex === rowIndex;\n    return hasFocus;\n  }\n  setViewportDatasource(viewportDatasource) {\n    this.destroyDatasource();\n    this.viewportDatasource = viewportDatasource;\n    this.rowCount = -1;\n    if (!viewportDatasource.init) {\n      _warnOnce(\"viewport is missing init method.\");\n    } else {\n      viewportDatasource.init({\n        setRowCount: this.setRowCount.bind(this),\n        setRowData: this.setRowData.bind(this),\n        getRow: this.getRow.bind(this)\n      });\n    }\n  }\n  getType() {\n    return \"viewport\";\n  }\n  getRow(rowIndex) {\n    if (!this.rowNodesByIndex[rowIndex]) {\n      this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n    }\n    return this.rowNodesByIndex[rowIndex];\n  }\n  getRowNode(id) {\n    let result;\n    this.forEachNode((rowNode) => {\n      if (rowNode.id === id) {\n        result = rowNode;\n      }\n    });\n    return result;\n  }\n  getRowCount() {\n    return this.rowCount === -1 ? 0 : this.rowCount;\n  }\n  getRowIndexAtPixel(pixel) {\n    if (this.rowHeight !== 0) {\n      return Math.floor(pixel / this.rowHeight);\n    }\n    return 0;\n  }\n  getRowBounds(index) {\n    return {\n      rowHeight: this.rowHeight,\n      rowTop: this.rowHeight * index\n    };\n  }\n  updateRowHeights() {\n    this.forEachNode((node) => {\n      node.setRowHeight(this.rowHeight);\n      node.setRowTop(this.rowHeight * node.rowIndex);\n    });\n    const event = {\n      type: \"modelUpdated\",\n      newData: false,\n      newPage: false,\n      keepRenderedRows: true,\n      animate: false\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  getTopLevelRowCount() {\n    return this.getRowCount();\n  }\n  getTopLevelRowDisplayedIndex(topLevelIndex) {\n    return topLevelIndex;\n  }\n  isEmpty() {\n    return this.rowCount > 0;\n  }\n  isRowsToRender() {\n    return this.rowCount > 0;\n  }\n  getNodesInRangeForSelection(firstInRange, lastInRange) {\n    const firstIndex = firstInRange.rowIndex;\n    const lastIndex = lastInRange.rowIndex;\n    const firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n    const lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n    if (firstNodeOutOfRange || lastNodeOutOfRange) {\n      return [];\n    }\n    const result = [];\n    const startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n    const endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n    for (let i = startIndex; i <= endIndex; i++) {\n      result.push(this.rowNodesByIndex[i]);\n    }\n    return result;\n  }\n  forEachNode(callback) {\n    let callbackCount = 0;\n    Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n      const index = parseInt(indexStr, 10);\n      const rowNode = this.rowNodesByIndex[index];\n      callback(rowNode, callbackCount);\n      callbackCount++;\n    });\n  }\n  setRowData(rowData) {\n    _iterateObject(rowData, (indexStr, dataItem) => {\n      const index = parseInt(indexStr, 10);\n      if (index >= this.firstRow && index <= this.lastRow) {\n        let rowNode = this.rowNodesByIndex[index];\n        if (_missing(rowNode)) {\n          rowNode = this.createBlankRowNode(index);\n          this.rowNodesByIndex[index] = rowNode;\n        }\n        rowNode.setDataAndId(dataItem, index.toString());\n      }\n    });\n  }\n  createBlankRowNode(rowIndex) {\n    const rowNode = new RowNode(this.beans);\n    rowNode.setRowHeight(this.rowHeight);\n    rowNode.setRowTop(this.rowHeight * rowIndex);\n    rowNode.setRowIndex(rowIndex);\n    return rowNode;\n  }\n  setRowCount(rowCount, keepRenderedRows = false) {\n    if (rowCount === this.rowCount) {\n      return;\n    }\n    this.rowCount = rowCount;\n    this.eventService.dispatchEventOnce({\n      type: \"rowCountReady\"\n    });\n    const event = {\n      type: \"modelUpdated\",\n      newData: false,\n      newPage: false,\n      keepRenderedRows,\n      animate: false\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  isRowPresent(rowNode) {\n    const foundRowNode = this.getRowNode(rowNode.id);\n    return !!foundRowNode;\n  }\n};\n\n// enterprise-modules/viewport-row-model/src/viewportRowModelModule.ts\nvar ViewportRowModelModule = {\n  version: VERSION,\n  moduleName: ModuleNames.ViewportRowModelModule,\n  rowModel: \"viewport\",\n  beans: [ViewportRowModel],\n  dependantModules: [EnterpriseCoreModule]\n};\nexport {\n  ViewportRowModelModule\n};\n"],
  "mappings": "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",
  "names": ["ModuleNames", "EnterpriseCoreModule", "VERSION", "BeanStub", "RowNode", "_iterateObject", "_missing", "_warnOnce", "ViewportRowModel", "beans", "startPixel", "endPixel", "startLimitIndex", "endLimitIndex", "datasource", "firstRenderedRow", "bufferSize", "pageSize", "afterBuffer", "lastRenderedRow", "result", "lastRowIndex", "event", "newFirst", "newLast", "indexStr", "index", "rowIndex", "focusedCell", "viewportDatasource", "id", "rowNode", "pixel", "node", "topLevelIndex", "firstInRange", "lastInRange", "firstIndex", "lastIndex", "firstNodeOutOfRange", "lastNodeOutOfRange", "startIndex", "endIndex", "i", "callback", "callbackCount", "rowData", "dataItem", "rowCount", "keepRenderedRows", "ViewportRowModelModule"]
}
