{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// enterprise-modules/viewport-row-model/src/viewportRowModelModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/viewport-row-model/src/version.ts\nvar VERSION = \"31.3.2\";\n\n// enterprise-modules/viewport-row-model/src/viewportRowModel/viewportRowModel.ts\nimport {\n  _,\n  Autowired,\n  Bean,\n  BeanStub,\n  Events,\n  PostConstruct,\n  PreDestroy,\n  RowNode\n} from \"@ag-grid-community/core\";\nvar ViewportRowModel = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    // rowRenderer tells us these\n    this.firstRow = -1;\n    this.lastRow = -1;\n    // datasource tells us this\n    this.rowCount = -1;\n    this.rowNodesByIndex = {};\n  }\n  // we don't implement as lazy row heights is not supported in this row model\n  ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    return false;\n  }\n  init() {\n    this.rowHeight = this.gos.getRowHeightAsNumber();\n    this.addManagedListener(this.eventService, Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));\n    this.addManagedPropertyListener(\"viewportDatasource\", () => this.updateDatasource());\n    this.addManagedPropertyListener(\"rowHeight\", () => {\n      this.rowHeight = this.gos.getRowHeightAsNumber();\n      this.updateRowHeights();\n    });\n  }\n  start() {\n    this.updateDatasource();\n  }\n  isLastRowIndexKnown() {\n    return true;\n  }\n  destroyDatasource() {\n    if (!this.viewportDatasource) {\n      return;\n    }\n    if (this.viewportDatasource.destroy) {\n      this.viewportDatasource.destroy();\n    }\n    this.rowRenderer.datasourceChanged();\n    this.firstRow = -1;\n    this.lastRow = -1;\n  }\n  updateDatasource() {\n    const datasource = this.gos.get(\"viewportDatasource\");\n    if (datasource) {\n      this.setViewportDatasource(datasource);\n    }\n  }\n  getViewportRowModelPageSize() {\n    return this.gos.get(\"viewportRowModelPageSize\");\n  }\n  getViewportRowModelBufferSize() {\n    return this.gos.get(\"viewportRowModelBufferSize\");\n  }\n  calculateFirstRow(firstRenderedRow) {\n    const bufferSize = this.getViewportRowModelBufferSize();\n    const pageSize = this.getViewportRowModelPageSize();\n    const afterBuffer = firstRenderedRow - bufferSize;\n    if (afterBuffer < 0) {\n      return 0;\n    }\n    return Math.floor(afterBuffer / pageSize) * pageSize;\n  }\n  calculateLastRow(lastRenderedRow) {\n    if (lastRenderedRow === -1) {\n      return lastRenderedRow;\n    }\n    const bufferSize = this.getViewportRowModelBufferSize();\n    const pageSize = this.getViewportRowModelPageSize();\n    const afterBuffer = lastRenderedRow + bufferSize;\n    const result = Math.ceil(afterBuffer / pageSize) * pageSize;\n    const lastRowIndex = this.rowCount - 1;\n    return Math.min(result, lastRowIndex);\n  }\n  onViewportChanged(event) {\n    const newFirst = this.calculateFirstRow(event.firstRow);\n    const newLast = this.calculateLastRow(event.lastRow);\n    if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n      this.firstRow = newFirst;\n      this.lastRow = newLast;\n      this.purgeRowsNotInViewport();\n      if (this.viewportDatasource) {\n        this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n      }\n    }\n  }\n  purgeRowsNotInViewport() {\n    Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n      const index = parseInt(indexStr, 10);\n      if (index < this.firstRow || index > this.lastRow) {\n        if (this.isRowFocused(index)) {\n          return;\n        }\n        delete this.rowNodesByIndex[index];\n      }\n    });\n  }\n  isRowFocused(rowIndex) {\n    const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n    if (!focusedCell) {\n      return false;\n    }\n    if (focusedCell.rowPinned != null) {\n      return false;\n    }\n    const hasFocus = focusedCell.rowIndex === rowIndex;\n    return hasFocus;\n  }\n  setViewportDatasource(viewportDatasource) {\n    this.destroyDatasource();\n    this.viewportDatasource = viewportDatasource;\n    this.rowCount = -1;\n    if (!viewportDatasource.init) {\n      console.warn(\"AG Grid: viewport is missing init method.\");\n    } else {\n      viewportDatasource.init({\n        setRowCount: this.setRowCount.bind(this),\n        setRowData: this.setRowData.bind(this),\n        getRow: this.getRow.bind(this)\n      });\n    }\n  }\n  getType() {\n    return \"viewport\";\n  }\n  getRow(rowIndex) {\n    if (!this.rowNodesByIndex[rowIndex]) {\n      this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n    }\n    return this.rowNodesByIndex[rowIndex];\n  }\n  getRowNode(id) {\n    let result;\n    this.forEachNode((rowNode) => {\n      if (rowNode.id === id) {\n        result = rowNode;\n      }\n    });\n    return result;\n  }\n  getRowCount() {\n    return this.rowCount === -1 ? 0 : this.rowCount;\n  }\n  getRowIndexAtPixel(pixel) {\n    if (this.rowHeight !== 0) {\n      return Math.floor(pixel / this.rowHeight);\n    }\n    return 0;\n  }\n  getRowBounds(index) {\n    return {\n      rowHeight: this.rowHeight,\n      rowTop: this.rowHeight * index\n    };\n  }\n  updateRowHeights() {\n    this.forEachNode((node) => {\n      node.setRowHeight(this.rowHeight);\n      node.setRowTop(this.rowHeight * node.rowIndex);\n    });\n    const event = {\n      type: Events.EVENT_MODEL_UPDATED,\n      newData: false,\n      newPage: false,\n      keepRenderedRows: true,\n      animate: false\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  getTopLevelRowCount() {\n    return this.getRowCount();\n  }\n  getTopLevelRowDisplayedIndex(topLevelIndex) {\n    return topLevelIndex;\n  }\n  isEmpty() {\n    return this.rowCount > 0;\n  }\n  isRowsToRender() {\n    return this.rowCount > 0;\n  }\n  getNodesInRangeForSelection(firstInRange, lastInRange) {\n    const firstIndex = _.missing(firstInRange) ? 0 : firstInRange.rowIndex;\n    const lastIndex = lastInRange.rowIndex;\n    const firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n    const lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n    if (firstNodeOutOfRange || lastNodeOutOfRange) {\n      return [];\n    }\n    const result = [];\n    const startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n    const endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n    for (let i = startIndex; i <= endIndex; i++) {\n      result.push(this.rowNodesByIndex[i]);\n    }\n    return result;\n  }\n  forEachNode(callback) {\n    let callbackCount = 0;\n    Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n      const index = parseInt(indexStr, 10);\n      const rowNode = this.rowNodesByIndex[index];\n      callback(rowNode, callbackCount);\n      callbackCount++;\n    });\n  }\n  setRowData(rowData) {\n    _.iterateObject(rowData, (indexStr, dataItem) => {\n      const index = parseInt(indexStr, 10);\n      if (index >= this.firstRow && index <= this.lastRow) {\n        let rowNode = this.rowNodesByIndex[index];\n        if (_.missing(rowNode)) {\n          rowNode = this.createBlankRowNode(index);\n          this.rowNodesByIndex[index] = rowNode;\n        }\n        rowNode.setDataAndId(dataItem, index.toString());\n      }\n    });\n  }\n  createBlankRowNode(rowIndex) {\n    const rowNode = new RowNode(this.beans);\n    rowNode.setRowHeight(this.rowHeight);\n    rowNode.setRowTop(this.rowHeight * rowIndex);\n    rowNode.setRowIndex(rowIndex);\n    return rowNode;\n  }\n  setRowCount(rowCount, keepRenderedRows = false) {\n    if (rowCount === this.rowCount) {\n      return;\n    }\n    this.rowCount = rowCount;\n    this.eventService.dispatchEventOnce({\n      type: Events.EVENT_ROW_COUNT_READY\n    });\n    const event = {\n      type: Events.EVENT_MODEL_UPDATED,\n      newData: false,\n      newPage: false,\n      keepRenderedRows,\n      animate: false\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  isRowPresent(rowNode) {\n    const foundRowNode = this.getRowNode(rowNode.id);\n    return !!foundRowNode;\n  }\n};\n__decorateClass([\n  Autowired(\"rowRenderer\")\n], ViewportRowModel.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  Autowired(\"focusService\")\n], ViewportRowModel.prototype, \"focusService\", 2);\n__decorateClass([\n  Autowired(\"beans\")\n], ViewportRowModel.prototype, \"beans\", 2);\n__decorateClass([\n  PostConstruct\n], ViewportRowModel.prototype, \"init\", 1);\n__decorateClass([\n  PreDestroy\n], ViewportRowModel.prototype, \"destroyDatasource\", 1);\nViewportRowModel = __decorateClass([\n  Bean(\"rowModel\")\n], ViewportRowModel);\n\n// enterprise-modules/viewport-row-model/src/viewportRowModelModule.ts\nvar ViewportRowModelModule = {\n  version: VERSION,\n  moduleName: ModuleNames.ViewportRowModelModule,\n  rowModel: \"viewport\",\n  beans: [ViewportRowModel],\n  dependantModules: [\n    EnterpriseCoreModule\n  ]\n};\nexport {\n  ViewportRowModelModule\n};\n"],
  "mappings": "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",
  "names": ["__defProp", "__getOwnPropDesc", "__decorateClass", "decorators", "target", "key", "kind", "result", "i", "decorator", "ModuleNames", "EnterpriseCoreModule", "VERSION", "_", "Autowired", "Bean", "BeanStub", "Events", "PostConstruct", "PreDestroy", "RowNode", "ViewportRowModel", "startPixel", "endPixel", "startLimitIndex", "endLimitIndex", "datasource", "firstRenderedRow", "bufferSize", "pageSize", "afterBuffer", "lastRenderedRow", "lastRowIndex", "event", "newFirst", "newLast", "indexStr", "index", "rowIndex", "focusedCell", "viewportDatasource", "id", "rowNode", "pixel", "node", "topLevelIndex", "firstInRange", "lastInRange", "firstIndex", "lastIndex", "firstNodeOutOfRange", "lastNodeOutOfRange", "startIndex", "endIndex", "callback", "callbackCount", "rowData", "dataItem", "rowCount", "keepRenderedRows", "ViewportRowModelModule"]
}
