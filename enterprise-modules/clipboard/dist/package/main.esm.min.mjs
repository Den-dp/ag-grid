import{ModuleNames as b}from"@ag-grid-community/core";import{CsvExportModule as D}from"@ag-grid-community/csv-export";import{EnterpriseCoreModule as O}from"@ag-grid-enterprise/core";function k(g,e){g.clipboardService?.copyToClipboard(e)}function M(g,e){g.clipboardService?.cutToClipboard(e)}function G(g,e){g.clipboardService?.copySelectedRowsToClipboard(e)}function H(g,e){g.clipboardService?.copySelectedRangeToClipboard(e)}function L(g){g.clipboardService?.copyRangeDown()}function U(g){g.clipboardService?.pasteFromClipboard()}import{BeanStub as B,ChangedPath as $,_exists as _,_last as j,_removeFromArray as N,_warnOnce as S}from"@ag-grid-community/core";var m="paste",R="dragCopy",F="clipboard",T=g=>`AG Grid: Unable to use the Clipboard API (navigator.clipboard.${g}()). The reason why it could not be used has been logged in the previous line. For this reason the grid has defaulted to using a workaround which doesn't perform as well. Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.`,Y=class E extends B{constructor(){super(...arguments),this.beanName="clipboardService",this.lastPasteOperationTime=0,this.navigatorApiFailed=!1}wireBeans(e){this.csvCreator=e.csvCreator,this.selectionService=e.selectionService,this.rowModel=e.rowModel,this.ctrlsService=e.ctrlsService,this.valueService=e.valueService,this.focusService=e.focusService,this.rowRenderer=e.rowRenderer,this.visibleColsService=e.visibleColsService,this.funcColsService=e.funcColsService,this.cellNavigationService=e.cellNavigationService,this.cellPositionUtils=e.cellPositionUtils,this.rowPositionUtils=e.rowPositionUtils,this.rangeService=e.rangeService}postConstruct(){this.rowModel.getType()==="clientSide"&&(this.clientSideRowModel=this.rowModel),this.ctrlsService.whenReady(e=>{this.gridCtrl=e.gridCtrl})}pasteFromClipboard(){!this.gos.get("suppressClipboardApi")&&!this.navigatorApiFailed&&navigator.clipboard&&navigator.clipboard.readText?navigator.clipboard.readText().then(this.processClipboardData.bind(this)).catch(t=>{S(`${t}
${T("readText")}`),this.navigatorApiFailed=!0,this.pasteFromClipboardLegacy()}):this.pasteFromClipboardLegacy()}pasteFromClipboardLegacy(){let e=!1;const t=s=>{const o=new Date().getTime();o-this.lastPasteOperationTime<50&&(e=!0,s.preventDefault()),this.lastPasteOperationTime=o};this.executeOnTempElement(s=>{s.addEventListener("paste",t),s.focus({preventScroll:!0})},s=>{const o=s.value;e?this.refocusLastFocusedCell():this.processClipboardData(o),s.removeEventListener("paste",t)})}refocusLastFocusedCell(){const e=this.focusService.getFocusedCell();e&&this.focusService.setFocusedCell({rowIndex:e.rowIndex,column:e.column,rowPinned:e.rowPinned,forceBrowserFocus:!0})}getClipboardDelimiter(){const e=this.gos.get("clipboardDelimiter");return _(e)?e:"	"}processClipboardData(e){if(e==null)return;let t=E.stringToArray(e,this.getClipboardDelimiter());const s=this.gos.getCallback("processDataFromClipboard");if(s&&(t=s({data:t})),t==null)return;this.gos.get("suppressLastEmptyLineOnPaste")&&this.removeLastLineIfBlank(t);const o=(i,r,l,n)=>{this.rangeService?.isMoreThanOneCell()&&!this.hasOnlyOneValueToPaste(t)?this.pasteIntoActiveRange(this.rangeService,t,i,r,n):this.pasteStartingFromFocusedCell(t,i,r,l,n)};this.doPasteOperation(o)}static stringToArray(e,t=","){const s=[],o=r=>r==="\r"||r===`
`;let i=!1;if(e==="")return[[""]];for(let r=0,l=0,n=0;n<e.length;n++){const a=e[n-1],u=e[n],c=e[n+1],p=()=>{s[r]||(s[r]=[]),s[r][l]||(s[r][l]="")};if(p(),u==='"'&&(i?c==='"'?(s[r][l]+='"',n++):i=!1:(a===void 0||a===t||o(a))&&(i=!0)),!i&&u!=='"'){if(u===t){l++,p();continue}else if(o(u)){l=0,r++,p(),u==="\r"&&c===`
`&&n++;continue}}s[r][l]+=u}return s}doPasteOperation(e){const t="clipboard";this.eventService.dispatchEvent({type:"pasteStart",source:t});let s;if(this.clientSideRowModel){const a=this.gos.get("aggregateOnlyChangedColumns");s=new $(a,this.clientSideRowModel.getRootNode())}const o={},i=[],r=this.focusService.getFocusedCell();e(o,i,r,s);const l=[...i];s&&(this.clientSideRowModel.doAggregate(s),s.forEachChangedNodeDepthFirst(a=>{l.push(a)})),this.rowRenderer.refreshCells({rowNodes:l}),this.dispatchFlashCells(o),this.fireRowChanged(i),this.refocusLastFocusedCell();const n={type:"pasteEnd",source:t};this.eventService.dispatchEvent(n)}pasteIntoActiveRange(e,t,s,o,i){const r=this.getRangeSize(e)%t.length!=0;let l=0,n=0;const a=(u,c,p,d)=>{if(d-l>=t.length){if(r)return;l+=n,n=0}const C=t[d-l];o.push(c);const w=this.gos.getCallback("processCellFromClipboard");p.forEach((v,f)=>{if(!v.isCellEditable(c)||v.isSuppressPaste(c))return;f>=C.length&&(f=f%C.length);const V=this.processCell(c,v,C[f],R,w,!0);c.setDataValue(v,V,m),i&&i.addParentNode(c.parent,[v]);const{rowIndex:I,rowPinned:x}=u,A=this.cellPositionUtils.createIdFromValues({rowIndex:I,column:v,rowPinned:x});s[A]=!0}),n++};this.iterateActiveRanges(!1,a)}getDisplayedColumnsStartingAt(e){let t=e;const s=[];for(;t!=null;)s.push(t),t=this.visibleColsService.getColAfter(t);return s}pasteStartingFromFocusedCell(e,t,s,o,i){if(!o)return;const r={rowIndex:o.rowIndex,rowPinned:o.rowPinned},l=this.getDisplayedColumnsStartingAt(o.column);this.isPasteSingleValueIntoRange(e)?this.pasteSingleValueIntoRange(e,s,t,i):this.pasteMultipleValues(e,r,s,l,t,F,i)}isPasteSingleValueIntoRange(e){return this.hasOnlyOneValueToPaste(e)&&this.rangeService!=null&&!this.rangeService.isEmpty()}pasteSingleValueIntoRange(e,t,s,o){const i=e[0][0],r=(l,n,a)=>{t.push(n),a.forEach(u=>this.updateCellValue(n,u,i,s,F,o))};this.iterateActiveRanges(!1,r)}hasOnlyOneValueToPaste(e){return e.length===1&&e[0].length===1}copyRangeDown(){if(!this.rangeService||this.rangeService.isEmpty())return;const e=[],t=(s,o,i,r)=>{const l=this.gos.getCallback("processCellForClipboard"),n=this.gos.getCallback("processCellFromClipboard"),a=(u,c,p)=>{e.length?(o.push(c),p.forEach((d,h)=>{if(!d.isCellEditable(c)||d.isSuppressPaste(c))return;const C=this.processCell(c,d,e[h],R,n,!0);c.setDataValue(d,C,m),r&&r.addParentNode(c.parent,[d]);const{rowIndex:w,rowPinned:v}=u,f=this.cellPositionUtils.createIdFromValues({rowIndex:w,column:d,rowPinned:v});s[f]=!0})):p.forEach(d=>{const h=this.processCell(c,d,this.valueService.getValue(d,c),R,l,!1,!0);e.push(h)})};this.iterateActiveRanges(!0,a)};this.doPasteOperation(t)}removeLastLineIfBlank(e){const t=j(e);if(t&&t.length===1&&t[0]===""){if(e.length===1)return;N(e,t)}}fireRowChanged(e){this.gos.get("editType")==="fullRow"&&e.forEach(t=>{const s={type:"rowValueChanged",node:t,data:t.data,rowIndex:t.rowIndex,rowPinned:t.rowPinned};this.eventService.dispatchEvent(s)})}pasteMultipleValues(e,t,s,o,i,r,l){let n=t;const a=this.clientSideRowModel!=null&&!this.gos.get("enableGroupEdit")&&!this.gos.get("treeData"),u=()=>{for(;;){if(!n)return null;const c=this.rowPositionUtils.getRowNode(n);if(n=this.cellNavigationService.getRowBelow({rowPinned:n.rowPinned,rowIndex:n.rowIndex}),c==null)return null;if(!(c.detail||c.footer||a&&c.group))return c}};e.forEach(c=>{const p=u();p&&(c.forEach((d,h)=>this.updateCellValue(p,o[h],d,i,r,l)),s.push(p))})}updateCellValue(e,t,s,o,i,r){if(!e||!t||!t.isCellEditable(e)||t.isSuppressPaste(e)||e.group&&t.isValueActive())return;const l=this.processCell(e,t,s,i,this.gos.getCallback("processCellFromClipboard"),!0);e.setDataValue(t,l,m);const{rowIndex:n,rowPinned:a}=e,u=this.cellPositionUtils.createIdFromValues({rowIndex:n,column:t,rowPinned:a});o[u]=!0,r&&r.addParentNode(e.parent,[t])}copyToClipboard(e={}){this.copyOrCutToClipboard(e)}cutToClipboard(e={},t="api"){if(this.gos.get("suppressCutToClipboard"))return;const s={type:"cutStart",source:t};this.eventService.dispatchEvent(s),this.copyOrCutToClipboard(e,!0);const o={type:"cutEnd",source:t};this.eventService.dispatchEvent(o)}copyOrCutToClipboard(e,t){let{includeHeaders:s,includeGroupHeaders:o}=e;s==null&&(s=this.gos.get("copyHeadersToClipboard")),o==null&&(o=this.gos.get("copyGroupHeadersToClipboard"));const i={includeHeaders:s,includeGroupHeaders:o},r=!this.gos.get("suppressCopyRowsToClipboard");let l=null;this.rangeService&&!this.rangeService.isEmpty()&&!this.shouldSkipSingleCellRange(this.rangeService)?(this.copySelectedRangeToClipboard(i),l=0):r&&!this.selectionService.isEmpty()?(this.copySelectedRowsToClipboard(i),l=1):this.focusService.isAnyCellFocused()&&(this.copyFocusedCellToClipboard(i),l=2),t&&l!==null&&this.clearCellsAfterCopy(l)}clearCellsAfterCopy(e){if(this.eventService.dispatchEvent({type:"keyShortcutChangedCellStart"}),e===0)this.rangeService.clearCellRangeCellValues({cellEventSource:"clipboardService"});else if(e===1)this.clearSelectedRows();else{const t=this.focusService.getFocusedCell();if(t==null)return;const s=this.rowPositionUtils.getRowNode(t);s&&this.clearCellValue(s,t.column)}this.eventService.dispatchEvent({type:"keyShortcutChangedCellEnd"})}clearSelectedRows(){const e=this.selectionService.getSelectedNodes(),t=this.visibleColsService.getAllCols();for(const s of e)for(const o of t)this.clearCellValue(s,o)}clearCellValue(e,t){if(!t.isCellEditable(e))return;const s=this.valueService.parseValue(t,e,"",e.getValueFromValueService(t))??null;e.setDataValue(t,s,"clipboardService")}shouldSkipSingleCellRange(e){return this.gos.get("suppressCopySingleCellRanges")&&!e.isMoreThanOneCell()}iterateActiveRanges(e,t,s){if(!this.rangeService||this.rangeService.isEmpty())return;const o=this.rangeService.getCellRanges();e?this.iterateActiveRange(o[0],t,s,!0):o.forEach((i,r)=>this.iterateActiveRange(i,t,s,r===o.length-1))}iterateActiveRange(e,t,s,o){if(!this.rangeService)return;let i=this.rangeService.getRangeStartRow(e);const r=this.rangeService.getRangeEndRow(e);s&&e.columns&&s(e.columns);let l=0,n=!1;for(;!n&&i!=null;){const a=this.rowPositionUtils.getRowNode(i);n=this.rowPositionUtils.sameRow(i,r),t(i,a,e.columns,l++,n&&o),i=this.cellNavigationService.getRowBelow(i)}}copySelectedRangeToClipboard(e={}){if(!this.rangeService||this.rangeService.isEmpty())return;const t=this.rangeService.areAllRangesAbleToMerge(),{data:s,cellsToFlash:o}=t?this.buildDataFromMergedRanges(this.rangeService,e):this.buildDataFromRanges(this.rangeService,e);this.copyDataToClipboard(s),this.dispatchFlashCells(o)}buildDataFromMergedRanges(e,t){const s=new Set,o=e.getCellRanges(),i=new Map,r=[],l={};o.forEach(c=>{c.columns.forEach(h=>s.add(h));const{rowPositions:p,cellsToFlash:d}=this.getRangeRowPositionsAndCellsToFlash(e,c);p.forEach(h=>{const C=`${h.rowIndex}-${h.rowPinned||"null"}`;i.get(C)||(i.set(C,!0),r.push(h))}),Object.assign(l,d)});const n=this.visibleColsService.getAllCols(),a=Array.from(s);return a.sort((c,p)=>{const d=n.indexOf(c),h=n.indexOf(p);return d-h}),{data:this.buildExportParams({columns:a,rowPositions:r,includeHeaders:t.includeHeaders,includeGroupHeaders:t.includeGroupHeaders}),cellsToFlash:l}}buildDataFromRanges(e,t){const s=e.getCellRanges(),o=[],i={};return s.forEach(r=>{const{rowPositions:l,cellsToFlash:n}=this.getRangeRowPositionsAndCellsToFlash(e,r);Object.assign(i,n),o.push(this.buildExportParams({columns:r.columns,rowPositions:l,includeHeaders:t.includeHeaders,includeGroupHeaders:t.includeGroupHeaders}))}),{data:o.join(`
`),cellsToFlash:i}}getRangeRowPositionsAndCellsToFlash(e,t){const s=[],o={},i=e.getRangeStartRow(t),r=e.getRangeEndRow(t);let l=i;for(;l&&(s.push(l),t.columns.forEach(n=>{const{rowIndex:a,rowPinned:u}=l,c=this.cellPositionUtils.createIdFromValues({rowIndex:a,column:n,rowPinned:u});o[c]=!0}),!this.rowPositionUtils.sameRow(l,r));)l=this.cellNavigationService.getRowBelow(l);return{rowPositions:s,cellsToFlash:o}}getCellsToFlashFromRowNodes(e){const t=this.visibleColsService.getAllCols(),s={};for(let o=0;o<e.length;o++){const{rowIndex:i,rowPinned:r}=e[o];if(i!=null)for(let l=0;l<t.length;l++){const n=t[l],a=this.cellPositionUtils.createIdFromValues({rowIndex:i,column:n,rowPinned:r});s[a]=!0}}return s}copyFocusedCellToClipboard(e={}){const t=this.focusService.getFocusedCell();if(t==null)return;const s=this.cellPositionUtils.createId(t),o={rowPinned:t.rowPinned,rowIndex:t.rowIndex},i=t.column,r=this.buildExportParams({columns:[i],rowPositions:[o],includeHeaders:e.includeHeaders,includeGroupHeaders:e.includeGroupHeaders});this.copyDataToClipboard(r),this.dispatchFlashCells({[s]:!0})}copySelectedRowsToClipboard(e={}){const{columnKeys:t,includeHeaders:s,includeGroupHeaders:o}=e,i=this.buildExportParams({columns:t,includeHeaders:s,includeGroupHeaders:o});this.copyDataToClipboard(i);const r=this.selectionService.getSelectedNodes()||[];this.dispatchFlashCells(this.getCellsToFlashFromRowNodes(r))}buildExportParams(e){const{columns:t,rowPositions:s,includeHeaders:o=!1,includeGroupHeaders:i=!1}=e,r={columnKeys:t,rowPositions:s,skipColumnHeaders:!o,skipColumnGroupHeaders:!i,suppressQuotes:!0,columnSeparator:this.getClipboardDelimiter(),onlySelected:!s,processCellCallback:this.gos.getCallback("processCellForClipboard"),processRowGroupCallback:l=>this.processRowGroupCallback(l),processHeaderCallback:this.gos.getCallback("processHeaderForClipboard"),processGroupHeaderCallback:this.gos.getCallback("processGroupHeaderForClipboard")};return this.csvCreator.getDataAsCsv(r,!0)}processRowGroupCallback(e){const{node:t,column:s}=e,o=this.gos.get("treeData"),i=this.gos.get("suppressGroupMaintainValueType");let l=(()=>{if(o||i||!s)return t.key;const a=t.groupData?.[s.getId()];return!a||!t.rowGroupColumn||t.rowGroupColumn.getColDef().useValueFormatterForExport===!1?a:this.valueService.formatValue(t.rowGroupColumn,t,a)??a})();if(e.node.footer){let a="";l&&l.length&&(a=` ${l}`),l=`Total${a}`}const n=this.gos.getCallback("processCellForClipboard");if(n){let a=t.rowGroupColumn;return!a&&t.footer&&t.level===-1&&(a=this.funcColsService.getRowGroupColumns()[0]),n({value:l,node:t,column:a,type:"clipboard",formatValue:u=>this.valueService.formatValue(a,t,u)??u,parseValue:u=>this.valueService.parseValue(a,t,u,this.valueService.getValue(a,t))})}return l}dispatchFlashCells(e){window.setTimeout(()=>{const t={type:"flashCells",cells:e};this.eventService.dispatchEvent(t)},0)}processCell(e,t,s,o,i,r,l){return i?i({column:t,node:e,value:s,type:o,formatValue:a=>this.valueService.formatValue(t,e??null,a)??a,parseValue:a=>this.valueService.parseValue(t,e??null,a,this.valueService.getValue(t,e))}):r&&t.getColDef().useValueParserForImport!==!1?this.valueService.parseValue(t,e??null,s,this.valueService.getValue(t,e)):l&&t.getColDef().useValueFormatterForExport!==!1?this.valueService.formatValue(t,e??null,s)??s:s}copyDataToClipboard(e){const t=this.gos.getCallback("sendToClipboard");if(t){t({data:e});return}if(!this.gos.get("suppressClipboardApi")&&navigator.clipboard){navigator.clipboard.writeText(e).catch(o=>{S(`${o}
${T("writeText")}`),this.copyDataToClipboardLegacy(e)});return}this.copyDataToClipboardLegacy(e)}copyDataToClipboardLegacy(e){this.executeOnTempElement(t=>{const s=this.gos.getDocument(),o=this.gos.getActiveDomElement();t.value=e||" ",t.select(),t.focus({preventScroll:!0}),s.execCommand("copy")||S("Browser did not allow document.execCommand('copy'). Ensure api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise the browser will prevent it for security reasons."),o!=null&&o.focus!=null&&o.focus({preventScroll:!0})})}executeOnTempElement(e,t){const s=this.gos.getDocument(),o=s.createElement("textarea");o.style.width="1px",o.style.height="1px",o.style.top=s.documentElement.scrollTop+"px",o.style.left=s.documentElement.scrollLeft+"px",o.style.position="absolute",o.style.opacity="0";const i=this.gridCtrl.getGui();i.appendChild(o);try{e(o)}catch{S("Browser does not support document.execCommand('copy') for clipboard operations")}t?window.setTimeout(()=>{t(o),i.removeChild(o)},100):i.removeChild(o)}getRangeSize(e){const t=e.getCellRanges();let s=0,o=0;return t.length>0&&(s=e.getRangeStartRow(t[0]).rowIndex,o=e.getRangeEndRow(t[0]).rowIndex),s-o+1}},y="32.0.0",P={version:y,moduleName:`${b.ClipboardModule}-core`,beans:[Y],dependantModules:[O,D]},z={version:y,moduleName:`${b.ClipboardModule}-api`,apiFunctions:{copyToClipboard:k,cutToClipboard:M,copySelectedRowsToClipboard:G,copySelectedRangeToClipboard:H,copySelectedRangeDown:L,pasteFromClipboard:U},dependantModules:[P]},K={version:y,moduleName:b.ClipboardModule,dependantModules:[P,z]};export{K as ClipboardModule};
