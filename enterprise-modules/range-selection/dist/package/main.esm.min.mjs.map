{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeService.ts\nimport {\n  Autowired,\n  Bean,\n  Events,\n  PostConstruct,\n  BeanStub,\n  AutoScrollService,\n  CellCtrl,\n  _\n} from \"@ag-grid-community/core\";\nvar RangeService = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.cellRanges = [];\n    this.bodyScrollListener = this.onBodyScroll.bind(this);\n    this.dragging = false;\n    this.intersectionRange = false;\n  }\n  init() {\n    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onColumnsChanged());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.onColumnsChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnsChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.refreshLastRangeStart.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.refreshLastRangeStart.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.refreshLastRangeStart.bind(this));\n    this.ctrlsService.whenReady((p) => {\n      const gridBodyCtrl = p.gridBodyCtrl;\n      this.autoScrollService = new AutoScrollService({\n        scrollContainer: gridBodyCtrl.getBodyViewportElement(),\n        scrollAxis: \"xy\",\n        getVerticalPosition: () => gridBodyCtrl.getScrollFeature().getVScrollPosition().top,\n        setVerticalPosition: (position) => gridBodyCtrl.getScrollFeature().setVerticalScrollPosition(position),\n        getHorizontalPosition: () => gridBodyCtrl.getScrollFeature().getHScrollPosition().left,\n        setHorizontalPosition: (position) => gridBodyCtrl.getScrollFeature().setHorizontalScrollPosition(position),\n        shouldSkipVerticalScroll: () => !this.gos.isDomLayout(\"normal\"),\n        shouldSkipHorizontalScroll: () => !gridBodyCtrl.getScrollFeature().isHorizontalScrollShowing()\n      });\n    });\n  }\n  // Called for both columns loaded & column visibility events\n  onColumnsChanged() {\n    this.refreshLastRangeStart();\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    this.cellRanges.forEach((cellRange) => {\n      const beforeCols = cellRange.columns;\n      cellRange.columns = cellRange.columns.filter(\n        (col) => col.isVisible() && allColumns.indexOf(col) !== -1\n      );\n      const colsInRangeChanged = !_.areEqual(beforeCols, cellRange.columns);\n      if (colsInRangeChanged) {\n        this.dispatchChangedEvent(false, true, cellRange.id);\n      }\n    });\n    const countBefore = this.cellRanges.length;\n    this.cellRanges = this.cellRanges.filter((range) => range.columns.length > 0);\n    if (countBefore > this.cellRanges.length) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  refreshLastRangeStart() {\n    const lastRange = _.last(this.cellRanges);\n    if (!lastRange) {\n      return;\n    }\n    this.refreshRangeStart(lastRange);\n  }\n  isContiguousRange(cellRange) {\n    const rangeColumns = cellRange.columns;\n    if (!rangeColumns.length) {\n      return false;\n    }\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allPositions = rangeColumns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    return _.last(allPositions) - allPositions[0] + 1 === rangeColumns.length;\n  }\n  getRangeStartRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.startRow : cellRange.endRow;\n    }\n    const rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? \"top\" : null;\n    return { rowIndex: 0, rowPinned };\n  }\n  getRangeEndRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.endRow : cellRange.startRow;\n    }\n    const pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();\n    const pinnedBottom = pinnedBottomRowCount > 0;\n    if (pinnedBottom) {\n      return {\n        rowIndex: pinnedBottomRowCount - 1,\n        rowPinned: \"bottom\"\n      };\n    }\n    return {\n      rowIndex: this.rowModel.getRowCount() - 1,\n      rowPinned: null\n    };\n  }\n  setRangeToCell(cell, appendRange = false) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(cell.column, cell.column);\n    if (!columns) {\n      return;\n    }\n    const suppressMultiRangeSelections = this.gos.get(\"suppressMultiRangeSelection\");\n    if (suppressMultiRangeSelections || !appendRange || _.missing(this.cellRanges)) {\n      this.removeAllCellRanges(true);\n    }\n    const rowForCell = {\n      rowIndex: cell.rowIndex,\n      rowPinned: cell.rowPinned\n    };\n    const cellRange = {\n      startRow: rowForCell,\n      endRow: rowForCell,\n      columns,\n      startColumn: cell.column\n    };\n    this.cellRanges.push(cellRange);\n    this.setNewestRangeStartCell(cell);\n    this.onDragStop();\n    this.dispatchChangedEvent(true, true);\n  }\n  extendLatestRangeToCell(cellPosition) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const cellRange = _.last(this.cellRanges);\n    this.updateRangeEnd(cellRange, cellPosition);\n  }\n  updateRangeEnd(cellRange, cellPosition, silent = false) {\n    const endColumn = cellPosition.column;\n    const colsToAdd = this.calculateColumnsBetween(cellRange.startColumn, endColumn);\n    if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {\n      return;\n    }\n    cellRange.columns = colsToAdd;\n    cellRange.endRow = { rowIndex: cellPosition.rowIndex, rowPinned: cellPosition.rowPinned };\n    if (!silent) {\n      this.dispatchChangedEvent(true, true, cellRange.id);\n    }\n  }\n  refreshRangeStart(cellRange) {\n    const { startColumn, columns } = cellRange;\n    const moveColInCellRange = (colToMove, moveToFront) => {\n      const otherCols = cellRange.columns.filter((col) => col !== colToMove);\n      if (colToMove) {\n        cellRange.startColumn = colToMove;\n        cellRange.columns = moveToFront ? [colToMove, ...otherCols] : [...otherCols, colToMove];\n      } else {\n        cellRange.columns = otherCols;\n      }\n    };\n    const { left, right } = this.getRangeEdgeColumns(cellRange);\n    const shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;\n    if (shouldMoveLeftCol) {\n      moveColInCellRange(left, true);\n      return;\n    }\n    const shouldMoveRightCol = startColumn === _.last(columns) && startColumn === right;\n    if (shouldMoveRightCol) {\n      moveColInCellRange(right, false);\n      return;\n    }\n  }\n  getRangeEdgeColumns(cellRange) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allIndices = cellRange.columns.map((c) => allColumns.indexOf(c)).filter((i) => i > -1).sort((a, b) => a - b);\n    return {\n      left: allColumns[allIndices[0]],\n      right: allColumns[_.last(allIndices)]\n    };\n  }\n  // returns true if successful, false if not successful\n  extendLatestRangeInDirection(event) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const key = event.key;\n    const ctrlKey = event.ctrlKey || event.metaKey;\n    const lastRange = _.last(this.cellRanges);\n    const startCell = this.newestRangeStartCell;\n    const firstCol = lastRange.columns[0];\n    const lastCol = _.last(lastRange.columns);\n    const endCellIndex = lastRange.endRow.rowIndex;\n    const endCellFloating = lastRange.endRow.rowPinned;\n    const endCellColumn = startCell.column === firstCol ? lastCol : firstCol;\n    const endCell = { column: endCellColumn, rowIndex: endCellIndex, rowPinned: endCellFloating };\n    const newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell, ctrlKey);\n    if (!newEndCell) {\n      return;\n    }\n    this.setCellRange({\n      rowStartIndex: startCell.rowIndex,\n      rowStartPinned: startCell.rowPinned,\n      rowEndIndex: newEndCell.rowIndex,\n      rowEndPinned: newEndCell.rowPinned,\n      columnStart: startCell.column,\n      columnEnd: newEndCell.column\n    });\n    return newEndCell;\n  }\n  setCellRange(params) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    this.addCellRange(params);\n  }\n  setCellRanges(cellRanges) {\n    if (_.shallowCompare(this.cellRanges, cellRanges)) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    cellRanges.forEach((newRange) => {\n      if (newRange.columns && newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.columns[0]\n        });\n      }\n      this.cellRanges.push(newRange);\n    });\n    this.dispatchChangedEvent(false, true);\n  }\n  setNewestRangeStartCell(position) {\n    this.newestRangeStartCell = position;\n  }\n  clearCellRangeCellValues(params) {\n    let { cellRanges } = params;\n    const {\n      cellEventSource = \"rangeService\",\n      dispatchWrapperEvents,\n      wrapperEventSource = \"deleteKey\"\n    } = params;\n    if (dispatchWrapperEvents) {\n      const startEvent = {\n        type: Events.EVENT_RANGE_DELETE_START,\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(startEvent);\n    }\n    if (!cellRanges) {\n      cellRanges = this.cellRanges;\n    }\n    cellRanges.forEach((cellRange) => {\n      this.forEachRowInRange(cellRange, (rowPosition) => {\n        var _a;\n        const rowNode = this.rowPositionUtils.getRowNode(rowPosition);\n        if (!rowNode) {\n          return;\n        }\n        for (let i = 0; i < cellRange.columns.length; i++) {\n          const column = this.columnModel.getGridColumn(cellRange.columns[i]);\n          if (!column || !column.isCellEditable(rowNode)) {\n            continue;\n          }\n          const emptyValue = (_a = this.valueService.parseValue(column, rowNode, \"\", rowNode.getValueFromValueService(column))) != null ? _a : null;\n          rowNode.setDataValue(column, emptyValue, cellEventSource);\n        }\n      });\n    });\n    if (dispatchWrapperEvents) {\n      const endEvent = {\n        type: Events.EVENT_RANGE_DELETE_END,\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(endEvent);\n    }\n  }\n  createCellRangeFromCellRangeParams(params) {\n    return this.createPartialCellRangeFromRangeParams(params, false);\n  }\n  // Range service can't normally support a range without columns, but charts can\n  createPartialCellRangeFromRangeParams(params, allowEmptyColumns) {\n    let columns;\n    let startsOnTheRight = false;\n    if (params.columns) {\n      columns = params.columns.map((c) => this.columnModel.getColumnWithValidation(c)).filter((c) => c);\n    } else {\n      const columnStart = this.columnModel.getColumnWithValidation(params.columnStart);\n      const columnEnd = this.columnModel.getColumnWithValidation(params.columnEnd);\n      if (!columnStart || !columnEnd) {\n        return;\n      }\n      columns = this.calculateColumnsBetween(columnStart, columnEnd);\n      if (columns && columns.length) {\n        startsOnTheRight = columns[0] !== columnStart;\n      }\n    }\n    if (!columns || !allowEmptyColumns && columns.length === 0) {\n      return;\n    }\n    const startRow = params.rowStartIndex != null ? {\n      rowIndex: params.rowStartIndex,\n      rowPinned: params.rowStartPinned || null\n    } : void 0;\n    const endRow = params.rowEndIndex != null ? {\n      rowIndex: params.rowEndIndex,\n      rowPinned: params.rowEndPinned || null\n    } : void 0;\n    return {\n      startRow,\n      endRow,\n      columns,\n      startColumn: startsOnTheRight ? _.last(columns) : columns[0]\n    };\n  }\n  addCellRange(params) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const newRange = this.createCellRangeFromCellRangeParams(params);\n    if (newRange) {\n      if (newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.startColumn\n        });\n      }\n      this.cellRanges.push(newRange);\n      this.dispatchChangedEvent(false, true, newRange.id);\n    }\n  }\n  getCellRanges() {\n    return this.cellRanges;\n  }\n  isEmpty() {\n    return this.cellRanges.length === 0;\n  }\n  isMoreThanOneCell() {\n    const len = this.cellRanges.length;\n    if (len === 0) {\n      return false;\n    }\n    if (len > 1) {\n      return true;\n    }\n    const range = this.cellRanges[0];\n    const startRow = this.getRangeStartRow(range);\n    const endRow = this.getRangeEndRow(range);\n    return startRow.rowPinned !== endRow.rowPinned || startRow.rowIndex !== endRow.rowIndex || range.columns.length !== 1;\n  }\n  areAllRangesAbleToMerge() {\n    const rowToColumnMap = /* @__PURE__ */ new Map();\n    const len = this.cellRanges.length;\n    if (len <= 1)\n      return true;\n    this.cellRanges.forEach((range) => {\n      this.forEachRowInRange(range, (row) => {\n        const rowName = `${row.rowPinned || \"normal\"}_${row.rowIndex}`;\n        const columns = rowToColumnMap.get(rowName);\n        const currentRangeColIds = range.columns.map((col) => col.getId());\n        if (columns) {\n          const filteredColumns = currentRangeColIds.filter((col) => columns.indexOf(col) === -1);\n          columns.push(...filteredColumns);\n        } else {\n          rowToColumnMap.set(rowName, currentRangeColIds);\n        }\n      });\n    });\n    let columnsString;\n    for (const val of rowToColumnMap.values()) {\n      const currentValString = val.sort().join();\n      if (columnsString === void 0) {\n        columnsString = currentValString;\n        continue;\n      }\n      if (columnsString !== currentValString) {\n        return false;\n      }\n    }\n    return true;\n  }\n  forEachRowInRange(cellRange, callback) {\n    const topRow = this.getRangeStartRow(cellRange);\n    const bottomRow = this.getRangeEndRow(cellRange);\n    let currentRow = topRow;\n    while (currentRow) {\n      callback(currentRow);\n      if (this.rowPositionUtils.sameRow(currentRow, bottomRow)) {\n        break;\n      }\n      currentRow = this.cellNavigationService.getRowBelow(currentRow);\n    }\n  }\n  removeAllCellRanges(silent) {\n    if (this.isEmpty()) {\n      return;\n    }\n    this.onDragStop();\n    this.cellRanges.length = 0;\n    if (!silent) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n  // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n  // the selection my mimicking a new mouse event\n  onBodyScroll() {\n    if (this.dragging && this.lastMouseEvent) {\n      this.onDragging(this.lastMouseEvent);\n    }\n  }\n  isCellInAnyRange(cell) {\n    return this.getCellRangeCount(cell) > 0;\n  }\n  isCellInSpecificRange(cell, range) {\n    const columnInRange = range.columns !== null && _.includes(range.columns, cell.column);\n    const rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);\n    return columnInRange && rowInRange;\n  }\n  isLastCellOfRange(cellRange, cell) {\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && cell.rowPinned === lastRow.rowPinned;\n    const rangeFirstIndexColumn = cellRange.columns[0];\n    const rangeLastIndexColumn = _.last(cellRange.columns);\n    const lastRangeColumn = cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;\n    const isLastColumn = cell.column === lastRangeColumn;\n    return isLastColumn && isLastRow;\n  }\n  isBottomRightCell(cellRange, cell) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allPositions = cellRange.columns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isRightColumn = allColumns.indexOf(cell.column) === _.last(allPositions);\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && _.makeNull(cell.rowPinned) === _.makeNull(lastRow.rowPinned);\n    return isRightColumn && isLastRow;\n  }\n  // returns the number of ranges this cell is in\n  getCellRangeCount(cell) {\n    if (this.isEmpty()) {\n      return 0;\n    }\n    return this.cellRanges.filter((cellRange) => this.isCellInSpecificRange(cell, cellRange)).length;\n  }\n  isRowInRange(rowIndex, floating, cellRange) {\n    const firstRow = this.getRangeStartRow(cellRange);\n    const lastRow = this.getRangeEndRow(cellRange);\n    const thisRow = { rowIndex, rowPinned: floating || null };\n    const equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;\n    const equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;\n    if (equalsFirstRow || equalsLastRow) {\n      return true;\n    }\n    const afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);\n    const beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);\n    return afterFirstRow && beforeLastRow;\n  }\n  getDraggingRange() {\n    return this.draggingRange;\n  }\n  onDragStart(mouseEvent) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n    const isMultiKey = ctrlKey || metaKey;\n    const allowMulti = !this.gos.get(\"suppressMultiRangeSelection\");\n    const isMultiSelect = allowMulti ? isMultiKey : false;\n    const extendRange = shiftKey && _.existsAndNotEmpty(this.cellRanges);\n    if (!isMultiSelect && (!extendRange || _.exists(_.last(this.cellRanges).type))) {\n      this.removeAllCellRanges(true);\n    }\n    const startTarget = this.dragService.getStartTarget();\n    if (startTarget) {\n      this.updateValuesOnMove(startTarget);\n    }\n    if (!this.lastCellHovered) {\n      return;\n    }\n    this.dragging = true;\n    this.lastMouseEvent = mouseEvent;\n    this.intersectionRange = isMultiSelect && this.getCellRangeCount(this.lastCellHovered) > 1;\n    if (!extendRange) {\n      this.setNewestRangeStartCell(this.lastCellHovered);\n    }\n    if (this.cellRanges.length > 0) {\n      this.draggingRange = _.last(this.cellRanges);\n    } else {\n      const mouseRowPosition = {\n        rowIndex: this.lastCellHovered.rowIndex,\n        rowPinned: this.lastCellHovered.rowPinned\n      };\n      this.draggingRange = {\n        startRow: mouseRowPosition,\n        endRow: mouseRowPosition,\n        columns: [this.lastCellHovered.column],\n        startColumn: this.newestRangeStartCell.column\n      };\n      this.cellRanges.push(this.draggingRange);\n    }\n    this.ctrlsService.getGridBodyCtrl().addScrollEventListener(this.bodyScrollListener);\n    this.dispatchChangedEvent(true, false, this.draggingRange.id);\n  }\n  intersectLastRange(fromMouseClick) {\n    if (fromMouseClick && this.dragging) {\n      return;\n    }\n    if (this.gos.get(\"suppressMultiRangeSelection\")) {\n      return;\n    }\n    if (this.isEmpty()) {\n      return;\n    }\n    const rowPosUtils = this.rowPositionUtils;\n    const lastRange = _.last(this.cellRanges);\n    const intersectionStartRow = this.getRangeStartRow(lastRange);\n    const intersectionEndRow = this.getRangeEndRow(lastRange);\n    const newRanges = [];\n    this.cellRanges.slice(0, -1).forEach((range) => {\n      const startRow = this.getRangeStartRow(range);\n      const endRow = this.getRangeEndRow(range);\n      const cols = range.columns;\n      const intersectCols = cols.filter((col) => lastRange.columns.indexOf(col) === -1);\n      if (intersectCols.length === cols.length) {\n        newRanges.push(range);\n        return;\n      }\n      if (rowPosUtils.before(intersectionEndRow, startRow) || rowPosUtils.before(endRow, intersectionStartRow)) {\n        newRanges.push(range);\n        return;\n      }\n      const rangeCountBefore = newRanges.length;\n      if (rowPosUtils.before(startRow, intersectionStartRow)) {\n        const top = {\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: __spreadValues({}, startRow),\n          endRow: this.cellNavigationService.getRowAbove(intersectionStartRow)\n        };\n        newRanges.push(top);\n      }\n      if (intersectCols.length > 0) {\n        const middle = {\n          columns: intersectCols,\n          startColumn: _.includes(intersectCols, lastRange.startColumn) ? lastRange.startColumn : intersectCols[0],\n          startRow: this.rowMax([__spreadValues({}, intersectionStartRow), __spreadValues({}, startRow)]),\n          endRow: this.rowMin([__spreadValues({}, intersectionEndRow), __spreadValues({}, endRow)])\n        };\n        newRanges.push(middle);\n      }\n      if (rowPosUtils.before(intersectionEndRow, endRow)) {\n        newRanges.push({\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: this.cellNavigationService.getRowBelow(intersectionEndRow),\n          endRow: __spreadValues({}, endRow)\n        });\n      }\n      if (newRanges.length - rangeCountBefore === 1) {\n        newRanges[newRanges.length - 1].id = range.id;\n      }\n    });\n    this.cellRanges = newRanges;\n    if (fromMouseClick) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  rowMax(rows) {\n    let max;\n    rows.forEach((row) => {\n      if (max === void 0 || this.rowPositionUtils.before(max, row)) {\n        max = row;\n      }\n    });\n    return max;\n  }\n  rowMin(rows) {\n    let min;\n    rows.forEach((row) => {\n      if (min === void 0 || this.rowPositionUtils.before(row, min)) {\n        min = row;\n      }\n    });\n    return min;\n  }\n  updateValuesOnMove(eventTarget) {\n    const cellCtrl = _.getCtrlForEventTarget(this.gos, eventTarget, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    const cell = cellCtrl == null ? void 0 : cellCtrl.getCellPosition();\n    this.cellHasChanged = false;\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    if (this.lastCellHovered) {\n      this.cellHasChanged = true;\n    }\n    this.lastCellHovered = cell;\n  }\n  onDragging(mouseEvent) {\n    if (!this.dragging || !mouseEvent) {\n      return;\n    }\n    this.updateValuesOnMove(mouseEvent.target);\n    this.lastMouseEvent = mouseEvent;\n    const cellPosition = this.lastCellHovered;\n    const isMouseAndStartInPinned = (position) => cellPosition && cellPosition.rowPinned === position && this.newestRangeStartCell.rowPinned === position;\n    const skipVerticalScroll = isMouseAndStartInPinned(\"top\") || isMouseAndStartInPinned(\"bottom\");\n    this.autoScrollService.check(mouseEvent, skipVerticalScroll);\n    if (!this.cellHasChanged) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(this.newestRangeStartCell.column, cellPosition.column);\n    if (!columns) {\n      return;\n    }\n    this.draggingRange.endRow = {\n      rowIndex: cellPosition.rowIndex,\n      rowPinned: cellPosition.rowPinned\n    };\n    this.draggingRange.columns = columns;\n    this.dispatchChangedEvent(false, false, this.draggingRange.id);\n  }\n  onDragStop() {\n    if (!this.dragging) {\n      return;\n    }\n    const { id } = this.draggingRange;\n    this.autoScrollService.ensureCleared();\n    this.ctrlsService.getGridBodyCtrl().removeScrollEventListener(this.bodyScrollListener);\n    this.lastMouseEvent = null;\n    this.dragging = false;\n    this.draggingRange = void 0;\n    this.lastCellHovered = void 0;\n    if (this.intersectionRange) {\n      this.intersectionRange = false;\n      this.intersectLastRange();\n    }\n    this.dispatchChangedEvent(false, true, id);\n  }\n  dispatchChangedEvent(started, finished, id) {\n    const event = {\n      type: Events.EVENT_RANGE_SELECTION_CHANGED,\n      started,\n      finished,\n      id\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  calculateColumnsBetween(columnFrom, columnTo) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const isSameColumn = columnFrom === columnTo;\n    const fromIndex = allColumns.indexOf(columnFrom);\n    if (fromIndex < 0) {\n      console.warn(`AG Grid: column ${columnFrom.getId()} is not visible`);\n      return;\n    }\n    const toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo);\n    if (toIndex < 0) {\n      console.warn(`AG Grid: column ${columnTo.getId()} is not visible`);\n      return;\n    }\n    if (isSameColumn) {\n      return [columnFrom];\n    }\n    const firstIndex = Math.min(fromIndex, toIndex);\n    const lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;\n    const columns = [];\n    for (let i = firstIndex; i <= lastIndex; i++) {\n      columns.push(allColumns[i]);\n    }\n    return columns;\n  }\n};\n__decorateClass([\n  Autowired(\"rowModel\")\n], RangeService.prototype, \"rowModel\", 2);\n__decorateClass([\n  Autowired(\"dragService\")\n], RangeService.prototype, \"dragService\", 2);\n__decorateClass([\n  Autowired(\"columnModel\")\n], RangeService.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired(\"cellNavigationService\")\n], RangeService.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  Autowired(\"pinnedRowModel\")\n], RangeService.prototype, \"pinnedRowModel\", 2);\n__decorateClass([\n  Autowired(\"rowPositionUtils\")\n], RangeService.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  Autowired(\"cellPositionUtils\")\n], RangeService.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  Autowired(\"ctrlsService\")\n], RangeService.prototype, \"ctrlsService\", 2);\n__decorateClass([\n  Autowired(\"valueService\")\n], RangeService.prototype, \"valueService\", 2);\n__decorateClass([\n  PostConstruct\n], RangeService.prototype, \"init\", 1);\nRangeService = __decorateClass([\n  Bean(\"rangeService\")\n], RangeService);\n\n// enterprise-modules/range-selection/src/rangeSelection/fillHandle.ts\nimport {\n  Autowired as Autowired3,\n  Events as Events2,\n  SelectionHandleType as SelectionHandleType2,\n  _ as _3\n} from \"@ag-grid-community/core\";\n\n// enterprise-modules/range-selection/src/rangeSelection/abstractSelectionHandle.ts\nimport {\n  Autowired as Autowired2,\n  Component,\n  PostConstruct as PostConstruct2,\n  _ as _2,\n  SelectionHandleType\n} from \"@ag-grid-community/core\";\nvar AbstractSelectionHandle = class extends Component {\n  constructor() {\n    super(...arguments);\n    this.changedCalculatedValues = false;\n    this.dragging = false;\n    this.shouldDestroyOnEndDragging = false;\n  }\n  init() {\n    this.dragService.addDragSource({\n      dragStartPixels: 0,\n      eElement: this.getGui(),\n      onDragStart: this.onDragStart.bind(this),\n      onDragging: (e) => {\n        this.dragging = true;\n        this.rangeService.autoScrollService.check(e);\n        if (this.changedCalculatedValues) {\n          this.onDrag(e);\n          this.changedCalculatedValues = false;\n        }\n      },\n      onDragStop: (e) => {\n        this.dragging = false;\n        this.onDragEnd(e);\n        this.clearValues();\n        this.rangeService.autoScrollService.ensureCleared();\n        document.body.classList.remove(this.getDraggingCssClass());\n        if (this.shouldDestroyOnEndDragging) {\n          this.destroy();\n        }\n      }\n    });\n    this.addManagedListener(\n      this.getGui(),\n      \"mousedown\",\n      this.preventRangeExtension.bind(this)\n    );\n  }\n  isDragging() {\n    return this.dragging;\n  }\n  getCellCtrl() {\n    return this.cellCtrl;\n  }\n  setCellCtrl(cellComp) {\n    this.cellCtrl = cellComp;\n  }\n  getCellRange() {\n    return this.cellRange;\n  }\n  setCellRange(range) {\n    this.cellRange = range;\n  }\n  getRangeStartRow() {\n    return this.rangeStartRow;\n  }\n  setRangeStartRow(row) {\n    this.rangeStartRow = row;\n  }\n  getRangeEndRow() {\n    return this.rangeEndRow;\n  }\n  setRangeEndRow(row) {\n    this.rangeEndRow = row;\n  }\n  getLastCellHovered() {\n    return this.lastCellHovered;\n  }\n  preventRangeExtension(e) {\n    e.stopPropagation();\n  }\n  onDragStart(e) {\n    this.cellHoverListener = this.addManagedListener(\n      this.ctrlsService.get(\"gridCtrl\").getGui(),\n      \"mousemove\",\n      this.updateValuesOnMove.bind(this)\n    );\n    document.body.classList.add(this.getDraggingCssClass());\n  }\n  getDraggingCssClass() {\n    return `ag-dragging-${this.type === SelectionHandleType.FILL ? \"fill\" : \"range\"}-handle`;\n  }\n  updateValuesOnMove(e) {\n    const cell = this.mouseEventService.getCellPositionForEvent(e);\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    this.lastCellHovered = cell;\n    this.changedCalculatedValues = true;\n  }\n  getType() {\n    return this.type;\n  }\n  refresh(cellCtrl) {\n    const oldCellComp = this.getCellCtrl();\n    const eGui = this.getGui();\n    const cellRange = _2.last(this.rangeService.getCellRanges());\n    const start = cellRange.startRow;\n    const end = cellRange.endRow;\n    if (start && end) {\n      const isBefore = this.rowPositionUtils.before(end, start);\n      if (isBefore) {\n        this.setRangeStartRow(end);\n        this.setRangeEndRow(start);\n      } else {\n        this.setRangeStartRow(start);\n        this.setRangeEndRow(end);\n      }\n    }\n    if (oldCellComp !== cellCtrl || !_2.isVisible(eGui)) {\n      this.setCellCtrl(cellCtrl);\n      const eParentOfValue = cellCtrl.getComp().getParentOfValue();\n      if (eParentOfValue) {\n        eParentOfValue.appendChild(eGui);\n      }\n    }\n    this.setCellRange(cellRange);\n  }\n  clearValues() {\n    this.lastCellHovered = void 0;\n    this.removeListeners();\n  }\n  removeListeners() {\n    if (this.cellHoverListener) {\n      this.cellHoverListener();\n      this.cellHoverListener = void 0;\n    }\n  }\n  destroy() {\n    if (!this.shouldDestroyOnEndDragging && this.isDragging()) {\n      _2.setDisplayed(this.getGui(), false);\n      this.shouldDestroyOnEndDragging = true;\n      return;\n    }\n    this.shouldDestroyOnEndDragging = false;\n    super.destroy();\n    this.removeListeners();\n    const eGui = this.getGui();\n    if (eGui.parentElement) {\n      eGui.parentElement.removeChild(eGui);\n    }\n  }\n};\n__decorateClass([\n  Autowired2(\"rowRenderer\")\n], AbstractSelectionHandle.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  Autowired2(\"dragService\")\n], AbstractSelectionHandle.prototype, \"dragService\", 2);\n__decorateClass([\n  Autowired2(\"rangeService\")\n], AbstractSelectionHandle.prototype, \"rangeService\", 2);\n__decorateClass([\n  Autowired2(\"mouseEventService\")\n], AbstractSelectionHandle.prototype, \"mouseEventService\", 2);\n__decorateClass([\n  Autowired2(\"columnModel\")\n], AbstractSelectionHandle.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired2(\"cellNavigationService\")\n], AbstractSelectionHandle.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  Autowired2(\"navigationService\")\n], AbstractSelectionHandle.prototype, \"navigationService\", 2);\n__decorateClass([\n  Autowired2(\"rowPositionUtils\")\n], AbstractSelectionHandle.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  Autowired2(\"cellPositionUtils\")\n], AbstractSelectionHandle.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  Autowired2(\"ctrlsService\")\n], AbstractSelectionHandle.prototype, \"ctrlsService\", 2);\n__decorateClass([\n  PostConstruct2\n], AbstractSelectionHandle.prototype, \"init\", 1);\n\n// enterprise-modules/range-selection/src/rangeSelection/utils.ts\nfunction findLineByLeastSquares(values) {\n  const len = values.length;\n  let maxDecimals = 0;\n  if (len <= 1) {\n    return values;\n  }\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    const splitExponent = value.toString().split(\"e-\");\n    if (splitExponent.length > 1) {\n      maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n      continue;\n    }\n    if (Math.floor(value) === value) {\n      continue;\n    }\n    maxDecimals = Math.max(maxDecimals, value.toString().split(\".\")[1].length);\n  }\n  let sum_x = 0;\n  let sum_y = 0;\n  let sum_xy = 0;\n  let sum_xx = 0;\n  let y = 0;\n  for (let x = 0; x < len; x++) {\n    y = values[x];\n    sum_x += x;\n    sum_y += y;\n    sum_xx += x * x;\n    sum_xy += x * y;\n  }\n  const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n  const b = sum_y / len - m * sum_x / len;\n  const result = [];\n  for (let x = 0; x <= len; x++) {\n    result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n  }\n  return result;\n}\n\n// enterprise-modules/range-selection/src/rangeSelection/fillHandle.ts\nvar _FillHandle = class _FillHandle extends AbstractSelectionHandle {\n  constructor() {\n    super(_FillHandle.TEMPLATE);\n    this.markedCells = [];\n    this.cellValues = [];\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n    this.type = SelectionHandleType2.FILL;\n  }\n  updateValuesOnMove(e) {\n    super.updateValuesOnMove(e);\n    if (!this.initialXY) {\n      this.initialXY = this.mouseEventService.getNormalisedPosition(e);\n    }\n    const { x, y } = this.initialXY;\n    const { x: newX, y: newY } = this.mouseEventService.getNormalisedPosition(e);\n    const diffX = Math.abs(x - newX);\n    const diffY = Math.abs(y - newY);\n    const allowedDirection = this.getFillHandleDirection();\n    let direction;\n    if (allowedDirection === \"xy\") {\n      direction = diffX > diffY ? \"x\" : \"y\";\n    } else {\n      direction = allowedDirection;\n    }\n    if (direction !== this.dragAxis) {\n      this.dragAxis = direction;\n      this.changedCalculatedValues = true;\n    }\n  }\n  onDrag(e) {\n    if (!this.initialPosition) {\n      const cellCtrl = this.getCellCtrl();\n      if (!cellCtrl) {\n        return;\n      }\n      this.initialPosition = cellCtrl.getCellPosition();\n    }\n    const lastCellHovered = this.getLastCellHovered();\n    if (lastCellHovered) {\n      this.markPathFrom(this.initialPosition, lastCellHovered);\n    }\n  }\n  onDragEnd(e) {\n    this.initialXY = null;\n    if (!this.markedCells.length) {\n      return;\n    }\n    const isX = this.dragAxis === \"x\";\n    const initialRange = this.getCellRange();\n    const colLen = initialRange.columns.length;\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    let finalRange;\n    if (!this.isUp && !this.isLeft) {\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: rangeStartRow.rowIndex,\n        rowStartPinned: rangeStartRow.rowPinned,\n        columnStart: initialRange.columns[0],\n        rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked.rowIndex,\n        rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked.rowPinned,\n        columnEnd: isX ? this.lastCellMarked.column : initialRange.columns[colLen - 1]\n      });\n    } else {\n      const startRow = isX ? rangeStartRow : this.lastCellMarked;\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: startRow.rowIndex,\n        rowStartPinned: startRow.rowPinned,\n        columnStart: isX ? this.lastCellMarked.column : initialRange.columns[0],\n        rowEndIndex: rangeEndRow.rowIndex,\n        rowEndPinned: rangeEndRow.rowPinned,\n        columnEnd: initialRange.columns[colLen - 1]\n      });\n    }\n    if (finalRange) {\n      this.raiseFillStartEvent();\n      this.handleValueChanged(initialRange, finalRange, e);\n      this.rangeService.setCellRanges([finalRange]);\n      this.raiseFillEndEvent(initialRange, finalRange);\n    }\n  }\n  getFillHandleDirection() {\n    const direction = this.gos.get(\"fillHandleDirection\");\n    if (!direction) {\n      return \"xy\";\n    }\n    if (direction !== \"x\" && direction !== \"y\" && direction !== \"xy\") {\n      _3.warnOnce(`valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`);\n      return \"xy\";\n    }\n    return direction;\n  }\n  raiseFillStartEvent() {\n    const fillStartEvent = {\n      type: Events2.EVENT_FILL_START\n    };\n    this.eventService.dispatchEvent(fillStartEvent);\n  }\n  raiseFillEndEvent(initialRange, finalRange) {\n    const fillEndEvent = {\n      type: Events2.EVENT_FILL_END,\n      initialRange,\n      finalRange\n    };\n    this.eventService.dispatchEvent(fillEndEvent);\n  }\n  handleValueChanged(initialRange, finalRange, e) {\n    const initialRangeEndRow = this.rangeService.getRangeEndRow(initialRange);\n    const initialRangeStartRow = this.rangeService.getRangeStartRow(initialRange);\n    const finalRangeEndRow = this.rangeService.getRangeEndRow(finalRange);\n    const finalRangeStartRow = this.rangeService.getRangeStartRow(finalRange);\n    const isVertical = this.dragAxis === \"y\";\n    if (this.isReduce && !this.gos.get(\"suppressClearOnFillReduction\")) {\n      const columns = isVertical ? initialRange.columns : initialRange.columns.filter((col) => finalRange.columns.indexOf(col) < 0);\n      const startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n      if (startRow) {\n        this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n      }\n      return;\n    }\n    const values = [];\n    const initialValues = [];\n    const initialNonAggregatedValues = [];\n    const initialFormattedValues = [];\n    let withinInitialRange = true;\n    let idx = 0;\n    const resetValues = () => {\n      values.length = 0;\n      initialValues.length = 0;\n      initialNonAggregatedValues.length = 0;\n      initialFormattedValues.length = 0;\n      idx = 0;\n    };\n    const iterateAcrossCells = (column, columns) => {\n      let currentRow = this.isUp ? initialRangeEndRow : initialRangeStartRow;\n      let finished = false;\n      if (isVertical) {\n        withinInitialRange = true;\n        resetValues();\n      }\n      while (!finished && currentRow) {\n        const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n        if (!rowNode) {\n          break;\n        }\n        if (isVertical && column) {\n          fillValues(values, column, rowNode, () => {\n            return !this.rowPositionUtils.sameRow(currentRow, this.isUp ? initialRangeStartRow : initialRangeEndRow);\n          });\n        } else if (columns) {\n          withinInitialRange = true;\n          resetValues();\n          columns.forEach((col) => fillValues(\n            values,\n            col,\n            rowNode,\n            () => col !== (this.isLeft ? initialRange.columns[0] : _3.last(initialRange.columns))\n          ));\n        }\n        finished = this.rowPositionUtils.sameRow(currentRow, this.isUp ? finalRangeStartRow : finalRangeEndRow);\n        currentRow = this.isUp ? this.cellNavigationService.getRowAbove(currentRow) : this.cellNavigationService.getRowBelow(currentRow);\n      }\n    };\n    const fillValues = (currentValues, col, rowNode, updateInitialSet) => {\n      var _a, _b;\n      let currentValue;\n      let skipValue = false;\n      if (withinInitialRange) {\n        currentValue = this.valueService.getValue(col, rowNode);\n        initialValues.push(currentValue);\n        initialNonAggregatedValues.push(this.valueService.getValue(col, rowNode, void 0, true));\n        initialFormattedValues.push(this.valueService.formatValue(col, rowNode, currentValue));\n        withinInitialRange = updateInitialSet();\n      } else {\n        const { value, fromUserFunction, sourceCol, sourceRowNode } = this.processValues({\n          event: e,\n          values: currentValues,\n          initialValues,\n          initialNonAggregatedValues,\n          initialFormattedValues,\n          col,\n          rowNode,\n          idx: idx++\n        });\n        currentValue = value;\n        if (col.isCellEditable(rowNode)) {\n          const cellValue = this.valueService.getValue(col, rowNode);\n          if (!fromUserFunction) {\n            if (sourceCol && ((_a = sourceCol.getColDef()) == null ? void 0 : _a.useValueFormatterForExport) !== false) {\n              currentValue = (_b = this.valueService.formatValue(sourceCol, sourceRowNode, currentValue)) != null ? _b : currentValue;\n            }\n            if (col.getColDef().useValueParserForImport !== false) {\n              currentValue = this.valueService.parseValue(\n                col,\n                rowNode,\n                // if no sourceCol, then currentValue is a number\n                sourceCol ? currentValue : _3.toStringOrNull(currentValue),\n                cellValue\n              );\n            }\n          }\n          if (!fromUserFunction || cellValue !== currentValue) {\n            rowNode.setDataValue(col, currentValue, \"rangeService\");\n          } else {\n            skipValue = true;\n          }\n        }\n      }\n      if (!skipValue) {\n        currentValues.push({\n          value: currentValue,\n          column: col,\n          rowNode\n        });\n      }\n    };\n    if (isVertical) {\n      initialRange.columns.forEach((col) => {\n        iterateAcrossCells(col);\n      });\n    } else {\n      const columns = this.isLeft ? [...finalRange.columns].reverse() : finalRange.columns;\n      iterateAcrossCells(void 0, columns);\n    }\n  }\n  clearCellsInRange(startRow, endRow, columns) {\n    const cellRange = {\n      startRow,\n      endRow,\n      columns,\n      startColumn: columns[0]\n    };\n    this.rangeService.clearCellRangeCellValues({ cellRanges: [cellRange] });\n  }\n  processValues(params) {\n    const { event, values, initialValues, initialNonAggregatedValues, initialFormattedValues, col, rowNode, idx } = params;\n    const userFillOperation = this.gos.getCallback(\"fillOperation\");\n    const isVertical = this.dragAxis === \"y\";\n    let direction;\n    if (isVertical) {\n      direction = this.isUp ? \"up\" : \"down\";\n    } else {\n      direction = this.isLeft ? \"left\" : \"right\";\n    }\n    if (userFillOperation) {\n      const params2 = {\n        event,\n        values: values.map(({ value }) => value),\n        initialValues,\n        initialNonAggregatedValues,\n        initialFormattedValues,\n        currentIndex: idx,\n        currentCellValue: this.valueService.getValue(col, rowNode),\n        direction,\n        column: col,\n        rowNode\n      };\n      const userResult = userFillOperation(params2);\n      if (userResult !== false) {\n        return { value: userResult, fromUserFunction: true };\n      }\n    }\n    const allNumbers = !values.some(({ value }) => {\n      const asFloat = parseFloat(value);\n      return isNaN(asFloat) || asFloat.toString() !== value.toString();\n    });\n    if (event.altKey || !allNumbers) {\n      if (allNumbers && initialValues.length === 1) {\n        const multiplier = this.isUp || this.isLeft ? -1 : 1;\n        return { value: parseFloat(_3.last(values).value) + 1 * multiplier, fromUserFunction: false };\n      }\n      const { value, column: sourceCol, rowNode: sourceRowNode } = values[idx % values.length];\n      return { value, fromUserFunction: false, sourceCol, sourceRowNode };\n    }\n    return { value: _3.last(findLineByLeastSquares(values.map(({ value }) => Number(value)))), fromUserFunction: false };\n  }\n  clearValues() {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    this.lastCellMarked = void 0;\n    super.clearValues();\n  }\n  clearMarkedPath() {\n    this.markedCells.forEach((cell) => {\n      if (!cell.isAlive()) {\n        return;\n      }\n      const comp = cell.getComp();\n      comp.addOrRemoveCssClass(\"ag-selection-fill-top\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-right\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-bottom\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-left\", false);\n    });\n    this.markedCells.length = 0;\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n  }\n  clearCellValues() {\n    this.cellValues.length = 0;\n  }\n  markPathFrom(initialPosition, currentPosition) {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    if (this.dragAxis === \"y\") {\n      if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {\n        return;\n      }\n      const isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n      const rangeStartRow = this.getRangeStartRow();\n      const rangeEndRow = this.getRangeEndRow();\n      if (isBefore && (currentPosition.rowPinned == rangeStartRow.rowPinned && currentPosition.rowIndex >= rangeStartRow.rowIndex || rangeStartRow.rowPinned != rangeEndRow.rowPinned && currentPosition.rowPinned == rangeEndRow.rowPinned && currentPosition.rowIndex <= rangeEndRow.rowIndex)) {\n        this.reduceVertical(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendVertical(initialPosition, currentPosition, isBefore);\n        this.isReduce = false;\n      }\n    } else {\n      const initialColumn = initialPosition.column;\n      const currentColumn = currentPosition.column;\n      if (initialColumn === currentColumn) {\n        return;\n      }\n      const displayedColumns = this.columnModel.getAllDisplayedColumns();\n      const initialIndex = displayedColumns.indexOf(initialColumn);\n      const currentIndex = displayedColumns.indexOf(currentColumn);\n      if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {\n        this.reduceHorizontal(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n        this.isReduce = false;\n      }\n    }\n    this.lastCellMarked = currentPosition;\n  }\n  extendVertical(initialPosition, endPosition, isMovingUp) {\n    const { navigationService, rangeService } = this;\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      for (let i = 0; i < colLen; i++) {\n        const column = cellRange.columns[i];\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const cellPos = __spreadProps(__spreadValues({}, rowPos), { column });\n        const cellInRange = rangeService.isCellInSpecificRange(cellPos, cellRange);\n        const isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n        if (isMovingUp) {\n          this.isUp = true;\n        }\n        if (!isInitialRow) {\n          const cell = navigationService.getCellByPosition(cellPos);\n          if (cell) {\n            this.markedCells.push(cell);\n            const cellCtrl = cell.getComp();\n            if (!cellInRange) {\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-left\", i === 0);\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-right\", i === colLen - 1);\n            }\n            cellCtrl.addOrRemoveCssClass(\n              isMovingUp ? \"ag-selection-fill-top\" : \"ag-selection-fill-bottom\",\n              this.rowPositionUtils.sameRow(row, endPosition)\n            );\n          }\n        }\n      }\n      if (this.rowPositionUtils.sameRow(row, endPosition)) {\n        break;\n      }\n    } while (\n      // tslint:disable-next-line\n      row = isMovingUp ? this.cellNavigationService.getRowAbove(row) : this.cellNavigationService.getRowBelow(row)\n    );\n  }\n  reduceVertical(initialPosition, endPosition) {\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      const isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n      for (let i = 0; i < colLen; i++) {\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const celPos = __spreadProps(__spreadValues({}, rowPos), { column: cellRange.columns[i] });\n        const cell = this.navigationService.getCellByPosition(celPos);\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\n            \"ag-selection-fill-bottom\",\n            this.rowPositionUtils.sameRow(row, endPosition)\n          );\n        }\n      }\n      if (isLastRow) {\n        break;\n      }\n    } while (row = this.cellNavigationService.getRowAbove(row));\n  }\n  extendHorizontal(initialPosition, endPosition, isMovingLeft) {\n    const allCols = this.columnModel.getAllDisplayedColumns();\n    const startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);\n    const endCol = allCols.indexOf(isMovingLeft ? this.getCellRange().columns[0] : endPosition.column);\n    const offset = isMovingLeft ? 0 : 1;\n    const colsToMark = allCols.slice(startCol + offset, endCol + offset);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-top\", this.rowPositionUtils.sameRow(row, rangeStartRow));\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-bottom\", this.rowPositionUtils.sameRow(row, rangeEndRow));\n          if (isMovingLeft) {\n            this.isLeft = true;\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-left\", column === colsToMark[0]);\n          } else {\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === _3.last(colsToMark));\n          }\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  reduceHorizontal(initialPosition, endPosition) {\n    const allCols = this.columnModel.getAllDisplayedColumns();\n    const startCol = allCols.indexOf(endPosition.column);\n    const endCol = allCols.indexOf(initialPosition.column);\n    const colsToMark = allCols.slice(startCol, endCol);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === colsToMark[0]);\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  refresh(cellCtrl) {\n    const cellRange = this.rangeService.getCellRanges()[0];\n    const isColumnRange = !cellRange.startRow || !cellRange.endRow;\n    if (isColumnRange) {\n      this.destroy();\n      return;\n    }\n    super.refresh(cellCtrl);\n  }\n};\n_FillHandle.TEMPLATE = /* html */\n`<div class=\"ag-fill-handle\"></div>`;\n__decorateClass([\n  Autowired3(\"valueService\")\n], _FillHandle.prototype, \"valueService\", 2);\nvar FillHandle = _FillHandle;\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeHandle.ts\nimport {\n  CellRangeType,\n  SelectionHandleType as SelectionHandleType3,\n  _ as _4\n} from \"@ag-grid-community/core\";\nvar _RangeHandle = class _RangeHandle extends AbstractSelectionHandle {\n  constructor() {\n    super(_RangeHandle.TEMPLATE);\n    this.type = SelectionHandleType3.RANGE;\n    this.rangeFixed = false;\n  }\n  onDrag(e) {\n    const lastCellHovered = this.getLastCellHovered();\n    if (!lastCellHovered) {\n      return;\n    }\n    const cellRanges = this.rangeService.getCellRanges();\n    const lastRange = _4.last(cellRanges);\n    if (!this.rangeFixed) {\n      this.fixRangeStartEnd(lastRange);\n      this.rangeFixed = true;\n    }\n    this.endPosition = {\n      rowIndex: lastCellHovered.rowIndex,\n      rowPinned: lastCellHovered.rowPinned,\n      column: lastCellHovered.column\n    };\n    if (cellRanges.length === 2 && cellRanges[0].type === CellRangeType.DIMENSION && lastRange.type === CellRangeType.VALUE) {\n      const rowChanged = !this.rowPositionUtils.sameRow(this.endPosition, this.rangeService.getRangeEndRow(lastRange));\n      if (rowChanged) {\n        this.rangeService.updateRangeEnd(\n          cellRanges[0],\n          __spreadProps(__spreadValues({}, this.endPosition), {\n            column: cellRanges[0].columns[0]\n          }),\n          true\n        );\n      }\n    }\n    this.rangeService.extendLatestRangeToCell(this.endPosition);\n  }\n  onDragEnd(e) {\n    const cellRange = _4.last(this.rangeService.getCellRanges());\n    this.fixRangeStartEnd(cellRange);\n    this.rangeFixed = false;\n  }\n  fixRangeStartEnd(cellRange) {\n    const startRow = this.rangeService.getRangeStartRow(cellRange);\n    const endRow = this.rangeService.getRangeEndRow(cellRange);\n    const column = cellRange.columns[0];\n    cellRange.startRow = startRow;\n    cellRange.endRow = endRow;\n    cellRange.startColumn = column;\n  }\n};\n_RangeHandle.TEMPLATE = /* html */\n`<div class=\"ag-range-handle\"></div>`;\nvar RangeHandle = _RangeHandle;\n\n// enterprise-modules/range-selection/src/rangeSelection/selectionHandleFactory.ts\nimport { Bean as Bean2, BeanStub as BeanStub2, SelectionHandleType as SelectionHandleType4 } from \"@ag-grid-community/core\";\nvar SelectionHandleFactory = class extends BeanStub2 {\n  createSelectionHandle(type) {\n    return this.createBean(type === SelectionHandleType4.RANGE ? new RangeHandle() : new FillHandle());\n  }\n};\nSelectionHandleFactory = __decorateClass([\n  Bean2(\"selectionHandleFactory\")\n], SelectionHandleFactory);\n\n// enterprise-modules/range-selection/src/version.ts\nvar VERSION = \"31.3.2\";\n\n// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nvar RangeSelectionModule = {\n  version: VERSION,\n  moduleName: ModuleNames.RangeSelectionModule,\n  beans: [RangeService, SelectionHandleFactory],\n  agStackComponents: [\n    { componentName: \"AgFillHandle\", componentClass: FillHandle },\n    { componentName: \"AgRangeHandle\", componentClass: RangeHandle }\n  ],\n  dependantModules: [\n    EnterpriseCoreModule\n  ]\n};\nexport {\n  RangeSelectionModule\n};\n"],
  "mappings": "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",
  "names": ["__defProp", "__defProps", "__getOwnPropDesc", "__getOwnPropDescs", "__getOwnPropSymbols", "__hasOwnProp", "__propIsEnum", "__defNormalProp", "obj", "key", "value", "__spreadValues", "a", "b", "prop", "__spreadProps", "__decorateClass", "decorators", "target", "kind", "result", "decorator", "ModuleNames", "EnterpriseCoreModule", "Autowired", "Bean", "Events", "PostConstruct", "BeanStub", "AutoScrollService", "CellCtrl", "_", "RangeService", "p", "gridBodyCtrl", "position", "allColumns", "cellRange", "beforeCols", "col", "countBefore", "range", "lastRange", "rangeColumns", "allPositions", "c", "pinnedBottomRowCount", "cell", "appendRange", "columns", "rowForCell", "cellPosition", "silent", "endColumn", "colsToAdd", "startColumn", "moveColInCellRange", "colToMove", "moveToFront", "otherCols", "left", "right", "allIndices", "i", "event", "ctrlKey", "startCell", "firstCol", "lastCol", "endCellIndex", "endCellFloating", "endCell", "newEndCell", "params", "cellRanges", "newRange", "cellEventSource", "dispatchWrapperEvents", "wrapperEventSource", "startEvent", "rowPosition", "_a", "rowNode", "column", "emptyValue", "endEvent", "allowEmptyColumns", "startsOnTheRight", "columnStart", "columnEnd", "startRow", "endRow", "len", "rowToColumnMap", "row", "rowName", "currentRangeColIds", "filteredColumns", "columnsString", "val", "currentValString", "callback", "topRow", "bottomRow", "currentRow", "columnInRange", "rowInRange", "lastRow", "isLastRow", "rangeFirstIndexColumn", "rangeLastIndexColumn", "lastRangeColumn", "isRightColumn", "rowIndex", "floating", "firstRow", "thisRow", "equalsFirstRow", "equalsLastRow", "afterFirstRow", "beforeLastRow", "mouseEvent", "metaKey", "shiftKey", "isMultiKey", "isMultiSelect", "extendRange", "startTarget", "mouseRowPosition", "fromMouseClick", "rowPosUtils", "intersectionStartRow", "intersectionEndRow", "newRanges", "cols", "intersectCols", "rangeCountBefore", "top", "middle", "rows", "max", "min", "eventTarget", "cellCtrl", "isMouseAndStartInPinned", "skipVerticalScroll", "id", "started", "finished", "columnFrom", "columnTo", "isSameColumn", "fromIndex", "toIndex", "firstIndex", "lastIndex", "Autowired3", "Events2", "SelectionHandleType2", "_3", "Autowired2", "Component", "PostConstruct2", "_2", "SelectionHandleType", "AbstractSelectionHandle", "e", "cellComp", "oldCellComp", "eGui", "start", "end", "eParentOfValue", "findLineByLeastSquares", "values", "maxDecimals", "splitExponent", "sum_x", "sum_y", "sum_xy", "sum_xx", "y", "x", "m", "_FillHandle", "newX", "newY", "diffX", "diffY", "allowedDirection", "direction", "lastCellHovered", "isX", "initialRange", "colLen", "rangeStartRow", "rangeEndRow", "finalRange", "fillStartEvent", "fillEndEvent", "initialRangeEndRow", "initialRangeStartRow", "finalRangeEndRow", "finalRangeStartRow", "isVertical", "initialValues", "initialNonAggregatedValues", "initialFormattedValues", "withinInitialRange", "idx", "resetValues", "iterateAcrossCells", "fillValues", "currentValues", "updateInitialSet", "_b", "currentValue", "skipValue", "fromUserFunction", "sourceCol", "sourceRowNode", "cellValue", "userFillOperation", "params2", "userResult", "allNumbers", "asFloat", "multiplier", "comp", "initialPosition", "currentPosition", "isBefore", "initialColumn", "currentColumn", "displayedColumns", "initialIndex", "currentIndex", "endPosition", "isMovingUp", "navigationService", "rangeService", "rowPos", "cellPos", "cellInRange", "isInitialRow", "celPos", "isMovingLeft", "allCols", "startCol", "endCol", "offset", "colsToMark", "FillHandle", "CellRangeType", "SelectionHandleType3", "_4", "_RangeHandle", "RangeHandle", "Bean2", "BeanStub2", "SelectionHandleType4", "SelectionHandleFactory", "type", "VERSION", "RangeSelectionModule"]
}
