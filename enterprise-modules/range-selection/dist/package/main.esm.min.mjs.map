{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeSelectionApi.ts\nfunction getCellRanges(beans) {\n  return beans.rangeService?.getCellRanges() ?? null;\n}\nfunction addCellRange(beans, params) {\n  beans.rangeService?.addCellRange(params);\n}\nfunction clearRangeSelection(beans) {\n  beans.rangeService?.removeAllCellRanges();\n}\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeService.ts\nimport {\n  AutoScrollService,\n  BeanStub,\n  CellCtrl,\n  _areEqual,\n  _exists,\n  _existsAndNotEmpty,\n  _getCtrlForEventTarget,\n  _includes,\n  _last,\n  _makeNull,\n  _missing,\n  _shallowCompare,\n  _warnOnce\n} from \"@ag-grid-community/core\";\nvar RangeService = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"rangeService\";\n    this.cellRanges = [];\n    this.bodyScrollListener = this.onBodyScroll.bind(this);\n    this.dragging = false;\n    this.intersectionRange = false;\n  }\n  wireBeans(beans) {\n    this.rowModel = beans.rowModel;\n    this.dragService = beans.dragService;\n    this.columnModel = beans.columnModel;\n    this.visibleColsService = beans.visibleColsService;\n    this.cellNavigationService = beans.cellNavigationService;\n    this.pinnedRowModel = beans.pinnedRowModel;\n    this.rowPositionUtils = beans.rowPositionUtils;\n    this.cellPositionUtils = beans.cellPositionUtils;\n    this.ctrlsService = beans.ctrlsService;\n    this.valueService = beans.valueService;\n  }\n  postConstruct() {\n    const onColumnsChanged = this.onColumnsChanged.bind(this);\n    const removeAllCellRanges = () => this.removeAllCellRanges();\n    const refreshLastRangeStart = this.refreshLastRangeStart.bind(this);\n    this.addManagedEventListeners({\n      newColumnsLoaded: onColumnsChanged,\n      columnVisible: onColumnsChanged,\n      columnValueChanged: onColumnsChanged,\n      columnPivotModeChanged: removeAllCellRanges,\n      columnRowGroupChanged: removeAllCellRanges,\n      columnPivotChanged: removeAllCellRanges,\n      columnGroupOpened: refreshLastRangeStart,\n      columnMoved: refreshLastRangeStart,\n      columnPinned: refreshLastRangeStart\n    });\n    this.ctrlsService.whenReady((p) => {\n      const gridBodyCtrl = p.gridBodyCtrl;\n      this.autoScrollService = new AutoScrollService({\n        scrollContainer: gridBodyCtrl.getBodyViewportElement(),\n        scrollAxis: \"xy\",\n        getVerticalPosition: () => gridBodyCtrl.getScrollFeature().getVScrollPosition().top,\n        setVerticalPosition: (position) => gridBodyCtrl.getScrollFeature().setVerticalScrollPosition(position),\n        getHorizontalPosition: () => gridBodyCtrl.getScrollFeature().getHScrollPosition().left,\n        setHorizontalPosition: (position) => gridBodyCtrl.getScrollFeature().setHorizontalScrollPosition(position),\n        shouldSkipVerticalScroll: () => !this.gos.isDomLayout(\"normal\"),\n        shouldSkipHorizontalScroll: () => !gridBodyCtrl.getScrollFeature().isHorizontalScrollShowing()\n      });\n    });\n  }\n  // Called for both columns loaded & column visibility events\n  onColumnsChanged() {\n    this.refreshLastRangeStart();\n    const allColumns = this.visibleColsService.getAllCols();\n    this.cellRanges.forEach((cellRange) => {\n      const beforeCols = cellRange.columns;\n      cellRange.columns = cellRange.columns.filter(\n        (col) => col.isVisible() && allColumns.indexOf(col) !== -1\n      );\n      const colsInRangeChanged = !_areEqual(beforeCols, cellRange.columns);\n      if (colsInRangeChanged) {\n        this.dispatchChangedEvent(false, true, cellRange.id);\n      }\n    });\n    const countBefore = this.cellRanges.length;\n    this.cellRanges = this.cellRanges.filter((range) => range.columns.length > 0);\n    if (countBefore > this.cellRanges.length) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  refreshLastRangeStart() {\n    const lastRange = _last(this.cellRanges);\n    if (!lastRange) {\n      return;\n    }\n    this.refreshRangeStart(lastRange);\n  }\n  isContiguousRange(cellRange) {\n    const rangeColumns = cellRange.columns;\n    if (!rangeColumns.length) {\n      return false;\n    }\n    const allColumns = this.visibleColsService.getAllCols();\n    const allPositions = rangeColumns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    return _last(allPositions) - allPositions[0] + 1 === rangeColumns.length;\n  }\n  getRangeStartRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.startRow : cellRange.endRow;\n    }\n    const rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? \"top\" : null;\n    return { rowIndex: 0, rowPinned };\n  }\n  getRangeEndRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.endRow : cellRange.startRow;\n    }\n    const pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();\n    const pinnedBottom = pinnedBottomRowCount > 0;\n    if (pinnedBottom) {\n      return {\n        rowIndex: pinnedBottomRowCount - 1,\n        rowPinned: \"bottom\"\n      };\n    }\n    return {\n      rowIndex: this.rowModel.getRowCount() - 1,\n      rowPinned: null\n    };\n  }\n  setRangeToCell(cell, appendRange = false) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(cell.column, cell.column);\n    if (!columns) {\n      return;\n    }\n    const suppressMultiRangeSelections = this.gos.get(\"suppressMultiRangeSelection\");\n    if (suppressMultiRangeSelections || !appendRange || _missing(this.cellRanges)) {\n      this.removeAllCellRanges(true);\n    }\n    const rowForCell = {\n      rowIndex: cell.rowIndex,\n      rowPinned: cell.rowPinned\n    };\n    const cellRange = {\n      startRow: rowForCell,\n      endRow: rowForCell,\n      columns,\n      startColumn: cell.column\n    };\n    this.cellRanges.push(cellRange);\n    this.setNewestRangeStartCell(cell);\n    this.onDragStop();\n    this.dispatchChangedEvent(true, true);\n  }\n  extendLatestRangeToCell(cellPosition) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const cellRange = _last(this.cellRanges);\n    this.updateRangeEnd(cellRange, cellPosition);\n  }\n  updateRangeEnd(cellRange, cellPosition, silent = false) {\n    const endColumn = cellPosition.column;\n    const colsToAdd = this.calculateColumnsBetween(cellRange.startColumn, endColumn);\n    if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {\n      return;\n    }\n    cellRange.columns = colsToAdd;\n    cellRange.endRow = { rowIndex: cellPosition.rowIndex, rowPinned: cellPosition.rowPinned };\n    if (!silent) {\n      this.dispatchChangedEvent(true, true, cellRange.id);\n    }\n  }\n  refreshRangeStart(cellRange) {\n    const { startColumn, columns } = cellRange;\n    const moveColInCellRange = (colToMove, moveToFront) => {\n      const otherCols = cellRange.columns.filter((col) => col !== colToMove);\n      if (colToMove) {\n        cellRange.startColumn = colToMove;\n        cellRange.columns = moveToFront ? [colToMove, ...otherCols] : [...otherCols, colToMove];\n      } else {\n        cellRange.columns = otherCols;\n      }\n    };\n    const { left, right } = this.getRangeEdgeColumns(cellRange);\n    const shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;\n    if (shouldMoveLeftCol) {\n      moveColInCellRange(left, true);\n      return;\n    }\n    const shouldMoveRightCol = startColumn === _last(columns) && startColumn === right;\n    if (shouldMoveRightCol) {\n      moveColInCellRange(right, false);\n      return;\n    }\n  }\n  getRangeEdgeColumns(cellRange) {\n    const allColumns = this.visibleColsService.getAllCols();\n    const allIndices = cellRange.columns.map((c) => allColumns.indexOf(c)).filter((i) => i > -1).sort((a, b) => a - b);\n    return {\n      left: allColumns[allIndices[0]],\n      right: allColumns[_last(allIndices)]\n    };\n  }\n  // returns true if successful, false if not successful\n  extendLatestRangeInDirection(event) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const key = event.key;\n    const ctrlKey = event.ctrlKey || event.metaKey;\n    const lastRange = _last(this.cellRanges);\n    const startCell = this.newestRangeStartCell;\n    const firstCol = lastRange.columns[0];\n    const lastCol = _last(lastRange.columns);\n    const endCellIndex = lastRange.endRow.rowIndex;\n    const endCellFloating = lastRange.endRow.rowPinned;\n    const endCellColumn = startCell.column === firstCol ? lastCol : firstCol;\n    const endCell = { column: endCellColumn, rowIndex: endCellIndex, rowPinned: endCellFloating };\n    const newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell, ctrlKey);\n    if (!newEndCell) {\n      return;\n    }\n    this.setCellRange({\n      rowStartIndex: startCell.rowIndex,\n      rowStartPinned: startCell.rowPinned,\n      rowEndIndex: newEndCell.rowIndex,\n      rowEndPinned: newEndCell.rowPinned,\n      columnStart: startCell.column,\n      columnEnd: newEndCell.column\n    });\n    return newEndCell;\n  }\n  setCellRange(params) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    this.addCellRange(params);\n  }\n  setCellRanges(cellRanges) {\n    if (_shallowCompare(this.cellRanges, cellRanges)) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    cellRanges.forEach((newRange) => {\n      if (newRange.columns && newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.columns[0]\n        });\n      }\n      this.cellRanges.push(newRange);\n    });\n    this.dispatchChangedEvent(false, true);\n  }\n  setNewestRangeStartCell(position) {\n    this.newestRangeStartCell = position;\n  }\n  clearCellRangeCellValues(params) {\n    let { cellRanges } = params;\n    const { cellEventSource = \"rangeService\", dispatchWrapperEvents, wrapperEventSource = \"deleteKey\" } = params;\n    if (dispatchWrapperEvents) {\n      const startEvent = {\n        type: \"rangeDeleteStart\",\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(startEvent);\n    }\n    if (!cellRanges) {\n      cellRanges = this.cellRanges;\n    }\n    cellRanges.forEach((cellRange) => {\n      this.forEachRowInRange(cellRange, (rowPosition) => {\n        const rowNode = this.rowPositionUtils.getRowNode(rowPosition);\n        if (!rowNode) {\n          return;\n        }\n        for (let i = 0; i < cellRange.columns.length; i++) {\n          const column = this.columnModel.getCol(cellRange.columns[i]);\n          if (!column || !column.isCellEditable(rowNode)) {\n            continue;\n          }\n          const emptyValue = this.valueService.parseValue(column, rowNode, \"\", rowNode.getValueFromValueService(column)) ?? null;\n          rowNode.setDataValue(column, emptyValue, cellEventSource);\n        }\n      });\n    });\n    if (dispatchWrapperEvents) {\n      const endEvent = {\n        type: \"rangeDeleteEnd\",\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(endEvent);\n    }\n  }\n  createCellRangeFromCellRangeParams(params) {\n    return this.createPartialCellRangeFromRangeParams(params, false);\n  }\n  // Range service can't normally support a range without columns, but charts can\n  createPartialCellRangeFromRangeParams(params, allowEmptyColumns) {\n    let columns;\n    let startsOnTheRight = false;\n    if (params.columns) {\n      columns = params.columns.map((c) => this.columnModel.getCol(c)).filter((c) => c);\n    } else {\n      const columnStart = this.columnModel.getCol(params.columnStart);\n      const columnEnd = this.columnModel.getCol(params.columnEnd);\n      if (!columnStart || !columnEnd) {\n        return;\n      }\n      columns = this.calculateColumnsBetween(columnStart, columnEnd);\n      if (columns && columns.length) {\n        startsOnTheRight = columns[0] !== columnStart;\n      }\n    }\n    if (!columns || !allowEmptyColumns && columns.length === 0) {\n      return;\n    }\n    const startRow = params.rowStartIndex != null ? {\n      rowIndex: params.rowStartIndex,\n      rowPinned: params.rowStartPinned || null\n    } : void 0;\n    const endRow = params.rowEndIndex != null ? {\n      rowIndex: params.rowEndIndex,\n      rowPinned: params.rowEndPinned || null\n    } : void 0;\n    return {\n      startRow,\n      endRow,\n      columns,\n      startColumn: startsOnTheRight ? _last(columns) : columns[0]\n    };\n  }\n  addCellRange(params) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const newRange = this.createCellRangeFromCellRangeParams(params);\n    if (newRange) {\n      if (newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.startColumn\n        });\n      }\n      this.cellRanges.push(newRange);\n      this.dispatchChangedEvent(false, true, newRange.id);\n    }\n  }\n  getCellRanges() {\n    return this.cellRanges;\n  }\n  isEmpty() {\n    return this.cellRanges.length === 0;\n  }\n  isMoreThanOneCell() {\n    const len = this.cellRanges.length;\n    if (len === 0) {\n      return false;\n    }\n    if (len > 1) {\n      return true;\n    }\n    const range = this.cellRanges[0];\n    const startRow = this.getRangeStartRow(range);\n    const endRow = this.getRangeEndRow(range);\n    return startRow.rowPinned !== endRow.rowPinned || startRow.rowIndex !== endRow.rowIndex || range.columns.length !== 1;\n  }\n  areAllRangesAbleToMerge() {\n    const rowToColumnMap = /* @__PURE__ */ new Map();\n    const len = this.cellRanges.length;\n    if (len <= 1)\n      return true;\n    this.cellRanges.forEach((range) => {\n      this.forEachRowInRange(range, (row) => {\n        const rowName = `${row.rowPinned || \"normal\"}_${row.rowIndex}`;\n        const columns = rowToColumnMap.get(rowName);\n        const currentRangeColIds = range.columns.map((col) => col.getId());\n        if (columns) {\n          const filteredColumns = currentRangeColIds.filter((col) => columns.indexOf(col) === -1);\n          columns.push(...filteredColumns);\n        } else {\n          rowToColumnMap.set(rowName, currentRangeColIds);\n        }\n      });\n    });\n    let columnsString;\n    for (const val of rowToColumnMap.values()) {\n      const currentValString = val.sort().join();\n      if (columnsString === void 0) {\n        columnsString = currentValString;\n        continue;\n      }\n      if (columnsString !== currentValString) {\n        return false;\n      }\n    }\n    return true;\n  }\n  forEachRowInRange(cellRange, callback) {\n    const topRow = this.getRangeStartRow(cellRange);\n    const bottomRow = this.getRangeEndRow(cellRange);\n    let currentRow = topRow;\n    while (currentRow) {\n      callback(currentRow);\n      if (this.rowPositionUtils.sameRow(currentRow, bottomRow)) {\n        break;\n      }\n      currentRow = this.cellNavigationService.getRowBelow(currentRow);\n    }\n  }\n  removeAllCellRanges(silent) {\n    if (this.isEmpty()) {\n      return;\n    }\n    this.onDragStop();\n    this.cellRanges.length = 0;\n    if (!silent) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n  // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n  // the selection my mimicking a new mouse event\n  onBodyScroll() {\n    if (this.dragging && this.lastMouseEvent) {\n      this.onDragging(this.lastMouseEvent);\n    }\n  }\n  isCellInAnyRange(cell) {\n    return this.getCellRangeCount(cell) > 0;\n  }\n  isCellInSpecificRange(cell, range) {\n    const columnInRange = range.columns !== null && _includes(range.columns, cell.column);\n    const rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);\n    return columnInRange && rowInRange;\n  }\n  isLastCellOfRange(cellRange, cell) {\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && cell.rowPinned === lastRow.rowPinned;\n    const rangeFirstIndexColumn = cellRange.columns[0];\n    const rangeLastIndexColumn = _last(cellRange.columns);\n    const lastRangeColumn = cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;\n    const isLastColumn = cell.column === lastRangeColumn;\n    return isLastColumn && isLastRow;\n  }\n  isBottomRightCell(cellRange, cell) {\n    const allColumns = this.visibleColsService.getAllCols();\n    const allPositions = cellRange.columns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isRightColumn = allColumns.indexOf(cell.column) === _last(allPositions);\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && _makeNull(cell.rowPinned) === _makeNull(lastRow.rowPinned);\n    return isRightColumn && isLastRow;\n  }\n  // returns the number of ranges this cell is in\n  getCellRangeCount(cell) {\n    if (this.isEmpty()) {\n      return 0;\n    }\n    return this.cellRanges.filter((cellRange) => this.isCellInSpecificRange(cell, cellRange)).length;\n  }\n  isRowInRange(rowIndex, rowPinned, cellRange) {\n    const firstRow = this.getRangeStartRow(cellRange);\n    const lastRow = this.getRangeEndRow(cellRange);\n    const thisRow = { rowIndex, rowPinned: rowPinned || null };\n    const equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;\n    const equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;\n    if (equalsFirstRow || equalsLastRow) {\n      return true;\n    }\n    const afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);\n    const beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);\n    return afterFirstRow && beforeLastRow;\n  }\n  getDraggingRange() {\n    return this.draggingRange;\n  }\n  onDragStart(mouseEvent) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n    const isMultiKey = ctrlKey || metaKey;\n    const allowMulti = !this.gos.get(\"suppressMultiRangeSelection\");\n    const isMultiSelect = allowMulti ? isMultiKey : false;\n    const extendRange = shiftKey && _existsAndNotEmpty(this.cellRanges);\n    if (!isMultiSelect && (!extendRange || _exists(_last(this.cellRanges).type))) {\n      this.removeAllCellRanges(true);\n    }\n    const startTarget = this.dragService.getStartTarget();\n    if (startTarget) {\n      this.updateValuesOnMove(startTarget);\n    }\n    if (!this.lastCellHovered) {\n      return;\n    }\n    this.dragging = true;\n    this.lastMouseEvent = mouseEvent;\n    this.intersectionRange = isMultiSelect && this.getCellRangeCount(this.lastCellHovered) > 1;\n    if (!extendRange) {\n      this.setNewestRangeStartCell(this.lastCellHovered);\n    }\n    if (this.cellRanges.length > 0) {\n      this.draggingRange = _last(this.cellRanges);\n    } else {\n      const mouseRowPosition = {\n        rowIndex: this.lastCellHovered.rowIndex,\n        rowPinned: this.lastCellHovered.rowPinned\n      };\n      this.draggingRange = {\n        startRow: mouseRowPosition,\n        endRow: mouseRowPosition,\n        columns: [this.lastCellHovered.column],\n        startColumn: this.newestRangeStartCell.column\n      };\n      this.cellRanges.push(this.draggingRange);\n    }\n    this.ctrlsService.getGridBodyCtrl().addScrollEventListener(this.bodyScrollListener);\n    this.dispatchChangedEvent(true, false, this.draggingRange.id);\n  }\n  intersectLastRange(fromMouseClick) {\n    if (fromMouseClick && this.dragging) {\n      return;\n    }\n    if (this.gos.get(\"suppressMultiRangeSelection\")) {\n      return;\n    }\n    if (this.isEmpty()) {\n      return;\n    }\n    const rowPosUtils = this.rowPositionUtils;\n    const lastRange = _last(this.cellRanges);\n    const intersectionStartRow = this.getRangeStartRow(lastRange);\n    const intersectionEndRow = this.getRangeEndRow(lastRange);\n    const newRanges = [];\n    this.cellRanges.slice(0, -1).forEach((range) => {\n      const startRow = this.getRangeStartRow(range);\n      const endRow = this.getRangeEndRow(range);\n      const cols = range.columns;\n      const intersectCols = cols.filter((col) => lastRange.columns.indexOf(col) === -1);\n      if (intersectCols.length === cols.length) {\n        newRanges.push(range);\n        return;\n      }\n      if (rowPosUtils.before(intersectionEndRow, startRow) || rowPosUtils.before(endRow, intersectionStartRow)) {\n        newRanges.push(range);\n        return;\n      }\n      const rangeCountBefore = newRanges.length;\n      if (rowPosUtils.before(startRow, intersectionStartRow)) {\n        const top = {\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: { ...startRow },\n          endRow: this.cellNavigationService.getRowAbove(intersectionStartRow)\n        };\n        newRanges.push(top);\n      }\n      if (intersectCols.length > 0) {\n        const middle = {\n          columns: intersectCols,\n          startColumn: _includes(intersectCols, lastRange.startColumn) ? lastRange.startColumn : intersectCols[0],\n          startRow: this.rowMax([{ ...intersectionStartRow }, { ...startRow }]),\n          endRow: this.rowMin([{ ...intersectionEndRow }, { ...endRow }])\n        };\n        newRanges.push(middle);\n      }\n      if (rowPosUtils.before(intersectionEndRow, endRow)) {\n        newRanges.push({\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: this.cellNavigationService.getRowBelow(intersectionEndRow),\n          endRow: { ...endRow }\n        });\n      }\n      if (newRanges.length - rangeCountBefore === 1) {\n        newRanges[newRanges.length - 1].id = range.id;\n      }\n    });\n    this.cellRanges = newRanges;\n    if (fromMouseClick) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  rowMax(rows) {\n    let max;\n    rows.forEach((row) => {\n      if (max === void 0 || this.rowPositionUtils.before(max, row)) {\n        max = row;\n      }\n    });\n    return max;\n  }\n  rowMin(rows) {\n    let min;\n    rows.forEach((row) => {\n      if (min === void 0 || this.rowPositionUtils.before(row, min)) {\n        min = row;\n      }\n    });\n    return min;\n  }\n  updateValuesOnMove(eventTarget) {\n    const cellCtrl = _getCtrlForEventTarget(this.gos, eventTarget, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    const cell = cellCtrl?.getCellPosition();\n    this.cellHasChanged = false;\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    if (this.lastCellHovered) {\n      this.cellHasChanged = true;\n    }\n    this.lastCellHovered = cell;\n  }\n  onDragging(mouseEvent) {\n    if (!this.dragging || !mouseEvent) {\n      return;\n    }\n    this.updateValuesOnMove(mouseEvent.target);\n    this.lastMouseEvent = mouseEvent;\n    const cellPosition = this.lastCellHovered;\n    const isMouseAndStartInPinned = (position) => cellPosition && cellPosition.rowPinned === position && this.newestRangeStartCell.rowPinned === position;\n    const skipVerticalScroll = isMouseAndStartInPinned(\"top\") || isMouseAndStartInPinned(\"bottom\");\n    this.autoScrollService.check(mouseEvent, skipVerticalScroll);\n    if (!this.cellHasChanged) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(\n      this.newestRangeStartCell.column,\n      cellPosition.column\n    );\n    if (!columns) {\n      return;\n    }\n    this.draggingRange.endRow = {\n      rowIndex: cellPosition.rowIndex,\n      rowPinned: cellPosition.rowPinned\n    };\n    this.draggingRange.columns = columns;\n    this.dispatchChangedEvent(false, false, this.draggingRange.id);\n  }\n  onDragStop() {\n    if (!this.dragging) {\n      return;\n    }\n    const { id } = this.draggingRange;\n    this.autoScrollService.ensureCleared();\n    this.ctrlsService.getGridBodyCtrl().removeScrollEventListener(this.bodyScrollListener);\n    this.lastMouseEvent = null;\n    this.dragging = false;\n    this.draggingRange = void 0;\n    this.lastCellHovered = void 0;\n    if (this.intersectionRange) {\n      this.intersectionRange = false;\n      this.intersectLastRange();\n    }\n    this.dispatchChangedEvent(false, true, id);\n  }\n  dispatchChangedEvent(started, finished, id) {\n    const event = {\n      type: \"rangeSelectionChanged\",\n      started,\n      finished,\n      id\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  calculateColumnsBetween(columnFrom, columnTo) {\n    const allColumns = this.visibleColsService.getAllCols();\n    const isSameColumn = columnFrom === columnTo;\n    const fromIndex = allColumns.indexOf(columnFrom);\n    const logMissing = (column) => _warnOnce(`column ${column.getId()} is not visible`);\n    if (fromIndex < 0) {\n      logMissing(columnFrom);\n      return;\n    }\n    const toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo);\n    if (toIndex < 0) {\n      logMissing(columnTo);\n      return;\n    }\n    if (isSameColumn) {\n      return [columnFrom];\n    }\n    const firstIndex = Math.min(fromIndex, toIndex);\n    const lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;\n    const columns = [];\n    for (let i = firstIndex; i <= lastIndex; i++) {\n      columns.push(allColumns[i]);\n    }\n    return columns;\n  }\n};\n\n// enterprise-modules/range-selection/src/rangeSelection/selectionHandleFactory.ts\nimport { BeanStub as BeanStub2, SelectionHandleType as SelectionHandleType4 } from \"@ag-grid-community/core\";\n\n// enterprise-modules/range-selection/src/rangeSelection/agFillHandle.ts\nimport { SelectionHandleType as SelectionHandleType2, _last as _last3, _toStringOrNull, _warnOnce as _warnOnce2 } from \"@ag-grid-community/core\";\n\n// enterprise-modules/range-selection/src/rangeSelection/abstractSelectionHandle.ts\nimport { Component, SelectionHandleType, _isVisible, _last as _last2, _setDisplayed } from \"@ag-grid-community/core\";\nvar AbstractSelectionHandle = class extends Component {\n  constructor() {\n    super(...arguments);\n    this.changedCalculatedValues = false;\n    this.dragging = false;\n    this.shouldDestroyOnEndDragging = false;\n  }\n  wireBeans(beans) {\n    this.dragService = beans.dragService;\n    this.rangeService = beans.rangeService;\n    this.mouseEventService = beans.mouseEventService;\n    this.rowPositionUtils = beans.rowPositionUtils;\n    this.cellPositionUtils = beans.cellPositionUtils;\n    this.ctrlsService = beans.ctrlsService;\n  }\n  postConstruct() {\n    this.dragService.addDragSource({\n      dragStartPixels: 0,\n      eElement: this.getGui(),\n      onDragStart: this.onDragStart.bind(this),\n      onDragging: (e) => {\n        this.dragging = true;\n        this.rangeService.autoScrollService.check(e);\n        if (this.changedCalculatedValues) {\n          this.onDrag(e);\n          this.changedCalculatedValues = false;\n        }\n      },\n      onDragStop: (e) => {\n        this.dragging = false;\n        this.onDragEnd(e);\n        this.clearValues();\n        this.rangeService.autoScrollService.ensureCleared();\n        document.body.classList.remove(this.getDraggingCssClass());\n        if (this.shouldDestroyOnEndDragging) {\n          this.destroy();\n        }\n      }\n    });\n    this.addManagedElementListeners(this.getGui(), { mousedown: this.preventRangeExtension.bind(this) });\n  }\n  isDragging() {\n    return this.dragging;\n  }\n  getCellCtrl() {\n    return this.cellCtrl;\n  }\n  setCellCtrl(cellComp) {\n    this.cellCtrl = cellComp;\n  }\n  getCellRange() {\n    return this.cellRange;\n  }\n  setCellRange(range) {\n    this.cellRange = range;\n  }\n  getRangeStartRow() {\n    return this.rangeStartRow;\n  }\n  setRangeStartRow(row) {\n    this.rangeStartRow = row;\n  }\n  getRangeEndRow() {\n    return this.rangeEndRow;\n  }\n  setRangeEndRow(row) {\n    this.rangeEndRow = row;\n  }\n  getLastCellHovered() {\n    return this.lastCellHovered;\n  }\n  preventRangeExtension(e) {\n    e.stopPropagation();\n  }\n  onDragStart(e) {\n    [this.cellHoverListener] = this.addManagedElementListeners(this.ctrlsService.get(\"gridCtrl\").getGui(), {\n      mousemove: this.updateValuesOnMove.bind(this)\n    });\n    document.body.classList.add(this.getDraggingCssClass());\n  }\n  getDraggingCssClass() {\n    return `ag-dragging-${this.type === SelectionHandleType.FILL ? \"fill\" : \"range\"}-handle`;\n  }\n  updateValuesOnMove(e) {\n    const cell = this.mouseEventService.getCellPositionForEvent(e);\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    this.lastCellHovered = cell;\n    this.changedCalculatedValues = true;\n  }\n  getType() {\n    return this.type;\n  }\n  refresh(cellCtrl) {\n    const oldCellComp = this.getCellCtrl();\n    const eGui = this.getGui();\n    const cellRange = _last2(this.rangeService.getCellRanges());\n    const start = cellRange.startRow;\n    const end = cellRange.endRow;\n    if (start && end) {\n      const isBefore = this.rowPositionUtils.before(end, start);\n      if (isBefore) {\n        this.setRangeStartRow(end);\n        this.setRangeEndRow(start);\n      } else {\n        this.setRangeStartRow(start);\n        this.setRangeEndRow(end);\n      }\n    }\n    if (oldCellComp !== cellCtrl || !_isVisible(eGui)) {\n      this.setCellCtrl(cellCtrl);\n      const eParentOfValue = cellCtrl.getComp().getParentOfValue();\n      if (eParentOfValue) {\n        eParentOfValue.appendChild(eGui);\n      }\n    }\n    this.setCellRange(cellRange);\n  }\n  clearValues() {\n    this.lastCellHovered = void 0;\n    this.removeListeners();\n  }\n  removeListeners() {\n    if (this.cellHoverListener) {\n      this.cellHoverListener();\n      this.cellHoverListener = void 0;\n    }\n  }\n  destroy() {\n    if (!this.shouldDestroyOnEndDragging && this.isDragging()) {\n      _setDisplayed(this.getGui(), false);\n      this.shouldDestroyOnEndDragging = true;\n      return;\n    }\n    this.shouldDestroyOnEndDragging = false;\n    super.destroy();\n    this.removeListeners();\n    const eGui = this.getGui();\n    if (eGui.parentElement) {\n      eGui.parentElement.removeChild(eGui);\n    }\n  }\n};\n\n// enterprise-modules/range-selection/src/rangeSelection/utils.ts\nfunction findLineByLeastSquares(values) {\n  const len = values.length;\n  let maxDecimals = 0;\n  if (len <= 1) {\n    return values;\n  }\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    const splitExponent = value.toString().split(\"e-\");\n    if (splitExponent.length > 1) {\n      maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n      continue;\n    }\n    if (Math.floor(value) === value) {\n      continue;\n    }\n    maxDecimals = Math.max(maxDecimals, value.toString().split(\".\")[1].length);\n  }\n  let sum_x = 0;\n  let sum_y = 0;\n  let sum_xy = 0;\n  let sum_xx = 0;\n  let y = 0;\n  for (let x = 0; x < len; x++) {\n    y = values[x];\n    sum_x += x;\n    sum_y += y;\n    sum_xx += x * x;\n    sum_xy += x * y;\n  }\n  const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n  const b = sum_y / len - m * sum_x / len;\n  const result = [];\n  for (let x = 0; x <= len; x++) {\n    result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n  }\n  return result;\n}\n\n// enterprise-modules/range-selection/src/rangeSelection/agFillHandle.ts\nvar AgFillHandle = class extends AbstractSelectionHandle {\n  constructor() {\n    super(\n      /* html */\n      `<div class=\"ag-fill-handle\"></div>`\n    );\n    this.markedCells = [];\n    this.cellValues = [];\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n    this.type = SelectionHandleType2.FILL;\n  }\n  wireBeans(beans) {\n    super.wireBeans(beans);\n    this.valueService = beans.valueService;\n    this.navigationService = beans.navigationService;\n    this.cellNavigationService = beans.cellNavigationService;\n    this.visibleColsService = beans.visibleColsService;\n  }\n  updateValuesOnMove(e) {\n    super.updateValuesOnMove(e);\n    if (!this.initialXY) {\n      this.initialXY = this.mouseEventService.getNormalisedPosition(e);\n    }\n    const { x, y } = this.initialXY;\n    const { x: newX, y: newY } = this.mouseEventService.getNormalisedPosition(e);\n    const diffX = Math.abs(x - newX);\n    const diffY = Math.abs(y - newY);\n    const allowedDirection = this.getFillHandleDirection();\n    let direction;\n    if (allowedDirection === \"xy\") {\n      direction = diffX > diffY ? \"x\" : \"y\";\n    } else {\n      direction = allowedDirection;\n    }\n    if (direction !== this.dragAxis) {\n      this.dragAxis = direction;\n      this.changedCalculatedValues = true;\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onDrag(_e) {\n    if (!this.initialPosition) {\n      const cellCtrl = this.getCellCtrl();\n      if (!cellCtrl) {\n        return;\n      }\n      this.initialPosition = cellCtrl.getCellPosition();\n    }\n    const lastCellHovered = this.getLastCellHovered();\n    if (lastCellHovered) {\n      this.markPathFrom(this.initialPosition, lastCellHovered);\n    }\n  }\n  onDragEnd(e) {\n    this.initialXY = null;\n    if (!this.markedCells.length) {\n      return;\n    }\n    const isX = this.dragAxis === \"x\";\n    const initialRange = this.getCellRange();\n    const colLen = initialRange.columns.length;\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    let finalRange;\n    if (!this.isUp && !this.isLeft) {\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: rangeStartRow.rowIndex,\n        rowStartPinned: rangeStartRow.rowPinned,\n        columnStart: initialRange.columns[0],\n        rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked.rowIndex,\n        rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked.rowPinned,\n        columnEnd: isX ? this.lastCellMarked.column : initialRange.columns[colLen - 1]\n      });\n    } else {\n      const startRow = isX ? rangeStartRow : this.lastCellMarked;\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: startRow.rowIndex,\n        rowStartPinned: startRow.rowPinned,\n        columnStart: isX ? this.lastCellMarked.column : initialRange.columns[0],\n        rowEndIndex: rangeEndRow.rowIndex,\n        rowEndPinned: rangeEndRow.rowPinned,\n        columnEnd: initialRange.columns[colLen - 1]\n      });\n    }\n    if (finalRange) {\n      this.raiseFillStartEvent();\n      this.handleValueChanged(initialRange, finalRange, e);\n      this.rangeService.setCellRanges([finalRange]);\n      this.raiseFillEndEvent(initialRange, finalRange);\n    }\n  }\n  getFillHandleDirection() {\n    const direction = this.gos.get(\"fillHandleDirection\");\n    if (!direction) {\n      return \"xy\";\n    }\n    if (direction !== \"x\" && direction !== \"y\" && direction !== \"xy\") {\n      _warnOnce2(`valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`);\n      return \"xy\";\n    }\n    return direction;\n  }\n  raiseFillStartEvent() {\n    const fillStartEvent = {\n      type: \"fillStart\"\n    };\n    this.eventService.dispatchEvent(fillStartEvent);\n  }\n  raiseFillEndEvent(initialRange, finalRange) {\n    const fillEndEvent = {\n      type: \"fillEnd\",\n      initialRange,\n      finalRange\n    };\n    this.eventService.dispatchEvent(fillEndEvent);\n  }\n  handleValueChanged(initialRange, finalRange, e) {\n    const initialRangeEndRow = this.rangeService.getRangeEndRow(initialRange);\n    const initialRangeStartRow = this.rangeService.getRangeStartRow(initialRange);\n    const finalRangeEndRow = this.rangeService.getRangeEndRow(finalRange);\n    const finalRangeStartRow = this.rangeService.getRangeStartRow(finalRange);\n    const isVertical = this.dragAxis === \"y\";\n    if (this.isReduce && !this.gos.get(\"suppressClearOnFillReduction\")) {\n      const columns = isVertical ? initialRange.columns : initialRange.columns.filter((col) => finalRange.columns.indexOf(col) < 0);\n      const startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n      if (startRow) {\n        this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n      }\n      return;\n    }\n    const values = [];\n    const initialValues = [];\n    const initialNonAggregatedValues = [];\n    const initialFormattedValues = [];\n    let withinInitialRange = true;\n    let idx = 0;\n    const resetValues = () => {\n      values.length = 0;\n      initialValues.length = 0;\n      initialNonAggregatedValues.length = 0;\n      initialFormattedValues.length = 0;\n      idx = 0;\n    };\n    const iterateAcrossCells = (column, columns) => {\n      let currentRow = this.isUp ? initialRangeEndRow : initialRangeStartRow;\n      let finished = false;\n      if (isVertical) {\n        withinInitialRange = true;\n        resetValues();\n      }\n      while (!finished && currentRow) {\n        const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n        if (!rowNode) {\n          break;\n        }\n        if (isVertical && column) {\n          fillValues(values, column, rowNode, () => {\n            return !this.rowPositionUtils.sameRow(\n              currentRow,\n              this.isUp ? initialRangeStartRow : initialRangeEndRow\n            );\n          });\n        } else if (columns) {\n          withinInitialRange = true;\n          resetValues();\n          columns.forEach(\n            (col) => fillValues(\n              values,\n              col,\n              rowNode,\n              () => col !== (this.isLeft ? initialRange.columns[0] : _last3(initialRange.columns))\n            )\n          );\n        }\n        finished = this.rowPositionUtils.sameRow(currentRow, this.isUp ? finalRangeStartRow : finalRangeEndRow);\n        currentRow = this.isUp ? this.cellNavigationService.getRowAbove(currentRow) : this.cellNavigationService.getRowBelow(currentRow);\n      }\n    };\n    const fillValues = (currentValues, col, rowNode, updateInitialSet) => {\n      let currentValue;\n      let skipValue = false;\n      if (withinInitialRange) {\n        currentValue = this.valueService.getValue(col, rowNode);\n        initialValues.push(currentValue);\n        initialNonAggregatedValues.push(this.valueService.getValue(col, rowNode, void 0, true));\n        initialFormattedValues.push(this.valueService.formatValue(col, rowNode, currentValue));\n        withinInitialRange = updateInitialSet();\n      } else {\n        const { value, fromUserFunction, sourceCol, sourceRowNode } = this.processValues({\n          event: e,\n          values: currentValues,\n          initialValues,\n          initialNonAggregatedValues,\n          initialFormattedValues,\n          col,\n          rowNode,\n          idx: idx++\n        });\n        currentValue = value;\n        if (col.isCellEditable(rowNode)) {\n          const cellValue = this.valueService.getValue(col, rowNode);\n          if (!fromUserFunction) {\n            if (sourceCol && sourceCol.getColDef()?.useValueFormatterForExport !== false) {\n              currentValue = this.valueService.formatValue(sourceCol, sourceRowNode, currentValue) ?? currentValue;\n            }\n            if (col.getColDef().useValueParserForImport !== false) {\n              currentValue = this.valueService.parseValue(\n                col,\n                rowNode,\n                // if no sourceCol, then currentValue is a number\n                sourceCol ? currentValue : _toStringOrNull(currentValue),\n                cellValue\n              );\n            }\n          }\n          if (!fromUserFunction || cellValue !== currentValue) {\n            rowNode.setDataValue(col, currentValue, \"rangeService\");\n          } else {\n            skipValue = true;\n          }\n        }\n      }\n      if (!skipValue) {\n        currentValues.push({\n          value: currentValue,\n          column: col,\n          rowNode\n        });\n      }\n    };\n    if (isVertical) {\n      initialRange.columns.forEach((col) => {\n        iterateAcrossCells(col);\n      });\n    } else {\n      const columns = this.isLeft ? [...finalRange.columns].reverse() : finalRange.columns;\n      iterateAcrossCells(void 0, columns);\n    }\n  }\n  clearCellsInRange(startRow, endRow, columns) {\n    const cellRange = {\n      startRow,\n      endRow,\n      columns,\n      startColumn: columns[0]\n    };\n    this.rangeService.clearCellRangeCellValues({ cellRanges: [cellRange] });\n  }\n  processValues(params) {\n    const { event, values, initialValues, initialNonAggregatedValues, initialFormattedValues, col, rowNode, idx } = params;\n    const userFillOperation = this.gos.getCallback(\"fillOperation\");\n    const isVertical = this.dragAxis === \"y\";\n    let direction;\n    if (isVertical) {\n      direction = this.isUp ? \"up\" : \"down\";\n    } else {\n      direction = this.isLeft ? \"left\" : \"right\";\n    }\n    if (userFillOperation) {\n      const params2 = {\n        event,\n        values: values.map(({ value }) => value),\n        initialValues,\n        initialNonAggregatedValues,\n        initialFormattedValues,\n        currentIndex: idx,\n        currentCellValue: this.valueService.getValue(col, rowNode),\n        direction,\n        column: col,\n        rowNode\n      };\n      const userResult = userFillOperation(params2);\n      if (userResult !== false) {\n        return { value: userResult, fromUserFunction: true };\n      }\n    }\n    const allNumbers = !values.some(({ value }) => {\n      const asFloat = parseFloat(value);\n      return isNaN(asFloat) || asFloat.toString() !== value.toString();\n    });\n    if (event.altKey || !allNumbers) {\n      if (allNumbers && initialValues.length === 1) {\n        const multiplier = this.isUp || this.isLeft ? -1 : 1;\n        return { value: parseFloat(_last3(values).value) + 1 * multiplier, fromUserFunction: false };\n      }\n      const { value, column: sourceCol, rowNode: sourceRowNode } = values[idx % values.length];\n      return { value, fromUserFunction: false, sourceCol, sourceRowNode };\n    }\n    return {\n      value: _last3(findLineByLeastSquares(values.map(({ value }) => Number(value)))),\n      fromUserFunction: false\n    };\n  }\n  clearValues() {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    this.lastCellMarked = void 0;\n    super.clearValues();\n  }\n  clearMarkedPath() {\n    this.markedCells.forEach((cell) => {\n      if (!cell.isAlive()) {\n        return;\n      }\n      const comp = cell.getComp();\n      comp.addOrRemoveCssClass(\"ag-selection-fill-top\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-right\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-bottom\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-left\", false);\n    });\n    this.markedCells.length = 0;\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n  }\n  clearCellValues() {\n    this.cellValues.length = 0;\n  }\n  markPathFrom(initialPosition, currentPosition) {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    if (this.dragAxis === \"y\") {\n      if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {\n        return;\n      }\n      const isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n      const rangeStartRow = this.getRangeStartRow();\n      const rangeEndRow = this.getRangeEndRow();\n      if (isBefore && (currentPosition.rowPinned == rangeStartRow.rowPinned && currentPosition.rowIndex >= rangeStartRow.rowIndex || rangeStartRow.rowPinned != rangeEndRow.rowPinned && currentPosition.rowPinned == rangeEndRow.rowPinned && currentPosition.rowIndex <= rangeEndRow.rowIndex)) {\n        this.reduceVertical(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendVertical(initialPosition, currentPosition, isBefore);\n        this.isReduce = false;\n      }\n    } else {\n      const initialColumn = initialPosition.column;\n      const currentColumn = currentPosition.column;\n      if (initialColumn === currentColumn) {\n        return;\n      }\n      const displayedColumns = this.visibleColsService.getAllCols();\n      const initialIndex = displayedColumns.indexOf(initialColumn);\n      const currentIndex = displayedColumns.indexOf(currentColumn);\n      if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {\n        this.reduceHorizontal(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n        this.isReduce = false;\n      }\n    }\n    this.lastCellMarked = currentPosition;\n  }\n  extendVertical(initialPosition, endPosition, isMovingUp) {\n    const { navigationService, rangeService } = this;\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      for (let i = 0; i < colLen; i++) {\n        const column = cellRange.columns[i];\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const cellPos = { ...rowPos, column };\n        const cellInRange = rangeService.isCellInSpecificRange(cellPos, cellRange);\n        const isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n        if (isMovingUp) {\n          this.isUp = true;\n        }\n        if (!isInitialRow) {\n          const cell = navigationService.getCellByPosition(cellPos);\n          if (cell) {\n            this.markedCells.push(cell);\n            const cellCtrl = cell.getComp();\n            if (!cellInRange) {\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-left\", i === 0);\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-right\", i === colLen - 1);\n            }\n            cellCtrl.addOrRemoveCssClass(\n              isMovingUp ? \"ag-selection-fill-top\" : \"ag-selection-fill-bottom\",\n              this.rowPositionUtils.sameRow(row, endPosition)\n            );\n          }\n        }\n      }\n      if (this.rowPositionUtils.sameRow(row, endPosition)) {\n        break;\n      }\n    } while (\n      // tslint:disable-next-line\n      row = isMovingUp ? this.cellNavigationService.getRowAbove(row) : this.cellNavigationService.getRowBelow(row)\n    );\n  }\n  reduceVertical(initialPosition, endPosition) {\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      const isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n      for (let i = 0; i < colLen; i++) {\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const celPos = { ...rowPos, column: cellRange.columns[i] };\n        const cell = this.navigationService.getCellByPosition(celPos);\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\n            \"ag-selection-fill-bottom\",\n            this.rowPositionUtils.sameRow(row, endPosition)\n          );\n        }\n      }\n      if (isLastRow) {\n        break;\n      }\n    } while (row = this.cellNavigationService.getRowAbove(row));\n  }\n  extendHorizontal(initialPosition, endPosition, isMovingLeft) {\n    const allCols = this.visibleColsService.getAllCols();\n    const startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);\n    const endCol = allCols.indexOf(\n      isMovingLeft ? this.getCellRange().columns[0] : endPosition.column\n    );\n    const offset = isMovingLeft ? 0 : 1;\n    const colsToMark = allCols.slice(startCol + offset, endCol + offset);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\n            \"ag-selection-fill-top\",\n            this.rowPositionUtils.sameRow(row, rangeStartRow)\n          );\n          cellComp.addOrRemoveCssClass(\n            \"ag-selection-fill-bottom\",\n            this.rowPositionUtils.sameRow(row, rangeEndRow)\n          );\n          if (isMovingLeft) {\n            this.isLeft = true;\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-left\", column === colsToMark[0]);\n          } else {\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === _last3(colsToMark));\n          }\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  reduceHorizontal(initialPosition, endPosition) {\n    const allCols = this.visibleColsService.getAllCols();\n    const startCol = allCols.indexOf(endPosition.column);\n    const endCol = allCols.indexOf(initialPosition.column);\n    const colsToMark = allCols.slice(startCol, endCol);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === colsToMark[0]);\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  refresh(cellCtrl) {\n    const cellRange = this.rangeService.getCellRanges()[0];\n    const isColumnRange = !cellRange.startRow || !cellRange.endRow;\n    if (isColumnRange) {\n      this.destroy();\n      return;\n    }\n    super.refresh(cellCtrl);\n  }\n};\n\n// enterprise-modules/range-selection/src/rangeSelection/agRangeHandle.ts\nimport { CellRangeType, SelectionHandleType as SelectionHandleType3, _last as _last4 } from \"@ag-grid-community/core\";\nvar AgRangeHandle = class extends AbstractSelectionHandle {\n  constructor() {\n    super(\n      /* html */\n      `<div class=\"ag-range-handle\"></div>`\n    );\n    this.type = SelectionHandleType3.RANGE;\n    this.rangeFixed = false;\n  }\n  onDrag(e) {\n    const lastCellHovered = this.getLastCellHovered();\n    if (!lastCellHovered) {\n      return;\n    }\n    const cellRanges = this.rangeService.getCellRanges();\n    const lastRange = _last4(cellRanges);\n    if (!this.rangeFixed) {\n      this.fixRangeStartEnd(lastRange);\n      this.rangeFixed = true;\n    }\n    this.endPosition = {\n      rowIndex: lastCellHovered.rowIndex,\n      rowPinned: lastCellHovered.rowPinned,\n      column: lastCellHovered.column\n    };\n    if (cellRanges.length === 2 && cellRanges[0].type === CellRangeType.DIMENSION && lastRange.type === CellRangeType.VALUE) {\n      const rowChanged = !this.rowPositionUtils.sameRow(\n        this.endPosition,\n        this.rangeService.getRangeEndRow(lastRange)\n      );\n      if (rowChanged) {\n        this.rangeService.updateRangeEnd(\n          cellRanges[0],\n          {\n            ...this.endPosition,\n            column: cellRanges[0].columns[0]\n          },\n          true\n        );\n      }\n    }\n    this.rangeService.extendLatestRangeToCell(this.endPosition);\n  }\n  onDragEnd(e) {\n    const cellRange = _last4(this.rangeService.getCellRanges());\n    this.fixRangeStartEnd(cellRange);\n    this.rangeFixed = false;\n  }\n  fixRangeStartEnd(cellRange) {\n    const startRow = this.rangeService.getRangeStartRow(cellRange);\n    const endRow = this.rangeService.getRangeEndRow(cellRange);\n    const column = cellRange.columns[0];\n    cellRange.startRow = startRow;\n    cellRange.endRow = endRow;\n    cellRange.startColumn = column;\n  }\n};\n\n// enterprise-modules/range-selection/src/rangeSelection/selectionHandleFactory.ts\nvar SelectionHandleFactory = class extends BeanStub2 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"selectionHandleFactory\";\n  }\n  createSelectionHandle(type) {\n    return this.createBean(type === SelectionHandleType4.RANGE ? new AgRangeHandle() : new AgFillHandle());\n  }\n};\n\n// enterprise-modules/range-selection/src/version.ts\nvar VERSION = \"32.0.0\";\n\n// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nvar RangeSelectionCoreModule = {\n  version: VERSION,\n  moduleName: `${ModuleNames.RangeSelectionModule}-core`,\n  beans: [RangeService, SelectionHandleFactory],\n  dependantModules: [EnterpriseCoreModule]\n};\nvar RangeSelectionApiModule = {\n  version: VERSION,\n  moduleName: `${ModuleNames.RangeSelectionModule}-api`,\n  apiFunctions: {\n    getCellRanges,\n    addCellRange,\n    clearRangeSelection\n  },\n  dependantModules: [RangeSelectionCoreModule]\n};\nvar RangeSelectionModule = {\n  version: VERSION,\n  moduleName: ModuleNames.RangeSelectionModule,\n  dependantModules: [RangeSelectionCoreModule, RangeSelectionApiModule]\n};\nexport {\n  RangeSelectionModule\n};\n"],
  "mappings": "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",
  "names": ["ModuleNames", "EnterpriseCoreModule", "getCellRanges", "beans", "addCellRange", "params", "clearRangeSelection", "AutoScrollService", "BeanStub", "CellCtrl", "_areEqual", "_exists", "_existsAndNotEmpty", "_getCtrlForEventTarget", "_includes", "_last", "_makeNull", "_missing", "_shallowCompare", "_warnOnce", "RangeService", "onColumnsChanged", "removeAllCellRanges", "refreshLastRangeStart", "p", "gridBodyCtrl", "position", "allColumns", "cellRange", "beforeCols", "col", "countBefore", "range", "lastRange", "rangeColumns", "allPositions", "c", "a", "b", "pinnedBottomRowCount", "cell", "appendRange", "columns", "rowForCell", "cellPosition", "silent", "endColumn", "colsToAdd", "startColumn", "moveColInCellRange", "colToMove", "moveToFront", "otherCols", "left", "right", "allIndices", "i", "event", "key", "ctrlKey", "startCell", "firstCol", "lastCol", "endCellIndex", "endCellFloating", "endCell", "newEndCell", "cellRanges", "newRange", "cellEventSource", "dispatchWrapperEvents", "wrapperEventSource", "startEvent", "rowPosition", "rowNode", "column", "emptyValue", "endEvent", "allowEmptyColumns", "startsOnTheRight", "columnStart", "columnEnd", "startRow", "endRow", "len", "rowToColumnMap", "row", "rowName", "currentRangeColIds", "filteredColumns", "columnsString", "val", "currentValString", "callback", "topRow", "bottomRow", "currentRow", "columnInRange", "rowInRange", "lastRow", "isLastRow", "rangeFirstIndexColumn", "rangeLastIndexColumn", "lastRangeColumn", "isRightColumn", "rowIndex", "rowPinned", "firstRow", "thisRow", "equalsFirstRow", "equalsLastRow", "afterFirstRow", "beforeLastRow", "mouseEvent", "metaKey", "shiftKey", "isMultiKey", "isMultiSelect", "extendRange", "startTarget", "mouseRowPosition", "fromMouseClick", "rowPosUtils", "intersectionStartRow", "intersectionEndRow", "newRanges", "cols", "intersectCols", "rangeCountBefore", "top", "middle", "rows", "max", "min", "eventTarget", "isMouseAndStartInPinned", "skipVerticalScroll", "id", "started", "finished", "columnFrom", "columnTo", "isSameColumn", "fromIndex", "logMissing", "toIndex", "firstIndex", "lastIndex", "BeanStub2", "SelectionHandleType4", "SelectionHandleType2", "_last3", "_toStringOrNull", "_warnOnce2", "Component", "SelectionHandleType", "_isVisible", "_last2", "_setDisplayed", "AbstractSelectionHandle", "cellComp", "cellCtrl", "oldCellComp", "eGui", "start", "end", "eParentOfValue", "findLineByLeastSquares", "values", "maxDecimals", "value", "splitExponent", "sum_x", "sum_y", "sum_xy", "sum_xx", "y", "x", "m", "result", "AgFillHandle", "newX", "newY", "diffX", "diffY", "allowedDirection", "direction", "_e", "lastCellHovered", "isX", "initialRange", "colLen", "rangeStartRow", "rangeEndRow", "finalRange", "fillStartEvent", "fillEndEvent", "e", "initialRangeEndRow", "initialRangeStartRow", "finalRangeEndRow", "finalRangeStartRow", "isVertical", "initialValues", "initialNonAggregatedValues", "initialFormattedValues", "withinInitialRange", "idx", "resetValues", "iterateAcrossCells", "fillValues", "currentValues", "updateInitialSet", "currentValue", "skipValue", "fromUserFunction", "sourceCol", "sourceRowNode", "cellValue", "userFillOperation", "params2", "userResult", "allNumbers", "asFloat", "multiplier", "comp", "initialPosition", "currentPosition", "isBefore", "initialColumn", "currentColumn", "displayedColumns", "initialIndex", "currentIndex", "endPosition", "isMovingUp", "navigationService", "rangeService", "cellPos", "cellInRange", "isInitialRow", "celPos", "isMovingLeft", "allCols", "startCol", "endCol", "offset", "colsToMark", "CellRangeType", "SelectionHandleType3", "_last4", "AgRangeHandle", "SelectionHandleFactory", "type", "VERSION", "RangeSelectionCoreModule", "RangeSelectionApiModule", "RangeSelectionModule"]
}
