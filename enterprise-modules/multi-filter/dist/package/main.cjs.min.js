var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__export=(l,e)=>{for(var t in e)__defProp(l,t,{get:e[t],enumerable:!0})},__copyProps=(l,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of __getOwnPropNames(e))!__hasOwnProp.call(l,s)&&s!==t&&__defProp(l,s,{get:()=>e[s],enumerable:!(i=__getOwnPropDesc(e,s))||i.enumerable});return l},__toCommonJS=l=>__copyProps(__defProp({},"__esModule",{value:!0}),l),main_exports={};__export(main_exports,{MultiFilter:()=>MultiFilter,MultiFilterModule:()=>MultiFilterModule}),module.exports=__toCommonJS(main_exports);var import_core4=require("@ag-grid-community/core"),import_core5=require("@ag-grid-enterprise/core"),import_core=require("@ag-grid-community/core"),import_core2=require("@ag-grid-enterprise/core"),MultiFilter=class g extends import_core.TabGuardComp{constructor(){super('<div class="ag-multi-filter ag-menu-list-compact"></div>'),this.filterDefs=[],this.filters=[],this.guiDestroyFuncs=[],this.filterGuis=[],this.activeFilterIndices=[],this.lastActivatedMenuItem=null,this.afterFiltersReadyFuncs=[]}wireBeans(e){this.filterManager=e.filterManager,this.userComponentFactory=e.userComponentFactory,this.focusService=e.focusService}postConstruct(){this.initialiseTabGuard({onFocusIn:e=>this.onFocusIn(e)})}static getFilterDefs(e){const{filters:t}=e;return t&&t.length>0?t:[{filter:"agTextColumnFilter"},{filter:"agSetColumnFilter"}]}init(e){this.params=e,this.filterDefs=g.getFilterDefs(e);const{column:t,filterChangedCallback:i}=e;this.column=t,this.filterChangedCallback=i;const s=[];return this.filterDefs.forEach((r,n)=>{const o=this.createFilter(r,n);o!=null&&s.push(o)}),new import_core.AgPromise(r=>{import_core.AgPromise.all(s).then(n=>{this.filters=n,this.refreshGui("columnMenu").then(()=>{r()})})}).then(()=>{this.afterFiltersReadyFuncs.forEach(r=>r()),this.afterFiltersReadyFuncs.length=0})}refreshGui(e){return e===this.lastOpenedInContainer?import_core.AgPromise.resolve():(this.tabGuardFeature.removeAllChildrenExceptTabGuards(),this.destroyChildren(),import_core.AgPromise.all(this.filters.map((t,i)=>{const s=this.filterDefs[i],r=this.getFilterTitle(t,s);let n;if(s.display==="subMenu"&&e!=="toolPanel")n=this.insertFilterMenu(t,r).then(o=>o.getGui());else if(s.display==="subMenu"||s.display==="accordion"){const o=this.insertFilterGroup(t,r);n=import_core.AgPromise.resolve(o.getGui())}else n=import_core.AgPromise.resolve(t.getGui());return n})).then(t=>{t.forEach((i,s)=>{s>0&&this.appendChild((0,import_core._loadTemplate)('<div class="ag-filter-separator"></div>')),this.appendChild(i)}),this.filterGuis=t,this.lastOpenedInContainer=e}))}getFilterTitle(e,t){return t.title!=null?t.title:e instanceof import_core.ProvidedFilter?e.getFilterTitle():"Filter"}destroyChildren(){this.guiDestroyFuncs.forEach(e=>e()),this.guiDestroyFuncs.length=0,this.filterGuis.length=0}insertFilterMenu(e,t){const i=this.createBean(new import_core2.AgMenuItemComponent);return i.init({menuItemDef:{name:t,subMenu:[],cssClasses:["ag-multi-filter-menu-item"],menuItem:import_core2.AgMenuItemRenderer,menuItemParams:{cssClassPrefix:"ag-compact-menu-option",isCompact:!0}},level:0,isAnotherSubMenuOpen:()=>!1,childComponent:e,contextParams:{column:null,node:null,value:null}}).then(()=>{i.setParentComponent(this),this.guiDestroyFuncs.push(()=>this.destroyBean(i)),this.addManagedListeners(i,{menuItemActivated:r=>{this.lastActivatedMenuItem&&this.lastActivatedMenuItem!==r.menuItem&&this.lastActivatedMenuItem.deactivate(),this.lastActivatedMenuItem=r.menuItem}});const s=i.getGui();return i.addManagedElementListeners(s,{keydown:r=>{const{key:n}=r;switch(n){case import_core.KeyCode.UP:case import_core.KeyCode.RIGHT:case import_core.KeyCode.DOWN:case import_core.KeyCode.LEFT:r.preventDefault(),n===import_core.KeyCode.RIGHT&&i.openSubMenu(!0);break}},focusin:()=>i.activate(),focusout:()=>{!i.isSubMenuOpen()&&!i.isSubMenuOpening()&&i.deactivate()}}),i})}insertFilterGroup(e,t){const i=this.createBean(new import_core2.AgGroupComponent({title:t,cssIdentifier:"multi-filter"}));return this.guiDestroyFuncs.push(()=>this.destroyBean(i)),i.addItem(e.getGui()),i.toggleGroupExpand(!1),e.afterGuiAttached&&i.addManagedListeners(i,{expanded:()=>e.afterGuiAttached({container:this.lastOpenedInContainer,suppressFocus:!0,hidePopup:this.hidePopup})}),i}isFilterActive(){return this.filters.some(e=>e.isFilterActive())}getLastActiveFilterIndex(){return this.activeFilterIndices.length>0?this.activeFilterIndices[this.activeFilterIndices.length-1]:null}doesFilterPass(e,t){let i=!0;return this.filters.forEach(s=>{!i||s===t||!s.isFilterActive()||(i=s.doesFilterPass(e))}),i}getFilterType(){return"multi"}getModelFromUi(){return{filterType:this.getFilterType(),filterModels:this.filters.map(t=>{const i=t;return typeof i.getModelFromUi=="function"?i.getModelFromUi():null})}}getModel(){return this.isFilterActive()?{filterType:this.getFilterType(),filterModels:this.filters.map(t=>t.isFilterActive()?t.getModel():null)}:null}setModel(e){const t=(s,r)=>new import_core.AgPromise(n=>{const o=s.setModel(r);o?o.then(()=>n()):n()});let i=[];return e==null?i=this.filters.map((s,r)=>t(s,null).then(()=>{this.updateActiveList(r)})):this.filters.forEach((s,r)=>{const n=e.filterModels.length>r?e.filterModels[r]:null,o=t(s,n).then(()=>{this.updateActiveList(r)});i.push(o)}),import_core.AgPromise.all(i).then(()=>{})}applyModel(e="api"){let t=!1;return this.filters.forEach(i=>{i instanceof import_core.ProvidedFilter&&(t=i.applyModel(e)||t)}),t}getChildFilterInstance(e){return this.filters[e]}afterGuiAttached(e){let t;e?(this.hidePopup=e.hidePopup,t=this.refreshGui(e.container)):(this.hidePopup=void 0,t=import_core.AgPromise.resolve());const i=e?.suppressFocus;t.then(()=>{const{filterDefs:s}=this;let r=!!i;s&&(0,import_core._forEachReverse)(s,(u,a)=>{const c=a===0,d=u.display&&u.display!=="inline",f=i||!c||d,m={...e??{},suppressFocus:f},p=this.filters?.[a];if(p&&(this.executeFunctionIfExistsOnFilter(p,"afterGuiAttached",m),c&&!f&&(r=!0)),!i&&c&&d){const h=this.filterGuis[a];h&&(this.focusService.focusInto(h)||h.focus(),r=!0)}});const n=this.gos.getDocument(),o=this.gos.getActiveDomElement();!r&&(!o||o===n.body||this.getGui().contains(o))&&this.forceFocusOutOfContainer(!0)})}afterGuiDetached(){this.executeFunctionIfExists("afterGuiDetached")}onAnyFilterChanged(){this.executeFunctionIfExists("onAnyFilterChanged")}onNewRowsLoaded(){this.executeFunctionIfExists("onNewRowsLoaded")}destroy(){this.filters.forEach(e=>this.destroyBean(e)),this.filters.length=0,this.destroyChildren(),this.hidePopup=void 0,super.destroy()}executeFunctionIfExists(e,...t){(0,import_core._forEachReverse)(this.filters,i=>{this.executeFunctionIfExistsOnFilter(i,e,t)})}executeFunctionIfExistsOnFilter(e,t,...i){const s=e[t];typeof s=="function"&&s.apply(e,i)}createFilter(e,t){const{filterModifiedCallback:i,doesRowPassOtherFilter:s}=this.params;let r;const n={...this.filterManager.createFilterParams(this.column,this.column.getColDef()),filterModifiedCallback:i,filterChangedCallback:a=>{this.executeWhenAllFiltersReady(()=>this.filterChanged(t,a))},doesRowPassOtherFilter:a=>s(a)&&this.doesFilterPass({node:a,data:a.data},r)},o=this.userComponentFactory.getFilterDetails(e,n,"agTextColumnFilter");if(!o)return null;const u=o.newAgStackInstance();return u&&u.then(a=>r=a),u}executeWhenAllFiltersReady(e){this.filters&&this.filters.length>0?e():this.afterFiltersReadyFuncs.push(e)}updateActiveList(e){const t=this.filters[e];(0,import_core._removeFromArray)(this.activeFilterIndices,e),t.isFilterActive()&&this.activeFilterIndices.push(e)}filterChanged(e,t){this.updateActiveList(e),this.filterChangedCallback(t);const i=this.filters[e];this.filters.forEach(s=>{s!==i&&typeof s.onAnyFilterChanged=="function"&&s.onAnyFilterChanged()})}onFocusIn(e){this.lastActivatedMenuItem!=null&&!this.lastActivatedMenuItem.getGui().contains(e.target)&&(this.lastActivatedMenuItem.deactivate(),this.lastActivatedMenuItem=null)}getModelAsString(e){if(!this.filters||!e?.filterModels?.length)return"";const t=this.getLastActiveFilterIndex()??0;return this.filters[t].getModelAsString?.(e.filterModels[t])??""}},import_core3=require("@ag-grid-community/core"),MultiFloatingFilterComp=class extends import_core3.Component{constructor(){super('<div class="ag-multi-floating-filter ag-floating-filter-input"></div>'),this.floatingFilters=[],this.compDetailsList=[]}wireBeans(l){this.userComponentFactory=l.userComponentFactory,this.filterManager=l.filterManager}init(l){this.params=l;const{compDetailsList:e}=this.getCompDetailsList(l);return this.setParams(e)}setParams(l){const e=[];return l.forEach(t=>{const i=t?.newAgStackInstance();i!=null&&(this.compDetailsList.push(t),e.push(i))}),import_core3.AgPromise.all(e).then(t=>{t.forEach((i,s)=>{this.floatingFilters.push(i);const r=i.getGui();this.appendChild(r),s>0&&(0,import_core3._setDisplayed)(r,!1)})})}onParamsUpdated(l){this.refresh(l)}refresh(l){this.params=l;const{compDetailsList:e,floatingFilterParamsList:t}=this.getCompDetailsList(l);e.length===this.compDetailsList.length&&e.every((s,r)=>!this.filterManager?.areFilterCompsDifferent(this.compDetailsList[r],s))?t.forEach((s,r)=>{const n=this.floatingFilters[r];let o=!1;n.refresh&&n.refresh(s)!==null&&(o=!0),o||n.onParamsUpdated?.(s)}):((0,import_core3._clearElement)(this.getGui()),this.destroyBeans(this.floatingFilters),this.floatingFilters=[],this.compDetailsList=[],this.setParams(e))}getCompDetailsList(l){const e=[],t=[],i=l.filterParams;return MultiFilter.getFilterDefs(i).forEach((s,r)=>{const n={...l,parentFilterInstance:u=>{this.parentMultiFilterInstance(a=>{const c=a.getChildFilterInstance(r);c!=null&&u(c)})}};(0,import_core3._mergeDeep)(n.filterParams,s.filterParams);const o=this.getCompDetails(s,n);o&&(e.push(o),t.push(n))}),{compDetailsList:e,floatingFilterParamsList:t}}onParentModelChanged(l,e){e&&e.afterFloatingFilter||this.parentMultiFilterInstance(t=>{if(l==null)this.floatingFilters.forEach((i,s)=>{i.onParentModelChanged(null,e),(0,import_core3._setDisplayed)(i.getGui(),s===0)});else{const i=t.getLastActiveFilterIndex();this.floatingFilters.forEach((s,r)=>{const n=l.filterModels.length>r?l.filterModels[r]:null;s.onParentModelChanged(n,e);const o=i==null?r===0:r===i;(0,import_core3._setDisplayed)(s.getGui(),o)})}})}destroy(){this.destroyBeans(this.floatingFilters),this.floatingFilters.length=0,super.destroy()}getCompDetails(l,e){const t=(0,import_core3.getDefaultFloatingFilterType)(this.frameworkOverrides,l,()=>this.filterManager.getDefaultFloatingFilter(this.params.column))??"agReadOnlyFloatingFilter";return this.userComponentFactory.getFloatingFilterCompDetails(l,e,t)}parentMultiFilterInstance(l){this.params.parentFilterInstance(e=>{if(!(e instanceof MultiFilter))throw new Error("AG Grid - MultiFloatingFilterComp expects MultiFilter as its parent");l(e)})}},VERSION="32.0.0",MultiFilterCoreModule={version:VERSION,moduleName:`${import_core4.ModuleNames.MultiFilterModule}-core`,userComponents:[{name:"agMultiColumnFilter",classImp:MultiFilter},{name:"agMenuItem",classImp:import_core5.AgMenuItemRenderer}],dependantModules:[import_core5.EnterpriseCoreModule,import_core4._ColumnFilterModule]},MultiFloatingFilterModule={version:VERSION,moduleName:"@ag-grid-enterprise/multi-floating-filter",userComponents:[{name:"agMultiColumnFloatingFilter",classImp:MultiFloatingFilterComp}],dependantModules:[MultiFilterCoreModule,import_core4._ReadOnlyFloatingFilterModule]},MultiFilterModule={version:VERSION,moduleName:import_core4.ModuleNames.MultiFilterModule,dependantModules:[MultiFilterCoreModule,MultiFloatingFilterModule]};
