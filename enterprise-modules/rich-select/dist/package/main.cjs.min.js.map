{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// enterprise-modules/rich-select/src/main.ts\nvar main_exports = {};\n__export(main_exports, {\n  RichSelectModule: () => RichSelectModule\n});\nmodule.exports = __toCommonJS(main_exports);\n\n// enterprise-modules/rich-select/src/richSelectModule.ts\nvar import_core2 = require(\"@ag-grid-community/core\");\nvar import_core3 = require(\"@ag-grid-enterprise/core\");\n\n// enterprise-modules/rich-select/src/richSelect/richSelectCellEditor.ts\nvar import_core = require(\"@ag-grid-community/core\");\nvar RichSelectCellEditor = class extends import_core.PopupComponent {\n  constructor() {\n    super(\n      /* html */\n      `<div class=\"ag-cell-edit-wrapper\"></div>`\n    );\n  }\n  init(params) {\n    this.params = params;\n    const { cellStartedEdit, cellHeight, values } = params;\n    if (import_core._.missing(values)) {\n      console.warn(\"AG Grid: agRichSelectCellEditor requires cellEditorParams.values to be set\");\n    }\n    const { params: richSelectParams, valuesPromise } = this.buildRichSelectParams();\n    this.richSelect = this.createManagedBean(new import_core.AgRichSelect(richSelectParams));\n    this.richSelect.addCssClass(\"ag-cell-editor\");\n    this.appendChild(this.richSelect);\n    if (valuesPromise) {\n      valuesPromise.then((values2) => {\n        this.richSelect.setValueList({ valueList: values2, refresh: true });\n        const searchStringCallback = this.getSearchStringCallback(values2);\n        if (searchStringCallback) {\n          this.richSelect.setSearchStringCreator(searchStringCallback);\n        }\n      });\n    }\n    this.addManagedListener(this.richSelect, import_core.Events.EVENT_FIELD_PICKER_VALUE_SELECTED, this.onEditorPickerValueSelected.bind(this));\n    this.addManagedListener(this.richSelect.getGui(), \"focusout\", this.onEditorFocusOut.bind(this));\n    this.focusAfterAttached = cellStartedEdit;\n    if (import_core._.exists(cellHeight)) {\n      this.richSelect.setRowHeight(cellHeight);\n    }\n  }\n  onEditorPickerValueSelected(e) {\n    this.params.stopEditing(!e.fromEnterKey);\n  }\n  onEditorFocusOut(e) {\n    if (this.richSelect.getGui().contains(e.relatedTarget)) {\n      return;\n    }\n    this.params.stopEditing(true);\n  }\n  buildRichSelectParams() {\n    const {\n      cellRenderer,\n      value,\n      values,\n      formatValue,\n      searchDebounceDelay,\n      valueListGap,\n      valueListMaxHeight,\n      valueListMaxWidth,\n      allowTyping,\n      filterList,\n      searchType,\n      highlightMatch,\n      valuePlaceholder,\n      eventKey\n    } = this.params;\n    const ret = {\n      value,\n      cellRenderer,\n      searchDebounceDelay,\n      valueFormatter: formatValue,\n      pickerAriaLabelKey: \"ariaLabelRichSelectField\",\n      pickerAriaLabelValue: \"Rich Select Field\",\n      pickerType: \"virtual-list\",\n      pickerGap: valueListGap,\n      allowTyping,\n      filterList,\n      searchType,\n      highlightMatch,\n      maxPickerHeight: valueListMaxHeight,\n      maxPickerWidth: valueListMaxWidth,\n      placeholder: valuePlaceholder,\n      initialInputValue: (eventKey == null ? void 0 : eventKey.length) === 1 ? eventKey : void 0\n    };\n    let valuesResult;\n    let valuesPromise;\n    if (typeof values === \"function\") {\n      valuesResult = values(this.params);\n    } else {\n      valuesResult = values != null ? values : [];\n    }\n    if (Array.isArray(valuesResult)) {\n      ret.valueList = valuesResult;\n      ret.searchStringCreator = this.getSearchStringCallback(valuesResult);\n    } else {\n      valuesPromise = valuesResult;\n    }\n    return { params: ret, valuesPromise };\n  }\n  getSearchStringCallback(values) {\n    const { colDef } = this.params;\n    if (typeof values[0] !== \"object\" || !colDef.keyCreator) {\n      return;\n    }\n    return (values2) => values2.map((value) => {\n      const keyParams = this.gos.addGridCommonParams({\n        value,\n        colDef: this.params.colDef,\n        column: this.params.column,\n        node: this.params.node,\n        data: this.params.data\n      });\n      return colDef.keyCreator(keyParams);\n    });\n  }\n  // we need to have the gui attached before we can draw the virtual rows, as the\n  // virtual row logic needs info about the gui state\n  afterGuiAttached() {\n    const { focusAfterAttached, params } = this;\n    setTimeout(() => {\n      if (!this.isAlive()) {\n        return;\n      }\n      if (focusAfterAttached) {\n        const focusableEl = this.richSelect.getFocusableElement();\n        focusableEl.focus();\n        const { allowTyping, eventKey: eventKey2 } = this.params;\n        if (allowTyping && (!eventKey2 || eventKey2.length !== 1)) {\n          focusableEl.select();\n        }\n      }\n      this.richSelect.showPicker();\n      const { eventKey } = params;\n      if (eventKey) {\n        if ((eventKey == null ? void 0 : eventKey.length) === 1) {\n          this.richSelect.searchTextFromString(eventKey);\n        }\n      }\n    });\n  }\n  getValue() {\n    return this.richSelect.getValue();\n  }\n  isPopup() {\n    return false;\n  }\n};\n\n// enterprise-modules/rich-select/src/version.ts\nvar VERSION = \"31.3.2\";\n\n// enterprise-modules/rich-select/src/richSelectModule.ts\nvar RichSelectModule = {\n  version: VERSION,\n  moduleName: import_core2.ModuleNames.RichSelectModule,\n  beans: [],\n  userComponents: [\n    { componentName: \"agRichSelect\", componentClass: RichSelectCellEditor },\n    { componentName: \"agRichSelectCellEditor\", componentClass: RichSelectCellEditor }\n  ],\n  dependantModules: [\n    import_core3.EnterpriseCoreModule\n  ]\n};\n"],
  "mappings": "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",
  "names": ["target", "all", "name", "to", "from", "except", "desc", "key", "mod", "params", "cellStartedEdit", "cellHeight", "values", "richSelectParams", "valuesPromise", "values2", "searchStringCallback", "cellRenderer", "value", "formatValue", "searchDebounceDelay", "valueListGap", "valueListMaxHeight", "valueListMaxWidth", "allowTyping", "filterList", "searchType", "highlightMatch", "valuePlaceholder", "eventKey", "ret", "valuesResult", "colDef", "keyParams", "focusAfterAttached", "focusableEl", "eventKey2"]
}
