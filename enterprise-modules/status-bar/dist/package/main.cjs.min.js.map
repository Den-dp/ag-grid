{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// enterprise-modules/status-bar/src/main.ts\nvar main_exports = {};\n__export(main_exports, {\n  StatusBarModule: () => StatusBarModule\n});\nmodule.exports = __toCommonJS(main_exports);\n\n// enterprise-modules/status-bar/src/statusBarModule.ts\nvar import_core10 = require(\"@ag-grid-community/core\");\nvar import_core11 = require(\"@ag-grid-enterprise/core\");\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/aggregationComp.ts\nvar import_core2 = require(\"@ag-grid-community/core\");\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/agNameValue.ts\nvar import_core = require(\"@ag-grid-community/core\");\nvar AgNameValue = class extends import_core.Component {\n  constructor() {\n    super(\n      /* html */\n      `<div class=\"ag-status-name-value\">\n            <span data-ref=\"eLabel\"></span>:&nbsp;\n            <span data-ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`\n    );\n    this.eLabel = import_core.RefPlaceholder;\n    this.eValue = import_core.RefPlaceholder;\n  }\n  setLabel(key, defaultValue) {\n    this.setDisplayed(false);\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n  }\n  setValue(value) {\n    this.eValue.innerHTML = value;\n  }\n};\nvar AgNameValueSelector = {\n  selector: \"AG-NAME-VALUE\",\n  component: AgNameValue\n};\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/aggregationComp.ts\nvar AggregationComp = class extends import_core2.Component {\n  constructor() {\n    super(\n      /* html */\n      `<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value data-ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`,\n      [AgNameValueSelector]\n    );\n    this.sumAggregationComp = import_core2.RefPlaceholder;\n    this.countAggregationComp = import_core2.RefPlaceholder;\n    this.minAggregationComp = import_core2.RefPlaceholder;\n    this.maxAggregationComp = import_core2.RefPlaceholder;\n    this.avgAggregationComp = import_core2.RefPlaceholder;\n  }\n  wireBeans(beans) {\n    this.valueService = beans.valueService;\n    this.cellNavigationService = beans.cellNavigationService;\n    this.rowModel = beans.rowModel;\n    this.cellPositionUtils = beans.cellPositionUtils;\n    this.rowPositionUtils = beans.rowPositionUtils;\n    this.rangeService = beans.rangeService;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n  postConstruct() {\n    if (!this.isValidRowModel()) {\n      (0, import_core2._warnOnce)(`agAggregationComponent should only be used with the client and server side row model.`);\n      return;\n    }\n    this.avgAggregationComp.setLabel(\"avg\", \"Average\");\n    this.countAggregationComp.setLabel(\"count\", \"Count\");\n    this.minAggregationComp.setLabel(\"min\", \"Min\");\n    this.maxAggregationComp.setLabel(\"max\", \"Max\");\n    this.sumAggregationComp.setLabel(\"sum\", \"Sum\");\n    this.addManagedEventListeners({\n      rangeSelectionChanged: this.onRangeSelectionChanged.bind(this),\n      modelUpdated: this.onRangeSelectionChanged.bind(this)\n    });\n  }\n  isValidRowModel() {\n    const rowModelType = this.rowModel.getType();\n    return rowModelType === \"clientSide\" || rowModelType === \"serverSide\";\n  }\n  init(params) {\n    this.params = params;\n  }\n  refresh(params) {\n    this.params = params;\n    this.onRangeSelectionChanged();\n    return true;\n  }\n  setAggregationComponentValue(aggFuncName, value, visible) {\n    const statusBarValueComponent = this.getAllowedAggregationValueComponent(aggFuncName);\n    if ((0, import_core2._exists)(statusBarValueComponent) && statusBarValueComponent) {\n      const localeTextFunc = this.localeService.getLocaleTextFunc();\n      const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n      const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n      statusBarValueComponent.setValue(\n        (0, import_core2._formatNumberTwoDecimalPlacesAndCommas)(value, thousandSeparator, decimalSeparator)\n      );\n      statusBarValueComponent.setDisplayed(visible);\n    } else {\n      this.getAggregationValueComponent(aggFuncName)?.setDisplayed(false);\n    }\n  }\n  getAllowedAggregationValueComponent(aggFuncName) {\n    const { aggFuncs } = this.params;\n    if (!aggFuncs || aggFuncs.includes(aggFuncName)) {\n      return this.getAggregationValueComponent(aggFuncName);\n    }\n    return null;\n  }\n  getAggregationValueComponent(aggFuncName) {\n    const refComponentName = `${aggFuncName}AggregationComp`;\n    return this[refComponentName];\n  }\n  onRangeSelectionChanged() {\n    const cellRanges = this.rangeService?.getCellRanges();\n    let sum = 0;\n    let count = 0;\n    let numberCount = 0;\n    let min = null;\n    let max = null;\n    const cellsSoFar = {};\n    if (cellRanges && !(0, import_core2._missingOrEmpty)(cellRanges) && this.rangeService) {\n      for (let i = 0; i < cellRanges.length; i++) {\n        const cellRange = cellRanges[i];\n        let currentRow = this.rangeService.getRangeStartRow(cellRange);\n        const lastRow = this.rangeService.getRangeEndRow(cellRange);\n        while (true) {\n          const finishedAllRows = (0, import_core2._missing)(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n          if (finishedAllRows || !currentRow || !cellRange.columns) {\n            break;\n          }\n          cellRange.columns.forEach((col) => {\n            if (currentRow === null) {\n              return;\n            }\n            const cellId = this.cellPositionUtils.createId({\n              rowPinned: currentRow.rowPinned,\n              column: col,\n              rowIndex: currentRow.rowIndex\n            });\n            if (cellsSoFar[cellId]) {\n              return;\n            }\n            cellsSoFar[cellId] = true;\n            const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n            if ((0, import_core2._missing)(rowNode)) {\n              return;\n            }\n            let value = this.valueService.getValue(col, rowNode);\n            if ((0, import_core2._missing)(value) || value === \"\") {\n              return;\n            }\n            count++;\n            if (typeof value === \"object\" && \"value\" in value) {\n              value = value.value;\n              if (value === \"\") {\n                return;\n              }\n            }\n            if (typeof value === \"string\") {\n              value = Number(value);\n            }\n            if (typeof value === \"number\" && !isNaN(value)) {\n              sum += value;\n              if (max === null || value > max) {\n                max = value;\n              }\n              if (min === null || value < min) {\n                min = value;\n              }\n              numberCount++;\n            }\n          });\n          currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n      }\n    }\n    const gotResult = count > 1;\n    const gotNumberResult = numberCount > 1;\n    this.setAggregationComponentValue(\"count\", count, gotResult);\n    this.setAggregationComponentValue(\"sum\", sum, gotNumberResult);\n    this.setAggregationComponentValue(\"min\", min, gotNumberResult);\n    this.setAggregationComponentValue(\"max\", max, gotNumberResult);\n    this.setAggregationComponentValue(\"avg\", sum / numberCount, gotNumberResult);\n  }\n};\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/filteredRowsComp.ts\nvar import_core3 = require(\"@ag-grid-community/core\");\nvar FilteredRowsComp = class extends AgNameValue {\n  wireBeans(beans) {\n    this.rowModel = beans.rowModel;\n  }\n  postConstruct() {\n    this.setLabel(\"filteredRows\", \"Filtered\");\n    if (this.rowModel.getType() !== \"clientSide\") {\n      (0, import_core3._warnOnce)(`agFilteredRowCountComponent should only be used with the client side row model.`);\n      return;\n    }\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-filtered-row-count\");\n    this.setDisplayed(true);\n    const listener = this.onDataChanged.bind(this);\n    this.addManagedEventListeners({ modelUpdated: listener });\n    listener();\n  }\n  onDataChanged() {\n    const totalRowCountValue = this.getTotalRowCountValue();\n    const filteredRowCountValue = this.getFilteredRowCountValue();\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue((0, import_core3._formatNumberCommas)(filteredRowCountValue, thousandSeparator, decimalSeparator));\n    this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n  }\n  getTotalRowCountValue() {\n    let totalRowCount = 0;\n    this.rowModel.forEachNode(() => totalRowCount += 1);\n    return totalRowCount;\n  }\n  getFilteredRowCountValue() {\n    let filteredRowCount = 0;\n    this.rowModel.forEachNodeAfterFilter((node) => {\n      if (!node.group) {\n        filteredRowCount += 1;\n      }\n    });\n    return filteredRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/selectedRowsComp.ts\nvar import_core4 = require(\"@ag-grid-community/core\");\nvar SelectedRowsComp = class extends AgNameValue {\n  wireBeans(beans) {\n    this.rowModel = beans.rowModel;\n    this.selectionService = beans.selectionService;\n  }\n  postConstruct() {\n    if (!this.isValidRowModel()) {\n      (0, import_core4._warnOnce)(`agSelectedRowCountComponent should only be used with the client and server side row model.`);\n      return;\n    }\n    this.setLabel(\"selectedRows\", \"Selected\");\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-selected-row-count\");\n    this.onRowSelectionChanged();\n    const eventListener = this.onRowSelectionChanged.bind(this);\n    this.addManagedEventListeners({ modelUpdated: eventListener, selectionChanged: eventListener });\n  }\n  isValidRowModel() {\n    const rowModelType = this.rowModel.getType();\n    return rowModelType === \"clientSide\" || rowModelType === \"serverSide\";\n  }\n  onRowSelectionChanged() {\n    const selectedRowCount = this.selectionService.getSelectionCount();\n    if (selectedRowCount < 0) {\n      this.setValue(\"?\");\n      this.setDisplayed(true);\n      return;\n    }\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue((0, import_core4._formatNumberCommas)(selectedRowCount, thousandSeparator, decimalSeparator));\n    this.setDisplayed(selectedRowCount > 0);\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/totalAndFilteredRowsComp.ts\nvar import_core5 = require(\"@ag-grid-community/core\");\nvar TotalAndFilteredRowsComp = class extends AgNameValue {\n  wireBeans(beans) {\n    this.rowModel = beans.rowModel;\n  }\n  postConstruct() {\n    if (this.rowModel.getType() !== \"clientSide\") {\n      (0, import_core5._warnOnce)(`agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n      return;\n    }\n    this.setLabel(\"totalAndFilteredRows\", \"Rows\");\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-total-and-filtered-row-count\");\n    this.setDisplayed(true);\n    this.addManagedEventListeners({ modelUpdated: this.onDataChanged.bind(this) });\n    this.onDataChanged();\n  }\n  onDataChanged() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    const rowCount = (0, import_core5._formatNumberCommas)(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n    const totalRowCount = (0, import_core5._formatNumberCommas)(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n    if (rowCount === totalRowCount) {\n      this.setValue(rowCount);\n    } else {\n      const localeTextFunc2 = this.localeService.getLocaleTextFunc();\n      this.setValue(`${rowCount} ${localeTextFunc2(\"of\", \"of\")} ${totalRowCount}`);\n    }\n  }\n  getFilteredRowCountValue() {\n    let filteredRowCount = 0;\n    this.rowModel.forEachNodeAfterFilter((node) => {\n      if (!node.group) {\n        filteredRowCount++;\n      }\n    });\n    return filteredRowCount;\n  }\n  getTotalRowCount() {\n    let totalRowCount = 0;\n    this.rowModel.forEachNode((node) => {\n      if (!node.group) {\n        totalRowCount++;\n      }\n    });\n    return totalRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/totalRowsComp.ts\nvar import_core6 = require(\"@ag-grid-community/core\");\nvar TotalRowsComp = class extends AgNameValue {\n  wireBeans(beans) {\n    this.rowModel = beans.rowModel;\n  }\n  postConstruct() {\n    this.setLabel(\"totalRows\", \"Total Rows\");\n    if (this.rowModel.getType() !== \"clientSide\") {\n      (0, import_core6._warnOnce)(\"agTotalRowCountComponent should only be used with the client side row model.\");\n      return;\n    }\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-total-row-count\");\n    this.setDisplayed(true);\n    this.addManagedEventListeners({ modelUpdated: this.onDataChanged.bind(this) });\n    this.onDataChanged();\n  }\n  onDataChanged() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue((0, import_core6._formatNumberCommas)(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n  }\n  getRowCountValue() {\n    let totalRowCount = 0;\n    this.rowModel.forEachLeafNode(() => totalRowCount += 1);\n    return totalRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n\n// enterprise-modules/status-bar/src/statusBar/statusBarApi.ts\nvar import_core7 = require(\"@ag-grid-community/core\");\nfunction getStatusPanel(beans, key) {\n  const comp = beans.statusBarService.getStatusPanel(key);\n  return (0, import_core7._unwrapUserComp)(comp);\n}\n\n// enterprise-modules/status-bar/src/statusBar/statusBarService.ts\nvar import_core9 = require(\"@ag-grid-community/core\");\n\n// enterprise-modules/status-bar/src/statusBar/agStatusBar.ts\nvar import_core8 = require(\"@ag-grid-community/core\");\nvar AgStatusBar = class extends import_core8.Component {\n  constructor() {\n    super(\n      /* html */\n      `<div class=\"ag-status-bar\">\n            <div data-ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div data-ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div data-ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`\n    );\n    this.updateQueued = false;\n    this.panelsPromise = import_core8.AgPromise.resolve();\n    this.eStatusBarLeft = import_core8.RefPlaceholder;\n    this.eStatusBarCenter = import_core8.RefPlaceholder;\n    this.eStatusBarRight = import_core8.RefPlaceholder;\n    this.compDestroyFunctions = {};\n  }\n  wireBeans(beans) {\n    this.userComponentFactory = beans.userComponentFactory;\n    this.statusBarService = beans.statusBarService;\n  }\n  postConstruct() {\n    this.processStatusPanels(/* @__PURE__ */ new Map());\n    this.addManagedPropertyListeners([\"statusBar\"], this.handleStatusBarChanged.bind(this));\n  }\n  processStatusPanels(existingStatusPanelsToReuse) {\n    const statusPanels = this.gos.get(\"statusBar\")?.statusPanels;\n    if (statusPanels) {\n      const leftStatusPanelComponents = statusPanels.filter(\n        (componentConfig) => componentConfig.align === \"left\"\n      );\n      const centerStatusPanelComponents = statusPanels.filter(\n        (componentConfig) => componentConfig.align === \"center\"\n      );\n      const rightStatusPanelComponents = statusPanels.filter(\n        (componentConfig) => !componentConfig.align || componentConfig.align === \"right\"\n      );\n      this.panelsPromise = import_core8.AgPromise.all([\n        this.createAndRenderComponents(\n          leftStatusPanelComponents,\n          this.eStatusBarLeft,\n          existingStatusPanelsToReuse\n        ),\n        this.createAndRenderComponents(\n          centerStatusPanelComponents,\n          this.eStatusBarCenter,\n          existingStatusPanelsToReuse\n        ),\n        this.createAndRenderComponents(\n          rightStatusPanelComponents,\n          this.eStatusBarRight,\n          existingStatusPanelsToReuse\n        )\n      ]);\n    } else {\n      this.setDisplayed(false);\n    }\n  }\n  handleStatusBarChanged() {\n    if (this.updateQueued) {\n      return;\n    }\n    this.updateQueued = true;\n    this.panelsPromise.then(() => {\n      this.updateStatusBar();\n      this.updateQueued = false;\n    });\n  }\n  updateStatusBar() {\n    const statusPanels = this.gos.get(\"statusBar\")?.statusPanels;\n    const validStatusBarPanelsProvided = Array.isArray(statusPanels) && statusPanels.length > 0;\n    this.setDisplayed(validStatusBarPanelsProvided);\n    const existingStatusPanelsToReuse = /* @__PURE__ */ new Map();\n    if (validStatusBarPanelsProvided) {\n      statusPanels.forEach((statusPanelConfig) => {\n        const key = statusPanelConfig.key ?? statusPanelConfig.statusPanel;\n        const existingStatusPanel = this.statusBarService.getStatusPanel(key);\n        if (existingStatusPanel?.refresh) {\n          const newParams = this.gos.addGridCommonParams(statusPanelConfig.statusPanelParams ?? {});\n          const hasRefreshed = existingStatusPanel.refresh(newParams);\n          if (hasRefreshed) {\n            existingStatusPanelsToReuse.set(key, existingStatusPanel);\n            delete this.compDestroyFunctions[key];\n            (0, import_core8._removeFromParent)(existingStatusPanel.getGui());\n          }\n        }\n      });\n    }\n    this.resetStatusBar();\n    if (validStatusBarPanelsProvided) {\n      this.processStatusPanels(existingStatusPanelsToReuse);\n    }\n  }\n  resetStatusBar() {\n    this.eStatusBarLeft.innerHTML = \"\";\n    this.eStatusBarCenter.innerHTML = \"\";\n    this.eStatusBarRight.innerHTML = \"\";\n    this.destroyComponents();\n    this.statusBarService.unregisterAllComponents();\n  }\n  destroy() {\n    this.destroyComponents();\n    super.destroy();\n  }\n  destroyComponents() {\n    Object.values(this.compDestroyFunctions).forEach((func) => func());\n    this.compDestroyFunctions = {};\n  }\n  createAndRenderComponents(statusBarComponents, ePanelComponent, existingStatusPanelsToReuse) {\n    const componentDetails = [];\n    statusBarComponents.forEach((componentConfig) => {\n      const key = componentConfig.key || componentConfig.statusPanel;\n      const existingStatusPanel = existingStatusPanelsToReuse.get(key);\n      let promise;\n      if (existingStatusPanel) {\n        promise = import_core8.AgPromise.resolve(existingStatusPanel);\n      } else {\n        const params = {};\n        const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n        promise = compDetails.newAgStackInstance();\n        if (promise == null) {\n          return;\n        }\n      }\n      componentDetails.push({\n        key,\n        promise\n      });\n    });\n    return import_core8.AgPromise.all(componentDetails.map((details) => details.promise)).then(() => {\n      componentDetails.forEach((componentDetail) => {\n        componentDetail.promise.then((component) => {\n          const destroyFunc = () => {\n            this.destroyBean(component);\n          };\n          if (this.isAlive()) {\n            this.statusBarService.registerStatusPanel(componentDetail.key, component);\n            ePanelComponent.appendChild(component.getGui());\n            this.compDestroyFunctions[componentDetail.key] = destroyFunc;\n          } else {\n            destroyFunc();\n          }\n        });\n      });\n    });\n  }\n};\nvar AgStatusBarSelector = {\n  selector: \"AG-STATUS-BAR\",\n  component: AgStatusBar\n};\n\n// enterprise-modules/status-bar/src/statusBar/statusBarService.ts\nvar StatusBarService = class extends import_core9.BeanStub {\n  // tslint:disable-next-line\n  constructor() {\n    super();\n    this.beanName = \"statusBarService\";\n    this.allComponents = /* @__PURE__ */ new Map();\n  }\n  registerStatusPanel(key, component) {\n    this.allComponents.set(key, component);\n  }\n  unregisterStatusPanel(key) {\n    this.allComponents.delete(key);\n  }\n  unregisterAllComponents() {\n    this.allComponents.clear();\n  }\n  getStatusPanel(key) {\n    return this.allComponents.get(key);\n  }\n  getStatusPanelSelector() {\n    return AgStatusBarSelector;\n  }\n  destroy() {\n    this.unregisterAllComponents();\n    super.destroy();\n  }\n};\n\n// enterprise-modules/status-bar/src/version.ts\nvar VERSION = \"32.0.0\";\n\n// enterprise-modules/status-bar/src/statusBarModule.ts\nvar StatusBarCoreModule = {\n  version: VERSION,\n  moduleName: `${import_core10.ModuleNames.StatusBarModule}-core`,\n  beans: [StatusBarService],\n  userComponents: [\n    { name: \"agAggregationComponent\", classImp: AggregationComp },\n    { name: \"agSelectedRowCountComponent\", classImp: SelectedRowsComp },\n    { name: \"agTotalRowCountComponent\", classImp: TotalRowsComp },\n    { name: \"agFilteredRowCountComponent\", classImp: FilteredRowsComp },\n    { name: \"agTotalAndFilteredRowCountComponent\", classImp: TotalAndFilteredRowsComp }\n  ],\n  dependantModules: [import_core11.EnterpriseCoreModule]\n};\nvar StatusBarApiModule = {\n  version: VERSION,\n  moduleName: `${import_core10.ModuleNames.StatusBarModule}-api`,\n  apiFunctions: {\n    getStatusPanel\n  },\n  dependantModules: [StatusBarCoreModule]\n};\nvar StatusBarModule = {\n  version: VERSION,\n  moduleName: import_core10.ModuleNames.StatusBarModule,\n  dependantModules: [StatusBarCoreModule, StatusBarApiModule]\n};\n"],
  "mappings": "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",
  "names": ["target", "all", "name", "to", "from", "except", "desc", "key", "mod", "defaultValue", "localeTextFunc", "value", "beans", "rowModelType", "params", "aggFuncName", "visible", "statusBarValueComponent", "thousandSeparator", "decimalSeparator", "aggFuncs", "refComponentName", "cellRanges", "sum", "count", "numberCount", "min", "max", "cellsSoFar", "i", "cellRange", "currentRow", "lastRow", "col", "cellId", "rowNode", "gotResult", "gotNumberResult", "listener", "totalRowCountValue", "filteredRowCountValue", "totalRowCount", "filteredRowCount", "node", "eventListener", "selectedRowCount", "rowCount", "localeTextFunc2", "comp", "existingStatusPanelsToReuse", "statusPanels", "leftStatusPanelComponents", "componentConfig", "centerStatusPanelComponents", "rightStatusPanelComponents", "validStatusBarPanelsProvided", "statusPanelConfig", "existingStatusPanel", "newParams", "func", "statusBarComponents", "ePanelComponent", "componentDetails", "promise", "details", "componentDetail", "component", "destroyFunc"]
}
