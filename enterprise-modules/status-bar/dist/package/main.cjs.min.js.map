{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// enterprise-modules/status-bar/src/main.ts\nvar main_exports = {};\n__export(main_exports, {\n  StatusBarModule: () => StatusBarModule\n});\nmodule.exports = __toCommonJS(main_exports);\n\n// enterprise-modules/status-bar/src/statusBarModule.ts\nvar import_core9 = require(\"@ag-grid-community/core\");\nvar import_core10 = require(\"@ag-grid-enterprise/core\");\n\n// enterprise-modules/status-bar/src/statusBar/statusBarService.ts\nvar import_core = require(\"@ag-grid-community/core\");\nvar StatusBarService = class extends import_core.BeanStub {\n  // tslint:disable-next-line\n  constructor() {\n    super();\n    this.allComponents = /* @__PURE__ */ new Map();\n  }\n  registerStatusPanel(key, component) {\n    this.allComponents.set(key, component);\n  }\n  unregisterStatusPanel(key) {\n    this.allComponents.delete(key);\n  }\n  unregisterAllComponents() {\n    this.allComponents.clear();\n  }\n  getStatusPanel(key) {\n    return this.allComponents.get(key);\n  }\n  destroy() {\n    this.unregisterAllComponents();\n    super.destroy();\n  }\n};\nStatusBarService = __decorateClass([\n  (0, import_core.Bean)(\"statusBarService\")\n], StatusBarService);\n\n// enterprise-modules/status-bar/src/statusBar/statusBar.ts\nvar import_core2 = require(\"@ag-grid-community/core\");\nvar _StatusBar = class _StatusBar extends import_core2.Component {\n  constructor() {\n    super(_StatusBar.TEMPLATE);\n    this.compDestroyFunctions = {};\n  }\n  postConstruct() {\n    this.processStatusPanels(/* @__PURE__ */ new Map());\n    this.addManagedPropertyListeners([\"statusBar\"], this.handleStatusBarChanged.bind(this));\n  }\n  processStatusPanels(existingStatusPanelsToReuse) {\n    var _a;\n    const statusPanels = (_a = this.gos.get(\"statusBar\")) == null ? void 0 : _a.statusPanels;\n    if (statusPanels) {\n      const leftStatusPanelComponents = statusPanels.filter((componentConfig) => componentConfig.align === \"left\");\n      this.createAndRenderComponents(leftStatusPanelComponents, this.eStatusBarLeft, existingStatusPanelsToReuse);\n      const centerStatusPanelComponents = statusPanels.filter((componentConfig) => componentConfig.align === \"center\");\n      this.createAndRenderComponents(centerStatusPanelComponents, this.eStatusBarCenter, existingStatusPanelsToReuse);\n      const rightStatusPanelComponents = statusPanels.filter((componentConfig) => !componentConfig.align || componentConfig.align === \"right\");\n      this.createAndRenderComponents(rightStatusPanelComponents, this.eStatusBarRight, existingStatusPanelsToReuse);\n    } else {\n      this.setDisplayed(false);\n    }\n  }\n  handleStatusBarChanged() {\n    var _a;\n    const statusPanels = (_a = this.gos.get(\"statusBar\")) == null ? void 0 : _a.statusPanels;\n    const validStatusBarPanelsProvided = Array.isArray(statusPanels) && statusPanels.length > 0;\n    this.setDisplayed(validStatusBarPanelsProvided);\n    const existingStatusPanelsToReuse = /* @__PURE__ */ new Map();\n    if (validStatusBarPanelsProvided) {\n      statusPanels.forEach((statusPanelConfig) => {\n        var _a2, _b;\n        const key = (_a2 = statusPanelConfig.key) != null ? _a2 : statusPanelConfig.statusPanel;\n        const existingStatusPanel = this.statusBarService.getStatusPanel(key);\n        if (existingStatusPanel == null ? void 0 : existingStatusPanel.refresh) {\n          const newParams = this.gos.addGridCommonParams((_b = statusPanelConfig.statusPanelParams) != null ? _b : {});\n          const hasRefreshed = existingStatusPanel.refresh(newParams);\n          if (hasRefreshed) {\n            existingStatusPanelsToReuse.set(key, existingStatusPanel);\n            delete this.compDestroyFunctions[key];\n            import_core2._.removeFromParent(existingStatusPanel.getGui());\n          }\n        }\n      });\n    }\n    this.resetStatusBar();\n    if (validStatusBarPanelsProvided) {\n      this.processStatusPanels(existingStatusPanelsToReuse);\n    }\n  }\n  resetStatusBar() {\n    this.eStatusBarLeft.innerHTML = \"\";\n    this.eStatusBarCenter.innerHTML = \"\";\n    this.eStatusBarRight.innerHTML = \"\";\n    this.destroyComponents();\n    this.statusBarService.unregisterAllComponents();\n  }\n  destroyComponents() {\n    Object.values(this.compDestroyFunctions).forEach((func) => func());\n    this.compDestroyFunctions = {};\n  }\n  createAndRenderComponents(statusBarComponents, ePanelComponent, existingStatusPanelsToReuse) {\n    const componentDetails = [];\n    statusBarComponents.forEach((componentConfig) => {\n      const key = componentConfig.key || componentConfig.statusPanel;\n      const existingStatusPanel = existingStatusPanelsToReuse.get(key);\n      let promise;\n      if (existingStatusPanel) {\n        promise = import_core2.AgPromise.resolve(existingStatusPanel);\n      } else {\n        const params = {};\n        const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n        promise = compDetails.newAgStackInstance();\n        if (!promise) {\n          return;\n        }\n      }\n      componentDetails.push({\n        key,\n        promise\n      });\n    });\n    import_core2.AgPromise.all(componentDetails.map((details) => details.promise)).then(() => {\n      componentDetails.forEach((componentDetail) => {\n        componentDetail.promise.then((component) => {\n          const destroyFunc = () => {\n            this.getContext().destroyBean(component);\n          };\n          if (this.isAlive()) {\n            this.statusBarService.registerStatusPanel(componentDetail.key, component);\n            ePanelComponent.appendChild(component.getGui());\n            this.compDestroyFunctions[componentDetail.key] = destroyFunc;\n          } else {\n            destroyFunc();\n          }\n        });\n      });\n    });\n  }\n};\n_StatusBar.TEMPLATE = /* html */\n`<div class=\"ag-status-bar\">\n            <div ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`;\n__decorateClass([\n  (0, import_core2.Autowired)(\"userComponentFactory\")\n], _StatusBar.prototype, \"userComponentFactory\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"statusBarService\")\n], _StatusBar.prototype, \"statusBarService\", 2);\n__decorateClass([\n  (0, import_core2.RefSelector)(\"eStatusBarLeft\")\n], _StatusBar.prototype, \"eStatusBarLeft\", 2);\n__decorateClass([\n  (0, import_core2.RefSelector)(\"eStatusBarCenter\")\n], _StatusBar.prototype, \"eStatusBarCenter\", 2);\n__decorateClass([\n  (0, import_core2.RefSelector)(\"eStatusBarRight\")\n], _StatusBar.prototype, \"eStatusBarRight\", 2);\n__decorateClass([\n  import_core2.PostConstruct\n], _StatusBar.prototype, \"postConstruct\", 1);\n__decorateClass([\n  import_core2.PreDestroy\n], _StatusBar.prototype, \"destroyComponents\", 1);\nvar StatusBar = _StatusBar;\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/nameValueComp.ts\nvar import_core3 = require(\"@ag-grid-community/core\");\nvar _NameValueComp = class _NameValueComp extends import_core3.Component {\n  constructor() {\n    super(_NameValueComp.TEMPLATE);\n  }\n  setLabel(key, defaultValue) {\n    this.setDisplayed(false);\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n  }\n  setValue(value) {\n    this.eValue.innerHTML = value;\n  }\n};\n_NameValueComp.TEMPLATE = /* html */\n`<div class=\"ag-status-name-value\">\n            <span ref=\"eLabel\"></span>:&nbsp;\n            <span ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`;\n__decorateClass([\n  (0, import_core3.RefSelector)(\"eLabel\")\n], _NameValueComp.prototype, \"eLabel\", 2);\n__decorateClass([\n  (0, import_core3.RefSelector)(\"eValue\")\n], _NameValueComp.prototype, \"eValue\", 2);\nvar NameValueComp = _NameValueComp;\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/totalAndFilteredRowsComp.ts\nvar import_core4 = require(\"@ag-grid-community/core\");\nvar TotalAndFilteredRowsComp = class extends NameValueComp {\n  postConstruct() {\n    if (this.rowModel.getType() !== \"clientSide\") {\n      import_core4._.warnOnce(`agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n      return;\n    }\n    this.setLabel(\"totalAndFilteredRows\", \"Rows\");\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-total-and-filtered-row-count\");\n    this.setDisplayed(true);\n    this.addManagedListener(this.eventService, import_core4.Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n    this.onDataChanged();\n  }\n  onDataChanged() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    const rowCount = import_core4._.formatNumberCommas(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n    const totalRowCount = import_core4._.formatNumberCommas(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n    if (rowCount === totalRowCount) {\n      this.setValue(rowCount);\n    } else {\n      const localeTextFunc2 = this.localeService.getLocaleTextFunc();\n      this.setValue(`${rowCount} ${localeTextFunc2(\"of\", \"of\")} ${totalRowCount}`);\n    }\n  }\n  getFilteredRowCountValue() {\n    let filteredRowCount = 0;\n    this.rowModel.forEachNodeAfterFilter((node) => {\n      if (!node.group) {\n        filteredRowCount++;\n      }\n    });\n    return filteredRowCount;\n  }\n  getTotalRowCount() {\n    let totalRowCount = 0;\n    this.rowModel.forEachNode((node) => {\n      if (!node.group) {\n        totalRowCount++;\n      }\n    });\n    return totalRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  (0, import_core4.Autowired)(\"rowModel\")\n], TotalAndFilteredRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  import_core4.PostConstruct\n], TotalAndFilteredRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/filteredRowsComp.ts\nvar import_core5 = require(\"@ag-grid-community/core\");\nvar FilteredRowsComp = class extends NameValueComp {\n  postConstruct() {\n    this.setLabel(\"filteredRows\", \"Filtered\");\n    if (this.rowModel.getType() !== \"clientSide\") {\n      import_core5._.warnOnce(`agFilteredRowCountComponent should only be used with the client side row model.`);\n      return;\n    }\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-filtered-row-count\");\n    this.setDisplayed(true);\n    const listener = this.onDataChanged.bind(this);\n    this.addManagedListener(this.eventService, import_core5.Events.EVENT_MODEL_UPDATED, listener);\n    listener();\n  }\n  onDataChanged() {\n    const totalRowCountValue = this.getTotalRowCountValue();\n    const filteredRowCountValue = this.getFilteredRowCountValue();\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue(import_core5._.formatNumberCommas(filteredRowCountValue, thousandSeparator, decimalSeparator));\n    this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n  }\n  getTotalRowCountValue() {\n    let totalRowCount = 0;\n    this.rowModel.forEachNode((node) => totalRowCount += 1);\n    return totalRowCount;\n  }\n  getFilteredRowCountValue() {\n    let filteredRowCount = 0;\n    this.rowModel.forEachNodeAfterFilter((node) => {\n      if (!node.group) {\n        filteredRowCount += 1;\n      }\n    });\n    return filteredRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  (0, import_core5.Autowired)(\"rowModel\")\n], FilteredRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  import_core5.PostConstruct\n], FilteredRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/totalRowsComp.ts\nvar import_core6 = require(\"@ag-grid-community/core\");\nvar TotalRowsComp = class extends NameValueComp {\n  postConstruct() {\n    this.setLabel(\"totalRows\", \"Total Rows\");\n    if (this.rowModel.getType() !== \"clientSide\") {\n      import_core6._.warnOnce(\"agTotalRowCountComponent should only be used with the client side row model.\");\n      return;\n    }\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-total-row-count\");\n    this.setDisplayed(true);\n    this.addManagedListener(this.eventService, import_core6.Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n    this.onDataChanged();\n  }\n  onDataChanged() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue(import_core6._.formatNumberCommas(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n  }\n  getRowCountValue() {\n    let totalRowCount = 0;\n    this.rowModel.forEachLeafNode((node) => totalRowCount += 1);\n    return totalRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  (0, import_core6.Autowired)(\"rowModel\")\n], TotalRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  import_core6.PostConstruct\n], TotalRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/selectedRowsComp.ts\nvar import_core7 = require(\"@ag-grid-community/core\");\nvar SelectedRowsComp = class extends NameValueComp {\n  postConstruct() {\n    if (!this.isValidRowModel()) {\n      console.warn(`AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.`);\n      return;\n    }\n    this.setLabel(\"selectedRows\", \"Selected\");\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-selected-row-count\");\n    this.onRowSelectionChanged();\n    const eventListener = this.onRowSelectionChanged.bind(this);\n    this.addManagedListener(this.eventService, import_core7.Events.EVENT_MODEL_UPDATED, eventListener);\n    this.addManagedListener(this.eventService, import_core7.Events.EVENT_SELECTION_CHANGED, eventListener);\n  }\n  isValidRowModel() {\n    const rowModelType = this.rowModel.getType();\n    return rowModelType === \"clientSide\" || rowModelType === \"serverSide\";\n  }\n  onRowSelectionChanged() {\n    const selectedRowCount = this.selectionService.getSelectionCount();\n    if (selectedRowCount < 0) {\n      this.setValue(\"?\");\n      this.setDisplayed(true);\n      return;\n    }\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue(import_core7._.formatNumberCommas(selectedRowCount, thousandSeparator, decimalSeparator));\n    this.setDisplayed(selectedRowCount > 0);\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  (0, import_core7.Autowired)(\"rowModel\")\n], SelectedRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  (0, import_core7.Autowired)(\"selectionService\")\n], SelectedRowsComp.prototype, \"selectionService\", 2);\n__decorateClass([\n  import_core7.PostConstruct\n], SelectedRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/aggregationComp.ts\nvar import_core8 = require(\"@ag-grid-community/core\");\nvar _AggregationComp = class _AggregationComp extends import_core8.Component {\n  constructor() {\n    super(_AggregationComp.TEMPLATE);\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n  postConstruct() {\n    if (!this.isValidRowModel()) {\n      console.warn(`AG Grid: agAggregationComponent should only be used with the client and server side row model.`);\n      return;\n    }\n    this.avgAggregationComp.setLabel(\"avg\", \"Average\");\n    this.countAggregationComp.setLabel(\"count\", \"Count\");\n    this.minAggregationComp.setLabel(\"min\", \"Min\");\n    this.maxAggregationComp.setLabel(\"max\", \"Max\");\n    this.sumAggregationComp.setLabel(\"sum\", \"Sum\");\n    this.addManagedListener(this.eventService, import_core8.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n    this.addManagedListener(this.eventService, import_core8.Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n  }\n  isValidRowModel() {\n    const rowModelType = this.rowModel.getType();\n    return rowModelType === \"clientSide\" || rowModelType === \"serverSide\";\n  }\n  init(params) {\n    this.params = params;\n  }\n  refresh(params) {\n    this.params = params;\n    this.onRangeSelectionChanged();\n    return true;\n  }\n  setAggregationComponentValue(aggFuncName, value, visible) {\n    var _a;\n    const statusBarValueComponent = this.getAllowedAggregationValueComponent(aggFuncName);\n    if (import_core8._.exists(statusBarValueComponent) && statusBarValueComponent) {\n      const localeTextFunc = this.localeService.getLocaleTextFunc();\n      const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n      const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n      statusBarValueComponent.setValue(import_core8._.formatNumberTwoDecimalPlacesAndCommas(value, thousandSeparator, decimalSeparator));\n      statusBarValueComponent.setDisplayed(visible);\n    } else {\n      (_a = this.getAggregationValueComponent(aggFuncName)) == null ? void 0 : _a.setDisplayed(false);\n    }\n  }\n  getAllowedAggregationValueComponent(aggFuncName) {\n    const { aggFuncs } = this.params;\n    if (!aggFuncs || aggFuncs.includes(aggFuncName)) {\n      return this.getAggregationValueComponent(aggFuncName);\n    }\n    return null;\n  }\n  getAggregationValueComponent(aggFuncName) {\n    const refComponentName = `${aggFuncName}AggregationComp`;\n    return this[refComponentName];\n  }\n  onRangeSelectionChanged() {\n    var _a;\n    const cellRanges = (_a = this.rangeService) == null ? void 0 : _a.getCellRanges();\n    let sum = 0;\n    let count = 0;\n    let numberCount = 0;\n    let min = null;\n    let max = null;\n    const cellsSoFar = {};\n    if (cellRanges && !import_core8._.missingOrEmpty(cellRanges) && this.rangeService) {\n      for (let i = 0; i < cellRanges.length; i++) {\n        const cellRange = cellRanges[i];\n        let currentRow = this.rangeService.getRangeStartRow(cellRange);\n        const lastRow = this.rangeService.getRangeEndRow(cellRange);\n        while (true) {\n          const finishedAllRows = import_core8._.missing(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n          if (finishedAllRows || !currentRow || !cellRange.columns) {\n            break;\n          }\n          cellRange.columns.forEach((col) => {\n            if (currentRow === null) {\n              return;\n            }\n            const cellId = this.cellPositionUtils.createId({\n              rowPinned: currentRow.rowPinned,\n              column: col,\n              rowIndex: currentRow.rowIndex\n            });\n            if (cellsSoFar[cellId]) {\n              return;\n            }\n            cellsSoFar[cellId] = true;\n            const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n            if (import_core8._.missing(rowNode)) {\n              return;\n            }\n            let value = this.valueService.getValue(col, rowNode);\n            if (import_core8._.missing(value) || value === \"\") {\n              return;\n            }\n            count++;\n            if (typeof value === \"object\" && \"value\" in value) {\n              value = value.value;\n              if (value === \"\") {\n                return;\n              }\n            }\n            if (typeof value === \"string\") {\n              value = Number(value);\n            }\n            if (typeof value === \"number\" && !isNaN(value)) {\n              sum += value;\n              if (max === null || value > max) {\n                max = value;\n              }\n              if (min === null || value < min) {\n                min = value;\n              }\n              numberCount++;\n            }\n          });\n          currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n      }\n      ;\n    }\n    const gotResult = count > 1;\n    const gotNumberResult = numberCount > 1;\n    this.setAggregationComponentValue(\"count\", count, gotResult);\n    this.setAggregationComponentValue(\"sum\", sum, gotNumberResult);\n    this.setAggregationComponentValue(\"min\", min, gotNumberResult);\n    this.setAggregationComponentValue(\"max\", max, gotNumberResult);\n    this.setAggregationComponentValue(\"avg\", sum / numberCount, gotNumberResult);\n  }\n};\n_AggregationComp.TEMPLATE = /* html */\n`<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`;\n__decorateClass([\n  (0, import_core8.Optional)(\"rangeService\")\n], _AggregationComp.prototype, \"rangeService\", 2);\n__decorateClass([\n  (0, import_core8.Autowired)(\"valueService\")\n], _AggregationComp.prototype, \"valueService\", 2);\n__decorateClass([\n  (0, import_core8.Autowired)(\"cellNavigationService\")\n], _AggregationComp.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  (0, import_core8.Autowired)(\"rowModel\")\n], _AggregationComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  (0, import_core8.Autowired)(\"cellPositionUtils\")\n], _AggregationComp.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  (0, import_core8.Autowired)(\"rowPositionUtils\")\n], _AggregationComp.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  (0, import_core8.RefSelector)(\"sumAggregationComp\")\n], _AggregationComp.prototype, \"sumAggregationComp\", 2);\n__decorateClass([\n  (0, import_core8.RefSelector)(\"countAggregationComp\")\n], _AggregationComp.prototype, \"countAggregationComp\", 2);\n__decorateClass([\n  (0, import_core8.RefSelector)(\"minAggregationComp\")\n], _AggregationComp.prototype, \"minAggregationComp\", 2);\n__decorateClass([\n  (0, import_core8.RefSelector)(\"maxAggregationComp\")\n], _AggregationComp.prototype, \"maxAggregationComp\", 2);\n__decorateClass([\n  (0, import_core8.RefSelector)(\"avgAggregationComp\")\n], _AggregationComp.prototype, \"avgAggregationComp\", 2);\n__decorateClass([\n  import_core8.PostConstruct\n], _AggregationComp.prototype, \"postConstruct\", 1);\nvar AggregationComp = _AggregationComp;\n\n// enterprise-modules/status-bar/src/version.ts\nvar VERSION = \"31.3.4\";\n\n// enterprise-modules/status-bar/src/statusBarModule.ts\nvar StatusBarModule = {\n  version: VERSION,\n  moduleName: import_core9.ModuleNames.StatusBarModule,\n  beans: [StatusBarService],\n  agStackComponents: [\n    { componentName: \"AgStatusBar\", componentClass: StatusBar },\n    { componentName: \"AgNameValue\", componentClass: NameValueComp }\n  ],\n  userComponents: [\n    { componentName: \"agAggregationComponent\", componentClass: AggregationComp },\n    { componentName: \"agSelectedRowCountComponent\", componentClass: SelectedRowsComp },\n    { componentName: \"agTotalRowCountComponent\", componentClass: TotalRowsComp },\n    { componentName: \"agFilteredRowCountComponent\", componentClass: FilteredRowsComp },\n    { componentName: \"agTotalAndFilteredRowCountComponent\", componentClass: TotalAndFilteredRowsComp }\n  ],\n  dependantModules: [\n    import_core10.EnterpriseCoreModule\n  ]\n};\n"],
  "mappings": "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",
  "names": ["target", "all", "name", "to", "from", "except", "desc", "key", "mod", "decorators", "kind", "result", "i", "decorator", "component", "_StatusBar", "existingStatusPanelsToReuse", "_a", "statusPanels", "leftStatusPanelComponents", "componentConfig", "centerStatusPanelComponents", "rightStatusPanelComponents", "validStatusBarPanelsProvided", "statusPanelConfig", "_a2", "_b", "existingStatusPanel", "newParams", "func", "statusBarComponents", "ePanelComponent", "componentDetails", "promise", "params", "details", "componentDetail", "destroyFunc", "_NameValueComp", "defaultValue", "localeTextFunc", "value", "thousandSeparator", "decimalSeparator", "rowCount", "totalRowCount", "localeTextFunc2", "filteredRowCount", "node", "listener", "totalRowCountValue", "filteredRowCountValue", "eventListener", "rowModelType", "selectedRowCount", "_AggregationComp", "aggFuncName", "visible", "statusBarValueComponent", "aggFuncs", "refComponentName", "cellRanges", "sum", "count", "numberCount", "min", "max", "cellsSoFar", "cellRange", "currentRow", "lastRow", "col", "cellId", "rowNode", "gotResult", "gotNumberResult"]
}
