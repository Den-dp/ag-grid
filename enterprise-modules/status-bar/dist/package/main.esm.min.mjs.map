{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// enterprise-modules/status-bar/src/statusBarModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/status-bar/src/statusBar/statusBarService.ts\nimport { Bean, BeanStub } from \"@ag-grid-community/core\";\nvar StatusBarService = class extends BeanStub {\n  // tslint:disable-next-line\n  constructor() {\n    super();\n    this.allComponents = /* @__PURE__ */ new Map();\n  }\n  registerStatusPanel(key, component) {\n    this.allComponents.set(key, component);\n  }\n  unregisterStatusPanel(key) {\n    this.allComponents.delete(key);\n  }\n  unregisterAllComponents() {\n    this.allComponents.clear();\n  }\n  getStatusPanel(key) {\n    return this.allComponents.get(key);\n  }\n  destroy() {\n    this.unregisterAllComponents();\n    super.destroy();\n  }\n};\nStatusBarService = __decorateClass([\n  Bean(\"statusBarService\")\n], StatusBarService);\n\n// enterprise-modules/status-bar/src/statusBar/statusBar.ts\nimport {\n  Autowired,\n  Component,\n  PostConstruct,\n  PreDestroy,\n  AgPromise,\n  RefSelector,\n  _\n} from \"@ag-grid-community/core\";\nvar _StatusBar = class _StatusBar extends Component {\n  constructor() {\n    super(_StatusBar.TEMPLATE);\n    this.compDestroyFunctions = {};\n  }\n  postConstruct() {\n    this.processStatusPanels(/* @__PURE__ */ new Map());\n    this.addManagedPropertyListeners([\"statusBar\"], this.handleStatusBarChanged.bind(this));\n  }\n  processStatusPanels(existingStatusPanelsToReuse) {\n    var _a;\n    const statusPanels = (_a = this.gos.get(\"statusBar\")) == null ? void 0 : _a.statusPanels;\n    if (statusPanels) {\n      const leftStatusPanelComponents = statusPanels.filter((componentConfig) => componentConfig.align === \"left\");\n      this.createAndRenderComponents(leftStatusPanelComponents, this.eStatusBarLeft, existingStatusPanelsToReuse);\n      const centerStatusPanelComponents = statusPanels.filter((componentConfig) => componentConfig.align === \"center\");\n      this.createAndRenderComponents(centerStatusPanelComponents, this.eStatusBarCenter, existingStatusPanelsToReuse);\n      const rightStatusPanelComponents = statusPanels.filter((componentConfig) => !componentConfig.align || componentConfig.align === \"right\");\n      this.createAndRenderComponents(rightStatusPanelComponents, this.eStatusBarRight, existingStatusPanelsToReuse);\n    } else {\n      this.setDisplayed(false);\n    }\n  }\n  handleStatusBarChanged() {\n    var _a;\n    const statusPanels = (_a = this.gos.get(\"statusBar\")) == null ? void 0 : _a.statusPanels;\n    const validStatusBarPanelsProvided = Array.isArray(statusPanels) && statusPanels.length > 0;\n    this.setDisplayed(validStatusBarPanelsProvided);\n    const existingStatusPanelsToReuse = /* @__PURE__ */ new Map();\n    if (validStatusBarPanelsProvided) {\n      statusPanels.forEach((statusPanelConfig) => {\n        var _a2, _b;\n        const key = (_a2 = statusPanelConfig.key) != null ? _a2 : statusPanelConfig.statusPanel;\n        const existingStatusPanel = this.statusBarService.getStatusPanel(key);\n        if (existingStatusPanel == null ? void 0 : existingStatusPanel.refresh) {\n          const newParams = this.gos.addGridCommonParams((_b = statusPanelConfig.statusPanelParams) != null ? _b : {});\n          const hasRefreshed = existingStatusPanel.refresh(newParams);\n          if (hasRefreshed) {\n            existingStatusPanelsToReuse.set(key, existingStatusPanel);\n            delete this.compDestroyFunctions[key];\n            _.removeFromParent(existingStatusPanel.getGui());\n          }\n        }\n      });\n    }\n    this.resetStatusBar();\n    if (validStatusBarPanelsProvided) {\n      this.processStatusPanels(existingStatusPanelsToReuse);\n    }\n  }\n  resetStatusBar() {\n    this.eStatusBarLeft.innerHTML = \"\";\n    this.eStatusBarCenter.innerHTML = \"\";\n    this.eStatusBarRight.innerHTML = \"\";\n    this.destroyComponents();\n    this.statusBarService.unregisterAllComponents();\n  }\n  destroyComponents() {\n    Object.values(this.compDestroyFunctions).forEach((func) => func());\n    this.compDestroyFunctions = {};\n  }\n  createAndRenderComponents(statusBarComponents, ePanelComponent, existingStatusPanelsToReuse) {\n    const componentDetails = [];\n    statusBarComponents.forEach((componentConfig) => {\n      const key = componentConfig.key || componentConfig.statusPanel;\n      const existingStatusPanel = existingStatusPanelsToReuse.get(key);\n      let promise;\n      if (existingStatusPanel) {\n        promise = AgPromise.resolve(existingStatusPanel);\n      } else {\n        const params = {};\n        const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n        promise = compDetails.newAgStackInstance();\n        if (!promise) {\n          return;\n        }\n      }\n      componentDetails.push({\n        key,\n        promise\n      });\n    });\n    AgPromise.all(componentDetails.map((details) => details.promise)).then(() => {\n      componentDetails.forEach((componentDetail) => {\n        componentDetail.promise.then((component) => {\n          const destroyFunc = () => {\n            this.getContext().destroyBean(component);\n          };\n          if (this.isAlive()) {\n            this.statusBarService.registerStatusPanel(componentDetail.key, component);\n            ePanelComponent.appendChild(component.getGui());\n            this.compDestroyFunctions[componentDetail.key] = destroyFunc;\n          } else {\n            destroyFunc();\n          }\n        });\n      });\n    });\n  }\n};\n_StatusBar.TEMPLATE = /* html */\n`<div class=\"ag-status-bar\">\n            <div ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`;\n__decorateClass([\n  Autowired(\"userComponentFactory\")\n], _StatusBar.prototype, \"userComponentFactory\", 2);\n__decorateClass([\n  Autowired(\"statusBarService\")\n], _StatusBar.prototype, \"statusBarService\", 2);\n__decorateClass([\n  RefSelector(\"eStatusBarLeft\")\n], _StatusBar.prototype, \"eStatusBarLeft\", 2);\n__decorateClass([\n  RefSelector(\"eStatusBarCenter\")\n], _StatusBar.prototype, \"eStatusBarCenter\", 2);\n__decorateClass([\n  RefSelector(\"eStatusBarRight\")\n], _StatusBar.prototype, \"eStatusBarRight\", 2);\n__decorateClass([\n  PostConstruct\n], _StatusBar.prototype, \"postConstruct\", 1);\n__decorateClass([\n  PreDestroy\n], _StatusBar.prototype, \"destroyComponents\", 1);\nvar StatusBar = _StatusBar;\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/nameValueComp.ts\nimport { Component as Component2, RefSelector as RefSelector2 } from \"@ag-grid-community/core\";\nvar _NameValueComp = class _NameValueComp extends Component2 {\n  constructor() {\n    super(_NameValueComp.TEMPLATE);\n  }\n  setLabel(key, defaultValue) {\n    this.setDisplayed(false);\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n  }\n  setValue(value) {\n    this.eValue.innerHTML = value;\n  }\n};\n_NameValueComp.TEMPLATE = /* html */\n`<div class=\"ag-status-name-value\">\n            <span ref=\"eLabel\"></span>:&nbsp;\n            <span ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`;\n__decorateClass([\n  RefSelector2(\"eLabel\")\n], _NameValueComp.prototype, \"eLabel\", 2);\n__decorateClass([\n  RefSelector2(\"eValue\")\n], _NameValueComp.prototype, \"eValue\", 2);\nvar NameValueComp = _NameValueComp;\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/totalAndFilteredRowsComp.ts\nimport {\n  Autowired as Autowired2,\n  Events,\n  PostConstruct as PostConstruct2,\n  _ as _2\n} from \"@ag-grid-community/core\";\nvar TotalAndFilteredRowsComp = class extends NameValueComp {\n  postConstruct() {\n    if (this.rowModel.getType() !== \"clientSide\") {\n      _2.warnOnce(`agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n      return;\n    }\n    this.setLabel(\"totalAndFilteredRows\", \"Rows\");\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-total-and-filtered-row-count\");\n    this.setDisplayed(true);\n    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n    this.onDataChanged();\n  }\n  onDataChanged() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    const rowCount = _2.formatNumberCommas(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n    const totalRowCount = _2.formatNumberCommas(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n    if (rowCount === totalRowCount) {\n      this.setValue(rowCount);\n    } else {\n      const localeTextFunc2 = this.localeService.getLocaleTextFunc();\n      this.setValue(`${rowCount} ${localeTextFunc2(\"of\", \"of\")} ${totalRowCount}`);\n    }\n  }\n  getFilteredRowCountValue() {\n    let filteredRowCount = 0;\n    this.rowModel.forEachNodeAfterFilter((node) => {\n      if (!node.group) {\n        filteredRowCount++;\n      }\n    });\n    return filteredRowCount;\n  }\n  getTotalRowCount() {\n    let totalRowCount = 0;\n    this.rowModel.forEachNode((node) => {\n      if (!node.group) {\n        totalRowCount++;\n      }\n    });\n    return totalRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  Autowired2(\"rowModel\")\n], TotalAndFilteredRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  PostConstruct2\n], TotalAndFilteredRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/filteredRowsComp.ts\nimport {\n  Autowired as Autowired3,\n  Events as Events2,\n  PostConstruct as PostConstruct3,\n  _ as _3\n} from \"@ag-grid-community/core\";\nvar FilteredRowsComp = class extends NameValueComp {\n  postConstruct() {\n    this.setLabel(\"filteredRows\", \"Filtered\");\n    if (this.rowModel.getType() !== \"clientSide\") {\n      _3.warnOnce(`agFilteredRowCountComponent should only be used with the client side row model.`);\n      return;\n    }\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-filtered-row-count\");\n    this.setDisplayed(true);\n    const listener = this.onDataChanged.bind(this);\n    this.addManagedListener(this.eventService, Events2.EVENT_MODEL_UPDATED, listener);\n    listener();\n  }\n  onDataChanged() {\n    const totalRowCountValue = this.getTotalRowCountValue();\n    const filteredRowCountValue = this.getFilteredRowCountValue();\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue(_3.formatNumberCommas(filteredRowCountValue, thousandSeparator, decimalSeparator));\n    this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n  }\n  getTotalRowCountValue() {\n    let totalRowCount = 0;\n    this.rowModel.forEachNode((node) => totalRowCount += 1);\n    return totalRowCount;\n  }\n  getFilteredRowCountValue() {\n    let filteredRowCount = 0;\n    this.rowModel.forEachNodeAfterFilter((node) => {\n      if (!node.group) {\n        filteredRowCount += 1;\n      }\n    });\n    return filteredRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  Autowired3(\"rowModel\")\n], FilteredRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  PostConstruct3\n], FilteredRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/totalRowsComp.ts\nimport { Autowired as Autowired4, Events as Events3, PostConstruct as PostConstruct4, _ as _4 } from \"@ag-grid-community/core\";\nvar TotalRowsComp = class extends NameValueComp {\n  postConstruct() {\n    this.setLabel(\"totalRows\", \"Total Rows\");\n    if (this.rowModel.getType() !== \"clientSide\") {\n      _4.warnOnce(\"agTotalRowCountComponent should only be used with the client side row model.\");\n      return;\n    }\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-total-row-count\");\n    this.setDisplayed(true);\n    this.addManagedListener(this.eventService, Events3.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n    this.onDataChanged();\n  }\n  onDataChanged() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue(_4.formatNumberCommas(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n  }\n  getRowCountValue() {\n    let totalRowCount = 0;\n    this.rowModel.forEachLeafNode((node) => totalRowCount += 1);\n    return totalRowCount;\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  Autowired4(\"rowModel\")\n], TotalRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  PostConstruct4\n], TotalRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/selectedRowsComp.ts\nimport { Autowired as Autowired5, Events as Events4, PostConstruct as PostConstruct5, _ as _5 } from \"@ag-grid-community/core\";\nvar SelectedRowsComp = class extends NameValueComp {\n  postConstruct() {\n    if (!this.isValidRowModel()) {\n      console.warn(`AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.`);\n      return;\n    }\n    this.setLabel(\"selectedRows\", \"Selected\");\n    this.addCssClass(\"ag-status-panel\");\n    this.addCssClass(\"ag-status-panel-selected-row-count\");\n    this.onRowSelectionChanged();\n    const eventListener = this.onRowSelectionChanged.bind(this);\n    this.addManagedListener(this.eventService, Events4.EVENT_MODEL_UPDATED, eventListener);\n    this.addManagedListener(this.eventService, Events4.EVENT_SELECTION_CHANGED, eventListener);\n  }\n  isValidRowModel() {\n    const rowModelType = this.rowModel.getType();\n    return rowModelType === \"clientSide\" || rowModelType === \"serverSide\";\n  }\n  onRowSelectionChanged() {\n    const selectedRowCount = this.selectionService.getSelectionCount();\n    if (selectedRowCount < 0) {\n      this.setValue(\"?\");\n      this.setDisplayed(true);\n      return;\n    }\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n    const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n    this.setValue(_5.formatNumberCommas(selectedRowCount, thousandSeparator, decimalSeparator));\n    this.setDisplayed(selectedRowCount > 0);\n  }\n  init() {\n  }\n  refresh() {\n    return true;\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n};\n__decorateClass([\n  Autowired5(\"rowModel\")\n], SelectedRowsComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  Autowired5(\"selectionService\")\n], SelectedRowsComp.prototype, \"selectionService\", 2);\n__decorateClass([\n  PostConstruct5\n], SelectedRowsComp.prototype, \"postConstruct\", 1);\n\n// enterprise-modules/status-bar/src/statusBar/providedPanels/aggregationComp.ts\nimport {\n  Autowired as Autowired6,\n  Component as Component3,\n  Events as Events5,\n  PostConstruct as PostConstruct6,\n  RefSelector as RefSelector3,\n  _ as _6,\n  Optional\n} from \"@ag-grid-community/core\";\nvar _AggregationComp = class _AggregationComp extends Component3 {\n  constructor() {\n    super(_AggregationComp.TEMPLATE);\n  }\n  // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n  destroy() {\n    super.destroy();\n  }\n  postConstruct() {\n    if (!this.isValidRowModel()) {\n      console.warn(`AG Grid: agAggregationComponent should only be used with the client and server side row model.`);\n      return;\n    }\n    this.avgAggregationComp.setLabel(\"avg\", \"Average\");\n    this.countAggregationComp.setLabel(\"count\", \"Count\");\n    this.minAggregationComp.setLabel(\"min\", \"Min\");\n    this.maxAggregationComp.setLabel(\"max\", \"Max\");\n    this.sumAggregationComp.setLabel(\"sum\", \"Sum\");\n    this.addManagedListener(this.eventService, Events5.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n    this.addManagedListener(this.eventService, Events5.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n  }\n  isValidRowModel() {\n    const rowModelType = this.rowModel.getType();\n    return rowModelType === \"clientSide\" || rowModelType === \"serverSide\";\n  }\n  init(params) {\n    this.params = params;\n  }\n  refresh(params) {\n    this.params = params;\n    this.onRangeSelectionChanged();\n    return true;\n  }\n  setAggregationComponentValue(aggFuncName, value, visible) {\n    var _a;\n    const statusBarValueComponent = this.getAllowedAggregationValueComponent(aggFuncName);\n    if (_6.exists(statusBarValueComponent) && statusBarValueComponent) {\n      const localeTextFunc = this.localeService.getLocaleTextFunc();\n      const thousandSeparator = localeTextFunc(\"thousandSeparator\", \",\");\n      const decimalSeparator = localeTextFunc(\"decimalSeparator\", \".\");\n      statusBarValueComponent.setValue(_6.formatNumberTwoDecimalPlacesAndCommas(value, thousandSeparator, decimalSeparator));\n      statusBarValueComponent.setDisplayed(visible);\n    } else {\n      (_a = this.getAggregationValueComponent(aggFuncName)) == null ? void 0 : _a.setDisplayed(false);\n    }\n  }\n  getAllowedAggregationValueComponent(aggFuncName) {\n    const { aggFuncs } = this.params;\n    if (!aggFuncs || aggFuncs.includes(aggFuncName)) {\n      return this.getAggregationValueComponent(aggFuncName);\n    }\n    return null;\n  }\n  getAggregationValueComponent(aggFuncName) {\n    const refComponentName = `${aggFuncName}AggregationComp`;\n    return this[refComponentName];\n  }\n  onRangeSelectionChanged() {\n    var _a;\n    const cellRanges = (_a = this.rangeService) == null ? void 0 : _a.getCellRanges();\n    let sum = 0;\n    let count = 0;\n    let numberCount = 0;\n    let min = null;\n    let max = null;\n    const cellsSoFar = {};\n    if (cellRanges && !_6.missingOrEmpty(cellRanges) && this.rangeService) {\n      for (let i = 0; i < cellRanges.length; i++) {\n        const cellRange = cellRanges[i];\n        let currentRow = this.rangeService.getRangeStartRow(cellRange);\n        const lastRow = this.rangeService.getRangeEndRow(cellRange);\n        while (true) {\n          const finishedAllRows = _6.missing(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n          if (finishedAllRows || !currentRow || !cellRange.columns) {\n            break;\n          }\n          cellRange.columns.forEach((col) => {\n            if (currentRow === null) {\n              return;\n            }\n            const cellId = this.cellPositionUtils.createId({\n              rowPinned: currentRow.rowPinned,\n              column: col,\n              rowIndex: currentRow.rowIndex\n            });\n            if (cellsSoFar[cellId]) {\n              return;\n            }\n            cellsSoFar[cellId] = true;\n            const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n            if (_6.missing(rowNode)) {\n              return;\n            }\n            let value = this.valueService.getValue(col, rowNode);\n            if (_6.missing(value) || value === \"\") {\n              return;\n            }\n            count++;\n            if (typeof value === \"object\" && \"value\" in value) {\n              value = value.value;\n              if (value === \"\") {\n                return;\n              }\n            }\n            if (typeof value === \"string\") {\n              value = Number(value);\n            }\n            if (typeof value === \"number\" && !isNaN(value)) {\n              sum += value;\n              if (max === null || value > max) {\n                max = value;\n              }\n              if (min === null || value < min) {\n                min = value;\n              }\n              numberCount++;\n            }\n          });\n          currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n      }\n      ;\n    }\n    const gotResult = count > 1;\n    const gotNumberResult = numberCount > 1;\n    this.setAggregationComponentValue(\"count\", count, gotResult);\n    this.setAggregationComponentValue(\"sum\", sum, gotNumberResult);\n    this.setAggregationComponentValue(\"min\", min, gotNumberResult);\n    this.setAggregationComponentValue(\"max\", max, gotNumberResult);\n    this.setAggregationComponentValue(\"avg\", sum / numberCount, gotNumberResult);\n  }\n};\n_AggregationComp.TEMPLATE = /* html */\n`<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`;\n__decorateClass([\n  Optional(\"rangeService\")\n], _AggregationComp.prototype, \"rangeService\", 2);\n__decorateClass([\n  Autowired6(\"valueService\")\n], _AggregationComp.prototype, \"valueService\", 2);\n__decorateClass([\n  Autowired6(\"cellNavigationService\")\n], _AggregationComp.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  Autowired6(\"rowModel\")\n], _AggregationComp.prototype, \"rowModel\", 2);\n__decorateClass([\n  Autowired6(\"cellPositionUtils\")\n], _AggregationComp.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  Autowired6(\"rowPositionUtils\")\n], _AggregationComp.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  RefSelector3(\"sumAggregationComp\")\n], _AggregationComp.prototype, \"sumAggregationComp\", 2);\n__decorateClass([\n  RefSelector3(\"countAggregationComp\")\n], _AggregationComp.prototype, \"countAggregationComp\", 2);\n__decorateClass([\n  RefSelector3(\"minAggregationComp\")\n], _AggregationComp.prototype, \"minAggregationComp\", 2);\n__decorateClass([\n  RefSelector3(\"maxAggregationComp\")\n], _AggregationComp.prototype, \"maxAggregationComp\", 2);\n__decorateClass([\n  RefSelector3(\"avgAggregationComp\")\n], _AggregationComp.prototype, \"avgAggregationComp\", 2);\n__decorateClass([\n  PostConstruct6\n], _AggregationComp.prototype, \"postConstruct\", 1);\nvar AggregationComp = _AggregationComp;\n\n// enterprise-modules/status-bar/src/version.ts\nvar VERSION = \"31.3.4\";\n\n// enterprise-modules/status-bar/src/statusBarModule.ts\nvar StatusBarModule = {\n  version: VERSION,\n  moduleName: ModuleNames.StatusBarModule,\n  beans: [StatusBarService],\n  agStackComponents: [\n    { componentName: \"AgStatusBar\", componentClass: StatusBar },\n    { componentName: \"AgNameValue\", componentClass: NameValueComp }\n  ],\n  userComponents: [\n    { componentName: \"agAggregationComponent\", componentClass: AggregationComp },\n    { componentName: \"agSelectedRowCountComponent\", componentClass: SelectedRowsComp },\n    { componentName: \"agTotalRowCountComponent\", componentClass: TotalRowsComp },\n    { componentName: \"agFilteredRowCountComponent\", componentClass: FilteredRowsComp },\n    { componentName: \"agTotalAndFilteredRowCountComponent\", componentClass: TotalAndFilteredRowsComp }\n  ],\n  dependantModules: [\n    EnterpriseCoreModule\n  ]\n};\nexport {\n  StatusBarModule\n};\n"],
  "mappings": "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",
  "names": ["__defProp", "__getOwnPropDesc", "__decorateClass", "decorators", "target", "key", "kind", "result", "i", "decorator", "ModuleNames", "EnterpriseCoreModule", "Bean", "BeanStub", "StatusBarService", "component", "Autowired", "Component", "PostConstruct", "PreDestroy", "AgPromise", "RefSelector", "_", "_StatusBar", "existingStatusPanelsToReuse", "_a", "statusPanels", "leftStatusPanelComponents", "componentConfig", "centerStatusPanelComponents", "rightStatusPanelComponents", "validStatusBarPanelsProvided", "statusPanelConfig", "_a2", "_b", "existingStatusPanel", "newParams", "func", "statusBarComponents", "ePanelComponent", "componentDetails", "promise", "params", "details", "componentDetail", "destroyFunc", "StatusBar", "Component2", "RefSelector2", "_NameValueComp", "defaultValue", "localeTextFunc", "value", "NameValueComp", "Autowired2", "Events", "PostConstruct2", "_2", "TotalAndFilteredRowsComp", "thousandSeparator", "decimalSeparator", "rowCount", "totalRowCount", "localeTextFunc2", "filteredRowCount", "node", "Autowired3", "Events2", "PostConstruct3", "_3", "FilteredRowsComp", "listener", "totalRowCountValue", "filteredRowCountValue", "Autowired4", "Events3", "PostConstruct4", "_4", "TotalRowsComp", "Autowired5", "Events4", "PostConstruct5", "_5", "SelectedRowsComp", "eventListener", "rowModelType", "selectedRowCount", "Autowired6", "Component3", "Events5", "PostConstruct6", "RefSelector3", "_6", "Optional", "_AggregationComp", "aggFuncName", "visible", "statusBarValueComponent", "aggFuncs", "refComponentName", "cellRanges", "sum", "count", "numberCount", "min", "max", "cellsSoFar", "cellRange", "currentRow", "lastRow", "col", "cellId", "rowNode", "gotResult", "gotNumberResult", "AggregationComp", "VERSION", "StatusBarModule"]
}
