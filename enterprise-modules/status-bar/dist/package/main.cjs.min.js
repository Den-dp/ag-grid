var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__export=(e,t)=>{for(var a in t)__defProp(e,a,{get:t[a],enumerable:!0})},__copyProps=(e,t,a,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of __getOwnPropNames(t))!__hasOwnProp.call(e,s)&&s!==a&&__defProp(e,s,{get:()=>t[s],enumerable:!(o=__getOwnPropDesc(t,s))||o.enumerable});return e},__toCommonJS=e=>__copyProps(__defProp({},"__esModule",{value:!0}),e),main_exports={};__export(main_exports,{StatusBarModule:()=>StatusBarModule}),module.exports=__toCommonJS(main_exports);var import_core10=require("@ag-grid-community/core"),import_core11=require("@ag-grid-enterprise/core"),import_core2=require("@ag-grid-community/core"),import_core=require("@ag-grid-community/core"),AgNameValue=class extends import_core.Component{constructor(){super(`<div class="ag-status-name-value">
            <span data-ref="eLabel"></span>:&nbsp;
            <span data-ref="eValue" class="ag-status-name-value-value"></span>
        </div>`),this.eLabel=import_core.RefPlaceholder,this.eValue=import_core.RefPlaceholder}setLabel(e,t){this.setDisplayed(!1);const a=this.localeService.getLocaleTextFunc();this.eLabel.innerHTML=a(e,t)}setValue(e){this.eValue.innerHTML=e}},AgNameValueSelector={selector:"AG-NAME-VALUE",component:AgNameValue},AggregationComp=class extends import_core2.Component{constructor(){super(`<div class="ag-status-panel ag-status-panel-aggregations">
            <ag-name-value data-ref="avgAggregationComp"></ag-name-value>
            <ag-name-value data-ref="countAggregationComp"></ag-name-value>
            <ag-name-value data-ref="minAggregationComp"></ag-name-value>
            <ag-name-value data-ref="maxAggregationComp"></ag-name-value>
            <ag-name-value data-ref="sumAggregationComp"></ag-name-value>
        </div>`,[AgNameValueSelector]),this.sumAggregationComp=import_core2.RefPlaceholder,this.countAggregationComp=import_core2.RefPlaceholder,this.minAggregationComp=import_core2.RefPlaceholder,this.maxAggregationComp=import_core2.RefPlaceholder,this.avgAggregationComp=import_core2.RefPlaceholder}wireBeans(e){this.valueService=e.valueService,this.cellNavigationService=e.cellNavigationService,this.rowModel=e.rowModel,this.cellPositionUtils=e.cellPositionUtils,this.rowPositionUtils=e.rowPositionUtils,this.rangeService=e.rangeService}destroy(){super.destroy()}postConstruct(){if(!this.isValidRowModel()){(0,import_core2._warnOnce)("agAggregationComponent should only be used with the client and server side row model.");return}this.avgAggregationComp.setLabel("avg","Average"),this.countAggregationComp.setLabel("count","Count"),this.minAggregationComp.setLabel("min","Min"),this.maxAggregationComp.setLabel("max","Max"),this.sumAggregationComp.setLabel("sum","Sum"),this.addManagedEventListeners({rangeSelectionChanged:this.onRangeSelectionChanged.bind(this),modelUpdated:this.onRangeSelectionChanged.bind(this)})}isValidRowModel(){const e=this.rowModel.getType();return e==="clientSide"||e==="serverSide"}init(e){this.params=e}refresh(e){return this.params=e,this.onRangeSelectionChanged(),!0}setAggregationComponentValue(e,t,a){const o=this.getAllowedAggregationValueComponent(e);if((0,import_core2._exists)(o)&&o){const s=this.localeService.getLocaleTextFunc(),r=s("thousandSeparator",","),i=s("decimalSeparator",".");o.setValue((0,import_core2._formatNumberTwoDecimalPlacesAndCommas)(t,r,i)),o.setDisplayed(a)}else this.getAggregationValueComponent(e)?.setDisplayed(!1)}getAllowedAggregationValueComponent(e){const{aggFuncs:t}=this.params;return!t||t.includes(e)?this.getAggregationValueComponent(e):null}getAggregationValueComponent(e){const t=`${e}AggregationComp`;return this[t]}onRangeSelectionChanged(){const e=this.rangeService?.getCellRanges();let t=0,a=0,o=0,s=null,r=null;const i={};if(e&&!(0,import_core2._missingOrEmpty)(e)&&this.rangeService)for(let c=0;c<e.length;c++){const g=e[c];let l=this.rangeService.getRangeStartRow(g);const C=this.rangeService.getRangeEndRow(g);for(;!((0,import_core2._missing)(l)||!l||this.rowPositionUtils.before(C,l)||!l||!g.columns);)g.columns.forEach(h=>{if(l===null)return;const m=this.cellPositionUtils.createId({rowPinned:l.rowPinned,column:h,rowIndex:l.rowIndex});if(i[m])return;i[m]=!0;const p=this.rowPositionUtils.getRowNode(l);if((0,import_core2._missing)(p))return;let n=this.valueService.getValue(h,p);(0,import_core2._missing)(n)||n===""||(a++,!(typeof n=="object"&&"value"in n&&(n=n.value,n===""))&&(typeof n=="string"&&(n=Number(n)),typeof n=="number"&&!isNaN(n)&&(t+=n,(r===null||n>r)&&(r=n),(s===null||n<s)&&(s=n),o++)))}),l=this.cellNavigationService.getRowBelow(l)}const u=a>1,d=o>1;this.setAggregationComponentValue("count",a,u),this.setAggregationComponentValue("sum",t,d),this.setAggregationComponentValue("min",s,d),this.setAggregationComponentValue("max",r,d),this.setAggregationComponentValue("avg",t/o,d)}},import_core3=require("@ag-grid-community/core"),FilteredRowsComp=class extends AgNameValue{wireBeans(e){this.rowModel=e.rowModel}postConstruct(){if(this.setLabel("filteredRows","Filtered"),this.rowModel.getType()!=="clientSide"){(0,import_core3._warnOnce)("agFilteredRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-filtered-row-count"),this.setDisplayed(!0);const e=this.onDataChanged.bind(this);this.addManagedEventListeners({modelUpdated:e}),e()}onDataChanged(){const e=this.getTotalRowCountValue(),t=this.getFilteredRowCountValue(),a=this.localeService.getLocaleTextFunc(),o=a("thousandSeparator",","),s=a("decimalSeparator",".");this.setValue((0,import_core3._formatNumberCommas)(t,o,s)),this.setDisplayed(e!==t)}getTotalRowCountValue(){let e=0;return this.rowModel.forEachNode(()=>e+=1),e}getFilteredRowCountValue(){let e=0;return this.rowModel.forEachNodeAfterFilter(t=>{t.group||(e+=1)}),e}init(){}refresh(){return!0}destroy(){super.destroy()}},import_core4=require("@ag-grid-community/core"),SelectedRowsComp=class extends AgNameValue{wireBeans(e){this.rowModel=e.rowModel,this.selectionService=e.selectionService}postConstruct(){if(!this.isValidRowModel()){(0,import_core4._warnOnce)("agSelectedRowCountComponent should only be used with the client and server side row model.");return}this.setLabel("selectedRows","Selected"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-selected-row-count"),this.onRowSelectionChanged();const e=this.onRowSelectionChanged.bind(this);this.addManagedEventListeners({modelUpdated:e,selectionChanged:e})}isValidRowModel(){const e=this.rowModel.getType();return e==="clientSide"||e==="serverSide"}onRowSelectionChanged(){const e=this.selectionService.getSelectionCount();if(e<0){this.setValue("?"),this.setDisplayed(!0);return}const t=this.localeService.getLocaleTextFunc(),a=t("thousandSeparator",","),o=t("decimalSeparator",".");this.setValue((0,import_core4._formatNumberCommas)(e,a,o)),this.setDisplayed(e>0)}init(){}refresh(){return!0}destroy(){super.destroy()}},import_core5=require("@ag-grid-community/core"),TotalAndFilteredRowsComp=class extends AgNameValue{wireBeans(e){this.rowModel=e.rowModel}postConstruct(){if(this.rowModel.getType()!=="clientSide"){(0,import_core5._warnOnce)("agTotalAndFilteredRowCountComponent should only be used with the client side row model.");return}this.setLabel("totalAndFilteredRows","Rows"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-and-filtered-row-count"),this.setDisplayed(!0),this.addManagedEventListeners({modelUpdated:this.onDataChanged.bind(this)}),this.onDataChanged()}onDataChanged(){const e=this.localeService.getLocaleTextFunc(),t=e("thousandSeparator",","),a=e("decimalSeparator","."),o=(0,import_core5._formatNumberCommas)(this.getFilteredRowCountValue(),t,a),s=(0,import_core5._formatNumberCommas)(this.getTotalRowCount(),t,a);if(o===s)this.setValue(o);else{const r=this.localeService.getLocaleTextFunc();this.setValue(`${o} ${r("of","of")} ${s}`)}}getFilteredRowCountValue(){let e=0;return this.rowModel.forEachNodeAfterFilter(t=>{t.group||e++}),e}getTotalRowCount(){let e=0;return this.rowModel.forEachNode(t=>{t.group||e++}),e}init(){}refresh(){return!0}destroy(){super.destroy()}},import_core6=require("@ag-grid-community/core"),TotalRowsComp=class extends AgNameValue{wireBeans(e){this.rowModel=e.rowModel}postConstruct(){if(this.setLabel("totalRows","Total Rows"),this.rowModel.getType()!=="clientSide"){(0,import_core6._warnOnce)("agTotalRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-row-count"),this.setDisplayed(!0),this.addManagedEventListeners({modelUpdated:this.onDataChanged.bind(this)}),this.onDataChanged()}onDataChanged(){const e=this.localeService.getLocaleTextFunc(),t=e("thousandSeparator",","),a=e("decimalSeparator",".");this.setValue((0,import_core6._formatNumberCommas)(this.getRowCountValue(),t,a))}getRowCountValue(){let e=0;return this.rowModel.forEachLeafNode(()=>e+=1),e}init(){}refresh(){return!0}destroy(){super.destroy()}},import_core7=require("@ag-grid-community/core");function getStatusPanel(e,t){const a=e.statusBarService.getStatusPanel(t);return(0,import_core7._unwrapUserComp)(a)}var import_core9=require("@ag-grid-community/core"),import_core8=require("@ag-grid-community/core"),AgStatusBar=class extends import_core8.Component{constructor(){super(`<div class="ag-status-bar">
            <div data-ref="eStatusBarLeft" class="ag-status-bar-left" role="status"></div>
            <div data-ref="eStatusBarCenter" class="ag-status-bar-center" role="status"></div>
            <div data-ref="eStatusBarRight" class="ag-status-bar-right" role="status"></div>
        </div>`),this.updateQueued=!1,this.panelsPromise=import_core8.AgPromise.resolve(),this.eStatusBarLeft=import_core8.RefPlaceholder,this.eStatusBarCenter=import_core8.RefPlaceholder,this.eStatusBarRight=import_core8.RefPlaceholder,this.compDestroyFunctions={}}wireBeans(e){this.userComponentFactory=e.userComponentFactory,this.statusBarService=e.statusBarService}postConstruct(){this.processStatusPanels(new Map),this.addManagedPropertyListeners(["statusBar"],this.handleStatusBarChanged.bind(this))}processStatusPanels(e){const t=this.gos.get("statusBar")?.statusPanels;if(t){const a=t.filter(r=>r.align==="left"),o=t.filter(r=>r.align==="center"),s=t.filter(r=>!r.align||r.align==="right");this.panelsPromise=import_core8.AgPromise.all([this.createAndRenderComponents(a,this.eStatusBarLeft,e),this.createAndRenderComponents(o,this.eStatusBarCenter,e),this.createAndRenderComponents(s,this.eStatusBarRight,e)])}else this.setDisplayed(!1)}handleStatusBarChanged(){this.updateQueued||(this.updateQueued=!0,this.panelsPromise.then(()=>{this.updateStatusBar(),this.updateQueued=!1}))}updateStatusBar(){const e=this.gos.get("statusBar")?.statusPanels,t=Array.isArray(e)&&e.length>0;this.setDisplayed(t);const a=new Map;t&&e.forEach(o=>{const s=o.key??o.statusPanel,r=this.statusBarService.getStatusPanel(s);if(r?.refresh){const i=this.gos.addGridCommonParams(o.statusPanelParams??{});r.refresh(i)&&(a.set(s,r),delete this.compDestroyFunctions[s],(0,import_core8._removeFromParent)(r.getGui()))}}),this.resetStatusBar(),t&&this.processStatusPanels(a)}resetStatusBar(){this.eStatusBarLeft.innerHTML="",this.eStatusBarCenter.innerHTML="",this.eStatusBarRight.innerHTML="",this.destroyComponents(),this.statusBarService.unregisterAllComponents()}destroy(){this.destroyComponents(),super.destroy()}destroyComponents(){Object.values(this.compDestroyFunctions).forEach(e=>e()),this.compDestroyFunctions={}}createAndRenderComponents(e,t,a){const o=[];return e.forEach(s=>{const r=s.key||s.statusPanel,i=a.get(r);let u;if(i)u=import_core8.AgPromise.resolve(i);else{const d={};if(u=this.userComponentFactory.getStatusPanelCompDetails(s,d).newAgStackInstance(),u==null)return}o.push({key:r,promise:u})}),import_core8.AgPromise.all(o.map(s=>s.promise)).then(()=>{o.forEach(s=>{s.promise.then(r=>{const i=()=>{this.destroyBean(r)};this.isAlive()?(this.statusBarService.registerStatusPanel(s.key,r),t.appendChild(r.getGui()),this.compDestroyFunctions[s.key]=i):i()})})})}},AgStatusBarSelector={selector:"AG-STATUS-BAR",component:AgStatusBar},StatusBarService=class extends import_core9.BeanStub{constructor(){super(),this.beanName="statusBarService",this.allComponents=new Map}registerStatusPanel(e,t){this.allComponents.set(e,t)}unregisterStatusPanel(e){this.allComponents.delete(e)}unregisterAllComponents(){this.allComponents.clear()}getStatusPanel(e){return this.allComponents.get(e)}getStatusPanelSelector(){return AgStatusBarSelector}destroy(){this.unregisterAllComponents(),super.destroy()}},VERSION="32.0.0",StatusBarCoreModule={version:VERSION,moduleName:`${import_core10.ModuleNames.StatusBarModule}-core`,beans:[StatusBarService],userComponents:[{name:"agAggregationComponent",classImp:AggregationComp},{name:"agSelectedRowCountComponent",classImp:SelectedRowsComp},{name:"agTotalRowCountComponent",classImp:TotalRowsComp},{name:"agFilteredRowCountComponent",classImp:FilteredRowsComp},{name:"agTotalAndFilteredRowCountComponent",classImp:TotalAndFilteredRowsComp}],dependantModules:[import_core11.EnterpriseCoreModule]},StatusBarApiModule={version:VERSION,moduleName:`${import_core10.ModuleNames.StatusBarModule}-api`,apiFunctions:{getStatusPanel},dependantModules:[StatusBarCoreModule]},StatusBarModule={version:VERSION,moduleName:import_core10.ModuleNames.StatusBarModule,dependantModules:[StatusBarCoreModule,StatusBarApiModule]};
