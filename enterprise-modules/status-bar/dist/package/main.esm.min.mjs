var q=Object.defineProperty,z=Object.getOwnPropertyDescriptor,a=(t,e,o,s)=>{for(var r=s>1?void 0:s?z(e,o):e,n=t.length-1,i;n>=0;n--)(i=t[n])&&(r=(s?i(e,o,r):i(r))||r);return s&&r&&q(e,o,r),r};import{ModuleNames as J}from"@ag-grid-community/core";import{EnterpriseCoreModule as K}from"@ag-grid-enterprise/core";import{Bean as Q,BeanStub as W}from"@ag-grid-community/core";var E=class extends W{constructor(){super(),this.allComponents=new Map}registerStatusPanel(t,e){this.allComponents.set(t,e)}unregisterStatusPanel(t){this.allComponents.delete(t)}unregisterAllComponents(){this.allComponents.clear()}getStatusPanel(t){return this.allComponents.get(t)}destroy(){this.unregisterAllComponents(),super.destroy()}};E=a([Q("statusBarService")],E);import{Autowired as B,Component as X,PostConstruct as Y,PreDestroy as Z,AgPromise as _,RefSelector as P,_ as ee}from"@ag-grid-community/core";var m=class H extends X{constructor(){super(H.TEMPLATE),this.compDestroyFunctions={}}postConstruct(){this.processStatusPanels(new Map),this.addManagedPropertyListeners(["statusBar"],this.handleStatusBarChanged.bind(this))}processStatusPanels(e){var o;const s=(o=this.gos.get("statusBar"))==null?void 0:o.statusPanels;if(s){const r=s.filter(l=>l.align==="left");this.createAndRenderComponents(r,this.eStatusBarLeft,e);const n=s.filter(l=>l.align==="center");this.createAndRenderComponents(n,this.eStatusBarCenter,e);const i=s.filter(l=>!l.align||l.align==="right");this.createAndRenderComponents(i,this.eStatusBarRight,e)}else this.setDisplayed(!1)}handleStatusBarChanged(){var e;const o=(e=this.gos.get("statusBar"))==null?void 0:e.statusPanels,s=Array.isArray(o)&&o.length>0;this.setDisplayed(s);const r=new Map;s&&o.forEach(n=>{var i,l;const d=(i=n.key)!=null?i:n.statusPanel,g=this.statusBarService.getStatusPanel(d);if(g?.refresh){const h=this.gos.addGridCommonParams((l=n.statusPanelParams)!=null?l:{});g.refresh(h)&&(r.set(d,g),delete this.compDestroyFunctions[d],ee.removeFromParent(g.getGui()))}}),this.resetStatusBar(),s&&this.processStatusPanels(r)}resetStatusBar(){this.eStatusBarLeft.innerHTML="",this.eStatusBarCenter.innerHTML="",this.eStatusBarRight.innerHTML="",this.destroyComponents(),this.statusBarService.unregisterAllComponents()}destroyComponents(){Object.values(this.compDestroyFunctions).forEach(e=>e()),this.compDestroyFunctions={}}createAndRenderComponents(e,o,s){const r=[];e.forEach(n=>{const i=n.key||n.statusPanel,l=s.get(i);let d;if(l)d=_.resolve(l);else{const g={};if(d=this.userComponentFactory.getStatusPanelCompDetails(n,g).newAgStackInstance(),!d)return}r.push({key:i,promise:d})}),_.all(r.map(n=>n.promise)).then(()=>{r.forEach(n=>{n.promise.then(i=>{const l=()=>{this.getContext().destroyBean(i)};this.isAlive()?(this.statusBarService.registerStatusPanel(n.key,i),o.appendChild(i.getGui()),this.compDestroyFunctions[n.key]=l):l()})})})}};m.TEMPLATE=`<div class="ag-status-bar">
            <div ref="eStatusBarLeft" class="ag-status-bar-left" role="status"></div>
            <div ref="eStatusBarCenter" class="ag-status-bar-center" role="status"></div>
            <div ref="eStatusBarRight" class="ag-status-bar-right" role="status"></div>
        </div>`,a([B("userComponentFactory")],m.prototype,"userComponentFactory",2),a([B("statusBarService")],m.prototype,"statusBarService",2),a([P("eStatusBarLeft")],m.prototype,"eStatusBarLeft",2),a([P("eStatusBarCenter")],m.prototype,"eStatusBarCenter",2),a([P("eStatusBarRight")],m.prototype,"eStatusBarRight",2),a([Y],m.prototype,"postConstruct",1),a([Z],m.prototype,"destroyComponents",1);var te=m;import{Component as oe,RefSelector as F}from"@ag-grid-community/core";var A=class j extends oe{constructor(){super(j.TEMPLATE)}setLabel(e,o){this.setDisplayed(!1);const s=this.localeService.getLocaleTextFunc();this.eLabel.innerHTML=s(e,o)}setValue(e){this.eValue.innerHTML=e}};A.TEMPLATE=`<div class="ag-status-name-value">
            <span ref="eLabel"></span>:&nbsp;
            <span ref="eValue" class="ag-status-name-value-value"></span>
        </div>`,a([F("eLabel")],A.prototype,"eLabel",2),a([F("eValue")],A.prototype,"eValue",2);var v=A;import{Autowired as se,Events as ae,PostConstruct as ne,_ as T}from"@ag-grid-community/core";var M=class extends v{postConstruct(){if(this.rowModel.getType()!=="clientSide"){T.warnOnce("agTotalAndFilteredRowCountComponent should only be used with the client side row model.");return}this.setLabel("totalAndFilteredRows","Rows"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-and-filtered-row-count"),this.setDisplayed(!0),this.addManagedListener(this.eventService,ae.EVENT_MODEL_UPDATED,this.onDataChanged.bind(this)),this.onDataChanged()}onDataChanged(){const t=this.localeService.getLocaleTextFunc(),e=t("thousandSeparator",","),o=t("decimalSeparator","."),s=T.formatNumberCommas(this.getFilteredRowCountValue(),e,o),r=T.formatNumberCommas(this.getTotalRowCount(),e,o);if(s===r)this.setValue(s);else{const n=this.localeService.getLocaleTextFunc();this.setValue(`${s} ${n("of","of")} ${r}`)}}getFilteredRowCountValue(){let t=0;return this.rowModel.forEachNodeAfterFilter(e=>{e.group||t++}),t}getTotalRowCount(){let t=0;return this.rowModel.forEachNode(e=>{e.group||t++}),t}init(){}refresh(){return!0}destroy(){super.destroy()}};a([se("rowModel")],M.prototype,"rowModel",2),a([ne],M.prototype,"postConstruct",1);import{Autowired as re,Events as ie,PostConstruct as le,_ as x}from"@ag-grid-community/core";var L=class extends v{postConstruct(){if(this.setLabel("filteredRows","Filtered"),this.rowModel.getType()!=="clientSide"){x.warnOnce("agFilteredRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-filtered-row-count"),this.setDisplayed(!0);const t=this.onDataChanged.bind(this);this.addManagedListener(this.eventService,ie.EVENT_MODEL_UPDATED,t),t()}onDataChanged(){const t=this.getTotalRowCountValue(),e=this.getFilteredRowCountValue(),o=this.localeService.getLocaleTextFunc(),s=o("thousandSeparator",","),r=o("decimalSeparator",".");this.setValue(x.formatNumberCommas(e,s,r)),this.setDisplayed(t!==e)}getTotalRowCountValue(){let t=0;return this.rowModel.forEachNode(e=>t+=1),t}getFilteredRowCountValue(){let t=0;return this.rowModel.forEachNodeAfterFilter(e=>{e.group||(t+=1)}),t}init(){}refresh(){return!0}destroy(){super.destroy()}};a([re("rowModel")],L.prototype,"rowModel",2),a([le],L.prototype,"postConstruct",1);import{Autowired as ue,Events as ce,PostConstruct as de,_ as O}from"@ag-grid-community/core";var V=class extends v{postConstruct(){if(this.setLabel("totalRows","Total Rows"),this.rowModel.getType()!=="clientSide"){O.warnOnce("agTotalRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-row-count"),this.setDisplayed(!0),this.addManagedListener(this.eventService,ce.EVENT_MODEL_UPDATED,this.onDataChanged.bind(this)),this.onDataChanged()}onDataChanged(){const t=this.localeService.getLocaleTextFunc(),e=t("thousandSeparator",","),o=t("decimalSeparator",".");this.setValue(O.formatNumberCommas(this.getRowCountValue(),e,o))}getRowCountValue(){let t=0;return this.rowModel.forEachLeafNode(e=>t+=1),t}init(){}refresh(){return!0}destroy(){super.destroy()}};a([ue("rowModel")],V.prototype,"rowModel",2),a([de],V.prototype,"postConstruct",1);import{Autowired as U,Events as G,PostConstruct as pe,_ as ge}from"@ag-grid-community/core";var R=class extends v{postConstruct(){if(!this.isValidRowModel()){console.warn("AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.");return}this.setLabel("selectedRows","Selected"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-selected-row-count"),this.onRowSelectionChanged();const t=this.onRowSelectionChanged.bind(this);this.addManagedListener(this.eventService,G.EVENT_MODEL_UPDATED,t),this.addManagedListener(this.eventService,G.EVENT_SELECTION_CHANGED,t)}isValidRowModel(){const t=this.rowModel.getType();return t==="clientSide"||t==="serverSide"}onRowSelectionChanged(){const t=this.selectionService.getSelectionCount();if(t<0){this.setValue("?"),this.setDisplayed(!0);return}const e=this.localeService.getLocaleTextFunc(),o=e("thousandSeparator",","),s=e("decimalSeparator",".");this.setValue(ge.formatNumberCommas(t,o,s)),this.setDisplayed(t>0)}init(){}refresh(){return!0}destroy(){super.destroy()}};a([U("rowModel")],R.prototype,"rowModel",2),a([U("selectionService")],R.prototype,"selectionService",2),a([pe],R.prototype,"postConstruct",1);import{Autowired as S,Component as me,Events as I,PostConstruct as he,RefSelector as w,_ as C,Optional as Ce}from"@ag-grid-community/core";var c=class k extends me{constructor(){super(k.TEMPLATE)}destroy(){super.destroy()}postConstruct(){if(!this.isValidRowModel()){console.warn("AG Grid: agAggregationComponent should only be used with the client and server side row model.");return}this.avgAggregationComp.setLabel("avg","Average"),this.countAggregationComp.setLabel("count","Count"),this.minAggregationComp.setLabel("min","Min"),this.maxAggregationComp.setLabel("max","Max"),this.sumAggregationComp.setLabel("sum","Sum"),this.addManagedListener(this.eventService,I.EVENT_RANGE_SELECTION_CHANGED,this.onRangeSelectionChanged.bind(this)),this.addManagedListener(this.eventService,I.EVENT_MODEL_UPDATED,this.onRangeSelectionChanged.bind(this))}isValidRowModel(){const e=this.rowModel.getType();return e==="clientSide"||e==="serverSide"}init(e){this.params=e}refresh(e){return this.params=e,this.onRangeSelectionChanged(),!0}setAggregationComponentValue(e,o,s){var r;const n=this.getAllowedAggregationValueComponent(e);if(C.exists(n)&&n){const i=this.localeService.getLocaleTextFunc(),l=i("thousandSeparator",","),d=i("decimalSeparator",".");n.setValue(C.formatNumberTwoDecimalPlacesAndCommas(o,l,d)),n.setDisplayed(s)}else(r=this.getAggregationValueComponent(e))==null||r.setDisplayed(!1)}getAllowedAggregationValueComponent(e){const{aggFuncs:o}=this.params;return!o||o.includes(e)?this.getAggregationValueComponent(e):null}getAggregationValueComponent(e){const o=`${e}AggregationComp`;return this[o]}onRangeSelectionChanged(){var e;const o=(e=this.rangeService)==null?void 0:e.getCellRanges();let s=0,r=0,n=0,i=null,l=null;const d={};if(o&&!C.missingOrEmpty(o)&&this.rangeService)for(let f=0;f<o.length;f++){const y=o[f];let p=this.rangeService.getRangeStartRow(y);const $=this.rangeService.getRangeEndRow(y);for(;!(C.missing(p)||!p||this.rowPositionUtils.before($,p)||!p||!y.columns);)y.columns.forEach(b=>{if(p===null)return;const D=this.cellPositionUtils.createId({rowPinned:p.rowPinned,column:b,rowIndex:p.rowIndex});if(d[D])return;d[D]=!0;const N=this.rowPositionUtils.getRowNode(p);if(C.missing(N))return;let u=this.valueService.getValue(b,N);C.missing(u)||u===""||(r++,!(typeof u=="object"&&"value"in u&&(u=u.value,u===""))&&(typeof u=="string"&&(u=Number(u)),typeof u=="number"&&!isNaN(u)&&(s+=u,(l===null||u>l)&&(l=u),(i===null||u<i)&&(i=u),n++)))}),p=this.cellNavigationService.getRowBelow(p)}const g=r>1,h=n>1;this.setAggregationComponentValue("count",r,g),this.setAggregationComponentValue("sum",s,h),this.setAggregationComponentValue("min",i,h),this.setAggregationComponentValue("max",l,h),this.setAggregationComponentValue("avg",s/n,h)}};c.TEMPLATE=`<div class="ag-status-panel ag-status-panel-aggregations">
            <ag-name-value ref="avgAggregationComp"></ag-name-value>
            <ag-name-value ref="countAggregationComp"></ag-name-value>
            <ag-name-value ref="minAggregationComp"></ag-name-value>
            <ag-name-value ref="maxAggregationComp"></ag-name-value>
            <ag-name-value ref="sumAggregationComp"></ag-name-value>
        </div>`,a([Ce("rangeService")],c.prototype,"rangeService",2),a([S("valueService")],c.prototype,"valueService",2),a([S("cellNavigationService")],c.prototype,"cellNavigationService",2),a([S("rowModel")],c.prototype,"rowModel",2),a([S("cellPositionUtils")],c.prototype,"cellPositionUtils",2),a([S("rowPositionUtils")],c.prototype,"rowPositionUtils",2),a([w("sumAggregationComp")],c.prototype,"sumAggregationComp",2),a([w("countAggregationComp")],c.prototype,"countAggregationComp",2),a([w("minAggregationComp")],c.prototype,"minAggregationComp",2),a([w("maxAggregationComp")],c.prototype,"maxAggregationComp",2),a([w("avgAggregationComp")],c.prototype,"avgAggregationComp",2),a([he],c.prototype,"postConstruct",1);var ve=c,Se="31.3.4",we={version:Se,moduleName:J.StatusBarModule,beans:[E],agStackComponents:[{componentName:"AgStatusBar",componentClass:te},{componentName:"AgNameValue",componentClass:v}],userComponents:[{componentName:"agAggregationComponent",componentClass:ve},{componentName:"agSelectedRowCountComponent",componentClass:R},{componentName:"agTotalRowCountComponent",componentClass:V},{componentName:"agFilteredRowCountComponent",componentClass:L},{componentName:"agTotalAndFilteredRowCountComponent",componentClass:M}],dependantModules:[K]};export{we as StatusBarModule};
