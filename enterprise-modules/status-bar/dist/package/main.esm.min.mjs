import{ModuleNames as C}from"@ag-grid-community/core";import{EnterpriseCoreModule as b}from"@ag-grid-enterprise/core";import{Component as V,RefPlaceholder as c,_exists as F,_formatNumberTwoDecimalPlacesAndCommas as T,_missing as S,_missingOrEmpty as L,_warnOnce as x}from"@ag-grid-community/core";import{Component as N,RefPlaceholder as y}from"@ag-grid-community/core";var h=class extends N{constructor(){super(`<div class="ag-status-name-value">
            <span data-ref="eLabel"></span>:&nbsp;
            <span data-ref="eValue" class="ag-status-name-value-value"></span>
        </div>`),this.eLabel=y,this.eValue=y}setLabel(e,t){this.setDisplayed(!1);const o=this.localeService.getLocaleTextFunc();this.eLabel.innerHTML=o(e,t)}setValue(e){this.eValue.innerHTML=e}},D={selector:"AG-NAME-VALUE",component:h},_=class extends V{constructor(){super(`<div class="ag-status-panel ag-status-panel-aggregations">
            <ag-name-value data-ref="avgAggregationComp"></ag-name-value>
            <ag-name-value data-ref="countAggregationComp"></ag-name-value>
            <ag-name-value data-ref="minAggregationComp"></ag-name-value>
            <ag-name-value data-ref="maxAggregationComp"></ag-name-value>
            <ag-name-value data-ref="sumAggregationComp"></ag-name-value>
        </div>`,[D]),this.sumAggregationComp=c,this.countAggregationComp=c,this.minAggregationComp=c,this.maxAggregationComp=c,this.avgAggregationComp=c}wireBeans(e){this.valueService=e.valueService,this.cellNavigationService=e.cellNavigationService,this.rowModel=e.rowModel,this.cellPositionUtils=e.cellPositionUtils,this.rowPositionUtils=e.rowPositionUtils,this.rangeService=e.rangeService}destroy(){super.destroy()}postConstruct(){if(!this.isValidRowModel()){x("agAggregationComponent should only be used with the client and server side row model.");return}this.avgAggregationComp.setLabel("avg","Average"),this.countAggregationComp.setLabel("count","Count"),this.minAggregationComp.setLabel("min","Min"),this.maxAggregationComp.setLabel("max","Max"),this.sumAggregationComp.setLabel("sum","Sum"),this.addManagedEventListeners({rangeSelectionChanged:this.onRangeSelectionChanged.bind(this),modelUpdated:this.onRangeSelectionChanged.bind(this)})}isValidRowModel(){const e=this.rowModel.getType();return e==="clientSide"||e==="serverSide"}init(e){this.params=e}refresh(e){return this.params=e,this.onRangeSelectionChanged(),!0}setAggregationComponentValue(e,t,o){const n=this.getAllowedAggregationValueComponent(e);if(F(n)&&n){const s=this.localeService.getLocaleTextFunc(),a=s("thousandSeparator",","),i=s("decimalSeparator",".");n.setValue(T(t,a,i)),n.setDisplayed(o)}else this.getAggregationValueComponent(e)?.setDisplayed(!1)}getAllowedAggregationValueComponent(e){const{aggFuncs:t}=this.params;return!t||t.includes(e)?this.getAggregationValueComponent(e):null}getAggregationValueComponent(e){const t=`${e}AggregationComp`;return this[t]}onRangeSelectionChanged(){const e=this.rangeService?.getCellRanges();let t=0,o=0,n=0,s=null,a=null;const i={};if(e&&!L(e)&&this.rangeService)for(let g=0;g<e.length;g++){const m=e[g];let l=this.rangeService.getRangeStartRow(m);const P=this.rangeService.getRangeEndRow(m);for(;!(S(l)||!l||this.rowPositionUtils.before(P,l)||!l||!m.columns);)m.columns.forEach(v=>{if(l===null)return;const R=this.cellPositionUtils.createId({rowPinned:l.rowPinned,column:v,rowIndex:l.rowIndex});if(i[R])return;i[R]=!0;const A=this.rowPositionUtils.getRowNode(l);if(S(A))return;let r=this.valueService.getValue(v,A);S(r)||r===""||(o++,!(typeof r=="object"&&"value"in r&&(r=r.value,r===""))&&(typeof r=="string"&&(r=Number(r)),typeof r=="number"&&!isNaN(r)&&(t+=r,(a===null||r>a)&&(a=r),(s===null||r<s)&&(s=r),n++)))}),l=this.cellNavigationService.getRowBelow(l)}const u=o>1,d=n>1;this.setAggregationComponentValue("count",o,u),this.setAggregationComponentValue("sum",t,d),this.setAggregationComponentValue("min",s,d),this.setAggregationComponentValue("max",a,d),this.setAggregationComponentValue("avg",t/n,d)}};import{_formatNumberCommas as E,_warnOnce as U}from"@ag-grid-community/core";var O=class extends h{wireBeans(e){this.rowModel=e.rowModel}postConstruct(){if(this.setLabel("filteredRows","Filtered"),this.rowModel.getType()!=="clientSide"){U("agFilteredRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-filtered-row-count"),this.setDisplayed(!0);const e=this.onDataChanged.bind(this);this.addManagedEventListeners({modelUpdated:e}),e()}onDataChanged(){const e=this.getTotalRowCountValue(),t=this.getFilteredRowCountValue(),o=this.localeService.getLocaleTextFunc(),n=o("thousandSeparator",","),s=o("decimalSeparator",".");this.setValue(E(t,n,s)),this.setDisplayed(e!==t)}getTotalRowCountValue(){let e=0;return this.rowModel.forEachNode(()=>e+=1),e}getFilteredRowCountValue(){let e=0;return this.rowModel.forEachNodeAfterFilter(t=>{t.group||(e+=1)}),e}init(){}refresh(){return!0}destroy(){super.destroy()}};import{_formatNumberCommas as I,_warnOnce as k}from"@ag-grid-community/core";var $=class extends h{wireBeans(e){this.rowModel=e.rowModel,this.selectionService=e.selectionService}postConstruct(){if(!this.isValidRowModel()){k("agSelectedRowCountComponent should only be used with the client and server side row model.");return}this.setLabel("selectedRows","Selected"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-selected-row-count"),this.onRowSelectionChanged();const e=this.onRowSelectionChanged.bind(this);this.addManagedEventListeners({modelUpdated:e,selectionChanged:e})}isValidRowModel(){const e=this.rowModel.getType();return e==="clientSide"||e==="serverSide"}onRowSelectionChanged(){const e=this.selectionService.getSelectionCount();if(e<0){this.setValue("?"),this.setDisplayed(!0);return}const t=this.localeService.getLocaleTextFunc(),o=t("thousandSeparator",","),n=t("decimalSeparator",".");this.setValue(I(e,o,n)),this.setDisplayed(e>0)}init(){}refresh(){return!0}destroy(){super.destroy()}};import{_formatNumberCommas as M,_warnOnce as G}from"@ag-grid-community/core";var H=class extends h{wireBeans(e){this.rowModel=e.rowModel}postConstruct(){if(this.rowModel.getType()!=="clientSide"){G("agTotalAndFilteredRowCountComponent should only be used with the client side row model.");return}this.setLabel("totalAndFilteredRows","Rows"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-and-filtered-row-count"),this.setDisplayed(!0),this.addManagedEventListeners({modelUpdated:this.onDataChanged.bind(this)}),this.onDataChanged()}onDataChanged(){const e=this.localeService.getLocaleTextFunc(),t=e("thousandSeparator",","),o=e("decimalSeparator","."),n=M(this.getFilteredRowCountValue(),t,o),s=M(this.getTotalRowCount(),t,o);if(n===s)this.setValue(n);else{const a=this.localeService.getLocaleTextFunc();this.setValue(`${n} ${a("of","of")} ${s}`)}}getFilteredRowCountValue(){let e=0;return this.rowModel.forEachNodeAfterFilter(t=>{t.group||e++}),e}getTotalRowCount(){let e=0;return this.rowModel.forEachNode(t=>{t.group||e++}),e}init(){}refresh(){return!0}destroy(){super.destroy()}};import{_formatNumberCommas as Q,_warnOnce as j}from"@ag-grid-community/core";var q=class extends h{wireBeans(e){this.rowModel=e.rowModel}postConstruct(){if(this.setLabel("totalRows","Total Rows"),this.rowModel.getType()!=="clientSide"){j("agTotalRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-row-count"),this.setDisplayed(!0),this.addManagedEventListeners({modelUpdated:this.onDataChanged.bind(this)}),this.onDataChanged()}onDataChanged(){const e=this.localeService.getLocaleTextFunc(),t=e("thousandSeparator",","),o=e("decimalSeparator",".");this.setValue(Q(this.getRowCountValue(),t,o))}getRowCountValue(){let e=0;return this.rowModel.forEachLeafNode(()=>e+=1),e}init(){}refresh(){return!0}destroy(){super.destroy()}};import{_unwrapUserComp as z}from"@ag-grid-community/core";function J(e,t){const o=e.statusBarService.getStatusPanel(t);return z(o)}import{BeanStub as K}from"@ag-grid-community/core";import{AgPromise as p,Component as W,RefPlaceholder as w,_removeFromParent as X}from"@ag-grid-community/core";var Y=class extends W{constructor(){super(`<div class="ag-status-bar">
            <div data-ref="eStatusBarLeft" class="ag-status-bar-left" role="status"></div>
            <div data-ref="eStatusBarCenter" class="ag-status-bar-center" role="status"></div>
            <div data-ref="eStatusBarRight" class="ag-status-bar-right" role="status"></div>
        </div>`),this.updateQueued=!1,this.panelsPromise=p.resolve(),this.eStatusBarLeft=w,this.eStatusBarCenter=w,this.eStatusBarRight=w,this.compDestroyFunctions={}}wireBeans(e){this.userComponentFactory=e.userComponentFactory,this.statusBarService=e.statusBarService}postConstruct(){this.processStatusPanels(new Map),this.addManagedPropertyListeners(["statusBar"],this.handleStatusBarChanged.bind(this))}processStatusPanels(e){const t=this.gos.get("statusBar")?.statusPanels;if(t){const o=t.filter(a=>a.align==="left"),n=t.filter(a=>a.align==="center"),s=t.filter(a=>!a.align||a.align==="right");this.panelsPromise=p.all([this.createAndRenderComponents(o,this.eStatusBarLeft,e),this.createAndRenderComponents(n,this.eStatusBarCenter,e),this.createAndRenderComponents(s,this.eStatusBarRight,e)])}else this.setDisplayed(!1)}handleStatusBarChanged(){this.updateQueued||(this.updateQueued=!0,this.panelsPromise.then(()=>{this.updateStatusBar(),this.updateQueued=!1}))}updateStatusBar(){const e=this.gos.get("statusBar")?.statusPanels,t=Array.isArray(e)&&e.length>0;this.setDisplayed(t);const o=new Map;t&&e.forEach(n=>{const s=n.key??n.statusPanel,a=this.statusBarService.getStatusPanel(s);if(a?.refresh){const i=this.gos.addGridCommonParams(n.statusPanelParams??{});a.refresh(i)&&(o.set(s,a),delete this.compDestroyFunctions[s],X(a.getGui()))}}),this.resetStatusBar(),t&&this.processStatusPanels(o)}resetStatusBar(){this.eStatusBarLeft.innerHTML="",this.eStatusBarCenter.innerHTML="",this.eStatusBarRight.innerHTML="",this.destroyComponents(),this.statusBarService.unregisterAllComponents()}destroy(){this.destroyComponents(),super.destroy()}destroyComponents(){Object.values(this.compDestroyFunctions).forEach(e=>e()),this.compDestroyFunctions={}}createAndRenderComponents(e,t,o){const n=[];return e.forEach(s=>{const a=s.key||s.statusPanel,i=o.get(a);let u;if(i)u=p.resolve(i);else{const d={};if(u=this.userComponentFactory.getStatusPanelCompDetails(s,d).newAgStackInstance(),u==null)return}n.push({key:a,promise:u})}),p.all(n.map(s=>s.promise)).then(()=>{n.forEach(s=>{s.promise.then(a=>{const i=()=>{this.destroyBean(a)};this.isAlive()?(this.statusBarService.registerStatusPanel(s.key,a),t.appendChild(a.getGui()),this.compDestroyFunctions[s.key]=i):i()})})})}},Z={selector:"AG-STATUS-BAR",component:Y},ee=class extends K{constructor(){super(),this.beanName="statusBarService",this.allComponents=new Map}registerStatusPanel(e,t){this.allComponents.set(e,t)}unregisterStatusPanel(e){this.allComponents.delete(e)}unregisterAllComponents(){this.allComponents.clear()}getStatusPanel(e){return this.allComponents.get(e)}getStatusPanelSelector(){return Z}destroy(){this.unregisterAllComponents(),super.destroy()}},f="32.0.0",B={version:f,moduleName:`${C.StatusBarModule}-core`,beans:[ee],userComponents:[{name:"agAggregationComponent",classImp:_},{name:"agSelectedRowCountComponent",classImp:$},{name:"agTotalRowCountComponent",classImp:q},{name:"agFilteredRowCountComponent",classImp:O},{name:"agTotalAndFilteredRowCountComponent",classImp:H}],dependantModules:[b]},te={version:f,moduleName:`${C.StatusBarModule}-api`,apiFunctions:{getStatusPanel:J},dependantModules:[B]},se={version:f,moduleName:C.StatusBarModule,dependantModules:[B,te]};export{se as StatusBarModule};
