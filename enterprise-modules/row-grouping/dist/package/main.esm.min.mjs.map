{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["// enterprise-modules/row-grouping/src/rowGroupingModule.ts\nimport { ModuleNames, _ColumnFilterModule, _FloatingFilterModule } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule, GroupCellRenderer, GroupCellRendererCtrl } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/row-grouping/src/rowGrouping/aggFuncService.ts\nimport { BeanStub, _exists, _existsAndNotEmpty, _includes, _iterateObject, _last } from \"@ag-grid-community/core\";\nvar defaultAggFuncNames = {\n  sum: \"Sum\",\n  first: \"First\",\n  last: \"Last\",\n  min: \"Min\",\n  max: \"Max\",\n  count: \"Count\",\n  avg: \"Average\"\n};\nvar AggFuncService = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"aggFuncService\";\n    this.aggFuncsMap = {};\n    this.initialised = false;\n  }\n  postConstruct() {\n    this.init();\n  }\n  init() {\n    if (this.initialised) {\n      return;\n    }\n    this.initialiseWithDefaultAggregations();\n    this.addAggFuncs(this.gos.get(\"aggFuncs\"));\n  }\n  initialiseWithDefaultAggregations() {\n    const aggMap = this.aggFuncsMap;\n    aggMap[\"sum\"] = aggSum;\n    aggMap[\"first\"] = aggFirst;\n    aggMap[\"last\"] = aggLast;\n    aggMap[\"min\"] = aggMin;\n    aggMap[\"max\"] = aggMax;\n    aggMap[\"count\"] = aggCount;\n    aggMap[\"avg\"] = aggAvg;\n    this.initialised = true;\n  }\n  isAggFuncPossible(column, func) {\n    const allKeys = this.getFuncNames(column);\n    const allowed = _includes(allKeys, func);\n    const funcExists = _exists(this.aggFuncsMap[func]);\n    return allowed && funcExists;\n  }\n  getDefaultFuncLabel(fctName) {\n    return defaultAggFuncNames[fctName] ?? fctName;\n  }\n  getDefaultAggFunc(column) {\n    const defaultAgg = column.getColDef().defaultAggFunc;\n    if (_exists(defaultAgg) && this.isAggFuncPossible(column, defaultAgg)) {\n      return defaultAgg;\n    }\n    if (this.isAggFuncPossible(column, \"sum\")) {\n      return \"sum\";\n    }\n    const allKeys = this.getFuncNames(column);\n    return _existsAndNotEmpty(allKeys) ? allKeys[0] : null;\n  }\n  addAggFuncs(aggFuncs) {\n    this.init();\n    _iterateObject(aggFuncs, (key, aggFunc) => {\n      this.aggFuncsMap[key] = aggFunc;\n    });\n  }\n  getAggFunc(name) {\n    this.init();\n    return this.aggFuncsMap[name];\n  }\n  getFuncNames(column) {\n    const userAllowedFuncs = column.getColDef().allowedAggFuncs;\n    return userAllowedFuncs == null ? Object.keys(this.aggFuncsMap).sort() : userAllowedFuncs;\n  }\n  clear() {\n    this.aggFuncsMap = {};\n  }\n};\nfunction aggSum(params) {\n  const { values } = params;\n  let result = null;\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    if (typeof value === \"number\") {\n      if (result === null) {\n        result = value;\n      } else {\n        result += typeof result === \"number\" ? value : BigInt(value);\n      }\n    } else if (typeof value === \"bigint\") {\n      if (result === null) {\n        result = value;\n      } else {\n        result = (typeof result === \"bigint\" ? result : BigInt(result)) + value;\n      }\n    }\n  }\n  return result;\n}\nfunction aggFirst(params) {\n  return params.values.length > 0 ? params.values[0] : null;\n}\nfunction aggLast(params) {\n  return params.values.length > 0 ? _last(params.values) : null;\n}\nfunction aggMin(params) {\n  const { values } = params;\n  let result = null;\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    if ((typeof value === \"number\" || typeof value === \"bigint\") && (result === null || result > value)) {\n      result = value;\n    }\n  }\n  return result;\n}\nfunction aggMax(params) {\n  const { values } = params;\n  let result = null;\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    if ((typeof value === \"number\" || typeof value === \"bigint\") && (result === null || result < value)) {\n      result = value;\n    }\n  }\n  return result;\n}\nfunction aggCount(params) {\n  const { values } = params;\n  let result = 0;\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    result += value != null && typeof value.value === \"number\" ? value.value : 1;\n  }\n  const existingAggData = params.rowNode?.aggData?.[params.column.getColId()];\n  if (existingAggData && existingAggData.value === result) {\n    return existingAggData;\n  }\n  return {\n    value: result,\n    toString: function() {\n      return this.value.toString();\n    },\n    // used for sorting\n    toNumber: function() {\n      return this.value;\n    }\n  };\n}\nfunction aggAvg(params) {\n  const { values } = params;\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < values.length; i++) {\n    const currentValue = values[i];\n    let valueToAdd = null;\n    if (typeof currentValue === \"number\" || typeof currentValue === \"bigint\") {\n      valueToAdd = currentValue;\n      count++;\n    } else if (currentValue != null && (typeof currentValue.value === \"number\" || typeof currentValue.value === \"bigint\") && typeof currentValue.count === \"number\") {\n      valueToAdd = currentValue.value * (typeof currentValue.value === \"number\" ? currentValue.count : BigInt(currentValue.count));\n      count += currentValue.count;\n    }\n    if (typeof valueToAdd === \"number\") {\n      sum += typeof sum === \"number\" ? valueToAdd : BigInt(valueToAdd);\n    } else if (typeof valueToAdd === \"bigint\") {\n      sum = (typeof sum === \"bigint\" ? sum : BigInt(sum)) + valueToAdd;\n    }\n  }\n  let value = null;\n  if (count > 0) {\n    value = sum / (typeof sum === \"number\" ? count : BigInt(count));\n  }\n  const existingAggData = params.rowNode?.aggData?.[params.column?.getColId()];\n  if (existingAggData && existingAggData.count === count && existingAggData.value === value) {\n    return existingAggData;\n  }\n  return {\n    count,\n    value,\n    // the grid by default uses toString to render values for an object, so this\n    // is a trick to get the default cellRenderer to display the avg value\n    toString: function() {\n      return typeof this.value === \"number\" || typeof this.value === \"bigint\" ? this.value.toString() : \"\";\n    },\n    // used for sorting\n    toNumber: function() {\n      return this.value;\n    }\n  };\n}\n\n// enterprise-modules/row-grouping/src/rowGrouping/aggregationStage.ts\nimport { BeanStub as BeanStub2, _errorOnce, _missingOrEmpty } from \"@ag-grid-community/core\";\nvar AggregationStage = class extends BeanStub2 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"aggregationStage\";\n  }\n  wireBeans(beans) {\n    this.columnModel = beans.columnModel;\n    this.aggFuncService = beans.aggFuncService;\n    this.funcColsService = beans.funcColsService;\n    this.pivotResultColsService = beans.pivotResultColsService;\n    this.valueService = beans.valueService;\n  }\n  // it's possible to recompute the aggregate without doing the other parts\n  // + api.refreshClientSideRowModel('aggregate')\n  execute(params) {\n    const noValueColumns = _missingOrEmpty(this.funcColsService.getValueColumns());\n    const noUserAgg = !this.gos.getCallback(\"getGroupRowAgg\");\n    const changedPathActive = params.changedPath && params.changedPath.isActive();\n    if (noValueColumns && noUserAgg && changedPathActive) {\n      return;\n    }\n    const aggDetails = this.createAggDetails(params);\n    this.recursivelyCreateAggData(aggDetails);\n  }\n  createAggDetails(params) {\n    const pivotActive = this.columnModel.isPivotActive();\n    const measureColumns = this.funcColsService.getValueColumns();\n    const pivotColumns = pivotActive ? this.funcColsService.getPivotColumns() : [];\n    const aggDetails = {\n      alwaysAggregateAtRootLevel: this.gos.get(\"alwaysAggregateAtRootLevel\"),\n      groupIncludeTotalFooter: !!this.gos.getGrandTotalRow(),\n      changedPath: params.changedPath,\n      valueColumns: measureColumns,\n      pivotColumns,\n      filteredOnly: !this.isSuppressAggFilteredOnly(),\n      userAggFunc: this.gos.getCallback(\"getGroupRowAgg\")\n    };\n    return aggDetails;\n  }\n  isSuppressAggFilteredOnly() {\n    const isGroupAggFiltering = this.gos.getGroupAggFiltering() !== void 0;\n    return isGroupAggFiltering || this.gos.get(\"suppressAggFilteredOnly\");\n  }\n  recursivelyCreateAggData(aggDetails) {\n    const callback = (rowNode) => {\n      const hasNoChildren = !rowNode.hasChildren();\n      if (hasNoChildren) {\n        if (rowNode.aggData) {\n          rowNode.setAggData(null);\n        }\n        return;\n      }\n      const isRootNode = rowNode.level === -1;\n      if (isRootNode && !aggDetails.groupIncludeTotalFooter) {\n        const notPivoting = !this.columnModel.isPivotMode();\n        if (!aggDetails.alwaysAggregateAtRootLevel && notPivoting) {\n          rowNode.setAggData(null);\n          return;\n        }\n      }\n      this.aggregateRowNode(rowNode, aggDetails);\n    };\n    aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);\n  }\n  aggregateRowNode(rowNode, aggDetails) {\n    const measureColumnsMissing = aggDetails.valueColumns.length === 0;\n    const pivotColumnsMissing = aggDetails.pivotColumns.length === 0;\n    let aggResult;\n    if (aggDetails.userAggFunc) {\n      aggResult = aggDetails.userAggFunc({ nodes: rowNode.childrenAfterFilter });\n    } else if (measureColumnsMissing) {\n      aggResult = null;\n    } else if (pivotColumnsMissing) {\n      aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);\n    } else {\n      aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);\n    }\n    rowNode.setAggData(aggResult);\n    if (rowNode.sibling) {\n      rowNode.sibling.setAggData(aggResult);\n    }\n  }\n  aggregateRowNodeUsingValuesAndPivot(rowNode) {\n    const result = {};\n    const secondaryColumns = this.pivotResultColsService.getPivotResultCols()?.list ?? [];\n    let canSkipTotalColumns = true;\n    for (let i = 0; i < secondaryColumns.length; i++) {\n      const secondaryCol = secondaryColumns[i];\n      const colDef = secondaryCol.getColDef();\n      if (colDef.pivotTotalColumnIds != null) {\n        canSkipTotalColumns = false;\n        continue;\n      }\n      const keys = colDef.pivotKeys ?? [];\n      let values;\n      if (rowNode.leafGroup) {\n        values = this.getValuesFromMappedSet(rowNode.childrenMapped, keys, colDef.pivotValueColumn);\n      } else {\n        values = this.getValuesPivotNonLeaf(rowNode, colDef.colId);\n      }\n      result[colDef.colId] = this.aggregateValues(\n        values,\n        colDef.pivotValueColumn.getAggFunc(),\n        colDef.pivotValueColumn,\n        rowNode,\n        secondaryCol\n      );\n    }\n    if (!canSkipTotalColumns) {\n      for (let i = 0; i < secondaryColumns.length; i++) {\n        const secondaryCol = secondaryColumns[i];\n        const colDef = secondaryCol.getColDef();\n        if (colDef.pivotTotalColumnIds == null || !colDef.pivotTotalColumnIds.length) {\n          continue;\n        }\n        const aggResults = colDef.pivotTotalColumnIds.map(\n          (currentColId) => result[currentColId]\n        );\n        result[colDef.colId] = this.aggregateValues(\n          aggResults,\n          colDef.pivotValueColumn.getAggFunc(),\n          colDef.pivotValueColumn,\n          rowNode,\n          secondaryCol\n        );\n      }\n    }\n    return result;\n  }\n  aggregateRowNodeUsingValuesOnly(rowNode, aggDetails) {\n    const result = {};\n    const changedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns) : aggDetails.valueColumns;\n    const notChangedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns) : null;\n    const values2d = this.getValuesNormal(rowNode, changedValueColumns, aggDetails.filteredOnly);\n    const oldValues = rowNode.aggData;\n    changedValueColumns.forEach((valueColumn, index) => {\n      result[valueColumn.getId()] = this.aggregateValues(\n        values2d[index],\n        valueColumn.getAggFunc(),\n        valueColumn,\n        rowNode\n      );\n    });\n    if (notChangedValueColumns && oldValues) {\n      notChangedValueColumns.forEach((valueColumn) => {\n        result[valueColumn.getId()] = oldValues[valueColumn.getId()];\n      });\n    }\n    return result;\n  }\n  getValuesPivotNonLeaf(rowNode, colId) {\n    return rowNode.childrenAfterFilter.map((childNode) => childNode.aggData[colId]);\n  }\n  getValuesFromMappedSet(mappedSet, keys, valueColumn) {\n    let mapPointer = mappedSet;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      mapPointer = mapPointer ? mapPointer[key] : null;\n    }\n    if (!mapPointer) {\n      return [];\n    }\n    return mapPointer.map((rowNode) => this.valueService.getValue(valueColumn, rowNode));\n  }\n  getValuesNormal(rowNode, valueColumns, filteredOnly) {\n    const values = [];\n    valueColumns.forEach(() => values.push([]));\n    const valueColumnCount = valueColumns.length;\n    const nodeList = filteredOnly ? rowNode.childrenAfterFilter : rowNode.childrenAfterGroup;\n    const rowCount = nodeList.length;\n    for (let i = 0; i < rowCount; i++) {\n      const childNode = nodeList[i];\n      for (let j = 0; j < valueColumnCount; j++) {\n        const valueColumn = valueColumns[j];\n        const value = this.valueService.getValue(valueColumn, childNode);\n        values[j].push(value);\n      }\n    }\n    return values;\n  }\n  aggregateValues(values, aggFuncOrString, column, rowNode, pivotResultColumn) {\n    const aggFunc = typeof aggFuncOrString === \"string\" ? this.aggFuncService.getAggFunc(aggFuncOrString) : aggFuncOrString;\n    if (typeof aggFunc !== \"function\") {\n      _errorOnce(`unrecognised aggregation function ${aggFuncOrString}`);\n      return null;\n    }\n    const aggFuncAny = aggFunc;\n    const params = this.gos.addGridCommonParams({\n      values,\n      column,\n      colDef: column ? column.getColDef() : void 0,\n      pivotResultColumn,\n      rowNode,\n      data: rowNode ? rowNode.data : void 0\n    });\n    return aggFuncAny(params);\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/autoColService.ts\nimport { AgColumn, BeanStub as BeanStub3, GROUP_AUTO_COLUMN_ID, _mergeDeep, _missing, _warnOnce } from \"@ag-grid-community/core\";\nvar AutoColService = class extends BeanStub3 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"autoColService\";\n  }\n  wireBeans(beans) {\n    this.columnModel = beans.columnModel;\n    this.columnNameService = beans.columnNameService;\n    this.columnFactory = beans.columnFactory;\n  }\n  createAutoCols(rowGroupCols) {\n    const autoCols = [];\n    const doingTreeData = this.gos.get(\"treeData\");\n    let doingMultiAutoColumn = this.gos.isGroupMultiAutoColumn();\n    if (doingTreeData && doingMultiAutoColumn) {\n      _warnOnce(\n        'you cannot mix groupDisplayType = \"multipleColumns\" with treeData, only one column can be used to display groups when doing tree data'\n      );\n      doingMultiAutoColumn = false;\n    }\n    if (doingMultiAutoColumn) {\n      rowGroupCols.forEach((rowGroupCol, index) => {\n        autoCols.push(this.createOneAutoCol(rowGroupCol, index));\n      });\n    } else {\n      autoCols.push(this.createOneAutoCol());\n    }\n    return autoCols;\n  }\n  updateAutoCols(autoGroupCols, source) {\n    autoGroupCols.forEach((col, index) => this.updateOneAutoCol(col, index, source));\n  }\n  // rowGroupCol and index are missing if groupDisplayType != \"multipleColumns\"\n  createOneAutoCol(rowGroupCol, index) {\n    let colId;\n    if (rowGroupCol) {\n      colId = `${GROUP_AUTO_COLUMN_ID}-${rowGroupCol.getId()}`;\n    } else {\n      colId = GROUP_AUTO_COLUMN_ID;\n    }\n    const colDef = this.createAutoColDef(colId, rowGroupCol, index);\n    colDef.colId = colId;\n    const newCol = new AgColumn(colDef, null, colId, true);\n    this.createBean(newCol);\n    return newCol;\n  }\n  /**\n   * Refreshes an auto group col to load changes from defaultColDef or autoGroupColDef\n   */\n  updateOneAutoCol(colToUpdate, index, source) {\n    const oldColDef = colToUpdate.getColDef();\n    const underlyingColId = typeof oldColDef.showRowGroup == \"string\" ? oldColDef.showRowGroup : void 0;\n    const underlyingColumn = underlyingColId != null ? this.columnModel.getColDefCol(underlyingColId) : void 0;\n    const colDef = this.createAutoColDef(colToUpdate.getId(), underlyingColumn ?? void 0, index);\n    colToUpdate.setColDef(colDef, null, source);\n    this.columnFactory.applyColumnState(colToUpdate, colDef, source);\n  }\n  createAutoColDef(colId, underlyingColumn, index) {\n    let res = this.createBaseColDef(underlyingColumn);\n    const autoGroupColumnDef = this.gos.get(\"autoGroupColumnDef\");\n    _mergeDeep(res, autoGroupColumnDef);\n    res = this.columnFactory.addColumnDefaultAndTypes(res, colId);\n    if (!this.gos.get(\"treeData\")) {\n      const noFieldOrValueGetter = _missing(res.field) && _missing(res.valueGetter) && _missing(res.filterValueGetter) && res.filter !== \"agGroupColumnFilter\";\n      if (noFieldOrValueGetter) {\n        res.filter = false;\n      }\n    }\n    if (index && index > 0) {\n      res.headerCheckboxSelection = false;\n    }\n    const isSortingCoupled = this.gos.isColumnsSortingCoupledToGroup();\n    const hasOwnData = res.valueGetter || res.field != null;\n    if (isSortingCoupled && !hasOwnData) {\n      res.sortIndex = void 0;\n      res.initialSort = void 0;\n    }\n    return res;\n  }\n  createBaseColDef(rowGroupCol) {\n    const userDef = this.gos.get(\"autoGroupColumnDef\");\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const res = {\n      headerName: localeTextFunc(\"group\", \"Group\")\n    };\n    const userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererSelector);\n    if (!userHasProvidedGroupCellRenderer) {\n      res.cellRenderer = \"agGroupCellRenderer\";\n    }\n    if (rowGroupCol) {\n      const colDef = rowGroupCol.getColDef();\n      Object.assign(res, {\n        // cellRendererParams.groupKey: colDefToCopy.field;\n        headerName: this.columnNameService.getDisplayNameForColumn(rowGroupCol, \"header\"),\n        headerValueGetter: colDef.headerValueGetter\n      });\n      if (colDef.cellRenderer) {\n        Object.assign(res, {\n          cellRendererParams: {\n            innerRenderer: colDef.cellRenderer,\n            innerRendererParams: colDef.cellRendererParams\n          }\n        });\n      }\n      res.showRowGroup = rowGroupCol.getColId();\n    } else {\n      res.showRowGroup = true;\n    }\n    return res;\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/columnDropZoneService.ts\nimport { BeanStub as BeanStub4 } from \"@ag-grid-community/core\";\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/agGridHeaderDropZones.ts\nimport { Component as Component2, _setAriaRole } from \"@ag-grid-community/core\";\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/pivotDropZonePanel.ts\nimport { _createIconNoSpan } from \"@ag-grid-community/core\";\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/baseDropZonePanel.ts\nimport { DragSourceType as DragSourceType2 } from \"@ag-grid-community/core\";\nimport { PillDropZonePanel } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/dropZoneColumnComp.ts\nimport {\n  Component,\n  DragSourceType,\n  KeyCode,\n  RefPlaceholder,\n  SortIndicatorSelector,\n  _loadTemplate\n} from \"@ag-grid-community/core\";\nimport { PillDragComp, VirtualList } from \"@ag-grid-enterprise/core\";\nvar DropZoneColumnComp = class extends PillDragComp {\n  constructor(column, dragSourceDropTarget, ghost, dropZonePurpose, horizontal) {\n    super(\n      dragSourceDropTarget,\n      ghost,\n      horizontal,\n      /* html */\n      `\n                <span role=\"option\">\n                    <span data-ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\" role=\"presentation\"></span>\n                    <span data-ref=\"eText\" class=\"ag-column-drop-cell-text\" aria-hidden=\"true\"></span>\n                    <ag-sort-indicator data-ref=\"eSortIndicator\"></ag-sort-indicator>\n                    <span data-ref=\"eButton\" class=\"ag-column-drop-cell-button\" role=\"presentation\"></span>\n                </span>\n            `,\n      [SortIndicatorSelector]\n    );\n    this.column = column;\n    this.dropZonePurpose = dropZonePurpose;\n    this.eSortIndicator = RefPlaceholder;\n    this.popupShowing = false;\n  }\n  wireBeans(beans) {\n    super.wireBeans(beans);\n    this.popupService = beans.popupService;\n    this.sortController = beans.sortController;\n    this.columnModel = beans.columnModel;\n    this.columnNameService = beans.columnNameService;\n    this.funcColsService = beans.funcColsService;\n    this.aggFuncService = beans.aggFuncService;\n  }\n  postConstruct() {\n    this.displayName = this.columnNameService.getDisplayNameForColumn(this.column, \"columnDrop\");\n    super.postConstruct();\n    this.setupSort();\n    this.addManagedEventListeners({\n      sortChanged: () => {\n        this.setupAria();\n      }\n    });\n    if (this.isGroupingZone()) {\n      this.addManagedPropertyListener(\"groupLockGroupColumns\", () => {\n        this.refreshRemove();\n        this.refreshDraggable();\n        this.setupAria();\n      });\n    }\n  }\n  getItem() {\n    return this.column;\n  }\n  getDisplayName() {\n    return this.displayName;\n  }\n  getTooltip() {\n    return this.column.getColDef().headerTooltip;\n  }\n  addAdditionalAriaInstructions(ariaInstructions, translate) {\n    const isSortSuppressed = this.gos.get(\"rowGroupPanelSuppressSort\");\n    const isFunctionsReadOnly = this.gos.get(\"functionsReadOnly\");\n    if (this.isAggregationZone() && !isFunctionsReadOnly) {\n      const aggregationMenuAria = translate(\n        \"ariaDropZoneColumnValueItemDescription\",\n        \"Press ENTER to change the aggregation type\"\n      );\n      ariaInstructions.push(aggregationMenuAria);\n    }\n    if (this.isGroupingZone() && this.column.isSortable() && !isSortSuppressed) {\n      const sortProgressAria = translate(\"ariaDropZoneColumnGroupItemDescription\", \"Press ENTER to sort\");\n      ariaInstructions.push(sortProgressAria);\n    }\n    super.addAdditionalAriaInstructions(ariaInstructions, translate);\n  }\n  isDraggable() {\n    return this.isReadOnly();\n  }\n  isRemovable() {\n    return this.isReadOnly();\n  }\n  isReadOnly() {\n    return !this.isGroupingAndLocked() && !this.gos.get(\"functionsReadOnly\");\n  }\n  getAriaDisplayName() {\n    const translate = this.localeService.getLocaleTextFunc();\n    const { name, aggFuncName } = this.getColumnAndAggFuncName();\n    const aggSeparator = translate(\"ariaDropZoneColumnComponentAggFuncSeparator\", \" of \");\n    const sortDirection = {\n      asc: translate(\"ariaDropZoneColumnComponentSortAscending\", \"ascending\"),\n      desc: translate(\"ariaDropZoneColumnComponentSortDescending\", \"descending\")\n    };\n    const columnSort = this.column.getSort();\n    const isSortSuppressed = this.gos.get(\"rowGroupPanelSuppressSort\");\n    return [\n      aggFuncName && `${aggFuncName}${aggSeparator}`,\n      name,\n      this.isGroupingZone() && !isSortSuppressed && columnSort && `, ${sortDirection[columnSort]}`\n    ].filter((part) => !!part).join(\"\");\n  }\n  getColumnAndAggFuncName() {\n    const name = this.displayName;\n    let aggFuncName = \"\";\n    if (this.isAggregationZone()) {\n      const aggFunc = this.column.getAggFunc();\n      const aggFuncString = typeof aggFunc === \"string\" ? aggFunc : \"agg\";\n      const localeTextFunc = this.localeService.getLocaleTextFunc();\n      aggFuncName = localeTextFunc(aggFuncString, aggFuncString);\n    }\n    return { name, aggFuncName };\n  }\n  setupSort() {\n    const canSort = this.column.isSortable();\n    const isGroupingZone = this.isGroupingZone();\n    if (!canSort || !isGroupingZone) {\n      return;\n    }\n    if (!this.gos.get(\"rowGroupPanelSuppressSort\")) {\n      this.eSortIndicator.setupSort(this.column, true);\n      const performSort = (event) => {\n        event.preventDefault();\n        const sortUsingCtrl = this.gos.get(\"multiSortKey\") === \"ctrl\";\n        const multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;\n        this.sortController.progressSort(this.column, multiSort, \"uiColumnSorted\");\n      };\n      this.addGuiEventListener(\"click\", performSort);\n      this.addGuiEventListener(\"keydown\", (e) => {\n        const isEnter = e.key === KeyCode.ENTER;\n        if (isEnter && this.isGroupingZone()) {\n          performSort(e);\n        }\n      });\n    }\n  }\n  getDefaultIconName() {\n    return \"hide\";\n  }\n  createGetDragItem() {\n    const { column } = this;\n    return () => {\n      const visibleState = {};\n      visibleState[column.getId()] = column.isVisible();\n      return {\n        columns: [column],\n        visibleState\n      };\n    };\n  }\n  setupComponents() {\n    super.setupComponents();\n    if (this.isAggregationZone() && !this.gos.get(\"functionsReadOnly\")) {\n      this.addGuiEventListener(\"click\", this.onShowAggFuncSelection.bind(this));\n    }\n  }\n  onKeyDown(e) {\n    super.onKeyDown(e);\n    const isEnter = e.key === KeyCode.ENTER;\n    if (isEnter && this.isAggregationZone() && !this.gos.get(\"functionsReadOnly\")) {\n      e.preventDefault();\n      this.onShowAggFuncSelection();\n    }\n  }\n  getDisplayValue() {\n    const { name, aggFuncName } = this.getColumnAndAggFuncName();\n    return this.isAggregationZone() ? `${aggFuncName}(${name})` : name;\n  }\n  onShowAggFuncSelection() {\n    if (this.popupShowing) {\n      return;\n    }\n    this.popupShowing = true;\n    const virtualList = new VirtualList({ cssIdentifier: \"select-agg-func\" });\n    const rows = this.aggFuncService.getFuncNames(this.column);\n    const eGui = this.getGui();\n    const virtualListGui = virtualList.getGui();\n    virtualList.setModel({\n      getRow: function(index) {\n        return rows[index];\n      },\n      getRowCount: function() {\n        return rows.length;\n      }\n    });\n    this.createBean(virtualList);\n    const ePopup = _loadTemplate(\n      /* html*/\n      `<div class=\"ag-select-agg-func-popup\"></div>`\n    );\n    ePopup.style.top = \"0px\";\n    ePopup.style.left = \"0px\";\n    ePopup.appendChild(virtualListGui);\n    ePopup.style.width = `${eGui.clientWidth}px`;\n    const [focusoutListener] = this.addManagedElementListeners(ePopup, {\n      focusout: (e) => {\n        if (!ePopup.contains(e.relatedTarget) && addPopupRes) {\n          addPopupRes.hideFunc();\n        }\n      }\n    });\n    const popupHiddenFunc = (callbackEvent) => {\n      this.destroyBean(virtualList);\n      this.popupShowing = false;\n      if (callbackEvent?.key === \"Escape\") {\n        eGui.focus();\n      }\n      if (focusoutListener) {\n        focusoutListener();\n      }\n    };\n    const translate = this.localeService.getLocaleTextFunc();\n    const addPopupRes = this.popupService.addPopup({\n      modal: true,\n      eChild: ePopup,\n      closeOnEsc: true,\n      closedCallback: popupHiddenFunc,\n      ariaLabel: translate(\"ariaLabelAggregationFunction\", \"Aggregation Function\")\n    });\n    if (addPopupRes) {\n      virtualList.setComponentCreator(this.createAggSelect.bind(this, addPopupRes.hideFunc));\n    }\n    virtualList.addGuiEventListener(\"keydown\", (e) => {\n      if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n        const row = virtualList.getLastFocusedRow();\n        if (row == null) {\n          return;\n        }\n        const comp = virtualList.getComponentAt(row);\n        if (comp) {\n          comp.selectItem();\n        }\n      }\n    });\n    this.popupService.positionPopupByComponent({\n      type: \"aggFuncSelect\",\n      eventSource: eGui,\n      ePopup,\n      keepWithinBounds: true,\n      column: this.column,\n      position: \"under\"\n    });\n    virtualList.refresh();\n    let rowToFocus = rows.findIndex((r) => r === this.column.getAggFunc());\n    if (rowToFocus === -1) {\n      rowToFocus = 0;\n    }\n    virtualList.focusRow(rowToFocus);\n  }\n  createAggSelect(hidePopup, value) {\n    const itemSelected = () => {\n      hidePopup();\n      this.funcColsService.setColumnAggFunc(this.column, value, \"toolPanelDragAndDrop\");\n    };\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const aggFuncString = value.toString();\n    const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n    const comp = new AggItemComp(itemSelected, aggFuncStringTranslated);\n    return comp;\n  }\n  isGroupingAndLocked() {\n    return this.isGroupingZone() && this.columnModel.isColGroupLocked(this.column);\n  }\n  isAggregationZone() {\n    return this.dropZonePurpose === \"aggregation\";\n  }\n  isGroupingZone() {\n    return this.dropZonePurpose === \"rowGroup\";\n  }\n  getDragSourceType() {\n    return DragSourceType.ToolPanel;\n  }\n  destroy() {\n    super.destroy();\n    this.column = null;\n  }\n};\nvar AggItemComp = class extends Component {\n  constructor(itemSelected, value) {\n    super(\n      /* html */\n      `<div class=\"ag-select-agg-func-item\"/>`\n    );\n    this.selectItem = itemSelected;\n    this.getGui().innerText = value;\n    this.addGuiEventListener(\"click\", this.selectItem);\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/baseDropZonePanel.ts\nvar BaseDropZonePanel = class extends PillDropZonePanel {\n  constructor(horizontal, dropZonePurpose) {\n    super(horizontal);\n    this.dropZonePurpose = dropZonePurpose;\n  }\n  wireBeans(beans) {\n    super.wireBeans(beans);\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n  }\n  init(params) {\n    super.init(params);\n    this.addManagedEventListeners({ newColumnsLoaded: this.refreshGui.bind(this) });\n    this.addManagedPropertyListeners(\n      [\"functionsReadOnly\", \"rowGroupPanelSuppressSort\", \"groupLockGroupColumns\"],\n      this.refreshGui.bind(this)\n    );\n  }\n  getItems(dragItem) {\n    return dragItem.columns ?? [];\n  }\n  isInterestedIn(type) {\n    return type === DragSourceType2.HeaderCell || type === DragSourceType2.ToolPanel;\n  }\n  minimumAllowedNewInsertIndex() {\n    const numberOfLockedCols = this.gos.get(\"groupLockGroupColumns\");\n    const numberOfGroupCols = this.funcColsService.getRowGroupColumns().length;\n    if (numberOfLockedCols === -1) {\n      return numberOfGroupCols;\n    }\n    return Math.min(numberOfLockedCols, numberOfGroupCols);\n  }\n  showOrHideColumnOnExit(draggingEvent) {\n    return this.isRowGroupPanel() && !this.gos.get(\"suppressRowGroupHidesColumns\") && !draggingEvent.fromNudge;\n  }\n  handleDragEnterEnd(draggingEvent) {\n    const hideColumnOnExit = this.showOrHideColumnOnExit(draggingEvent);\n    if (hideColumnOnExit) {\n      const dragItem = draggingEvent.dragSource.getDragItem();\n      const columns = dragItem.columns;\n      this.setColumnsVisible(columns, false, \"uiColumnDragged\");\n    }\n  }\n  handleDragLeaveEnd(draggingEvent) {\n    const showColumnOnExit = this.showOrHideColumnOnExit(draggingEvent);\n    if (showColumnOnExit) {\n      const dragItem = draggingEvent.dragSource.getDragItem();\n      this.setColumnsVisible(dragItem.columns, true, \"uiColumnDragged\");\n    }\n  }\n  setColumnsVisible(columns, visible, source) {\n    if (columns) {\n      const allowedCols = columns.filter((c) => !c.getColDef().lockVisible);\n      this.columnModel.setColsVisible(allowedCols, visible, source);\n    }\n  }\n  isRowGroupPanel() {\n    return this.dropZonePurpose === \"rowGroup\";\n  }\n  createPillComponent(column, dropTarget, ghost, horizontal) {\n    return new DropZoneColumnComp(column, dropTarget, ghost, this.dropZonePurpose, horizontal);\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/pivotDropZonePanel.ts\nvar PivotDropZonePanel = class extends BaseDropZonePanel {\n  constructor(horizontal) {\n    super(horizontal, \"pivot\");\n  }\n  postConstruct() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const emptyMessage = localeTextFunc(\"pivotColumnsEmptyMessage\", \"Drag here to set column labels\");\n    const title = localeTextFunc(\"pivots\", \"Column Labels\");\n    super.init({\n      icon: _createIconNoSpan(\"pivotPanel\", this.gos, null),\n      emptyMessage,\n      title\n    });\n    this.addManagedEventListeners({\n      newColumnsLoaded: this.refresh.bind(this),\n      columnPivotChanged: this.refresh.bind(this),\n      columnPivotModeChanged: this.checkVisibility.bind(this)\n    });\n    this.refresh();\n  }\n  getAriaLabel() {\n    const translate = this.localeService.getLocaleTextFunc();\n    const label = translate(\"ariaPivotDropZonePanelLabel\", \"Column Labels\");\n    return label;\n  }\n  getTooltipParams() {\n    const res = super.getTooltipParams();\n    res.location = \"pivotColumnsList\";\n    return res;\n  }\n  refresh() {\n    this.checkVisibility();\n    this.refreshGui();\n  }\n  checkVisibility() {\n    const pivotMode = this.columnModel.isPivotMode();\n    if (this.isHorizontal()) {\n      switch (this.gos.get(\"pivotPanelShow\")) {\n        case \"always\":\n          this.setDisplayed(pivotMode);\n          break;\n        case \"onlyWhenPivoting\": {\n          const pivotActive = this.columnModel.isPivotActive();\n          this.setDisplayed(pivotMode && pivotActive);\n          break;\n        }\n        default:\n          this.setDisplayed(false);\n          break;\n      }\n    } else {\n      this.setDisplayed(pivotMode);\n    }\n  }\n  isItemDroppable(column, draggingEvent) {\n    if (this.gos.get(\"functionsReadOnly\") || !column.isPrimary()) {\n      return false;\n    }\n    return column.isAllowPivot() && (!column.isPivotActive() || this.isSourceEventFromTarget(draggingEvent));\n  }\n  updateItems(columns) {\n    this.funcColsService.setPivotColumns(columns, \"toolPanelUi\");\n  }\n  getIconName() {\n    return this.isPotentialDndItems() ? \"pivot\" : \"notAllowed\";\n  }\n  getExistingItems() {\n    return this.funcColsService.getPivotColumns();\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/rowGroupDropZonePanel.ts\nimport { _createIconNoSpan as _createIconNoSpan2 } from \"@ag-grid-community/core\";\nvar RowGroupDropZonePanel = class extends BaseDropZonePanel {\n  constructor(horizontal) {\n    super(horizontal, \"rowGroup\");\n  }\n  postConstruct() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const emptyMessage = localeTextFunc(\"rowGroupColumnsEmptyMessage\", \"Drag here to set row groups\");\n    const title = localeTextFunc(\"groups\", \"Row Groups\");\n    super.init({\n      icon: _createIconNoSpan2(\"rowGroupPanel\", this.gos, null),\n      emptyMessage,\n      title\n    });\n    this.addManagedEventListeners({ columnRowGroupChanged: this.refreshGui.bind(this) });\n  }\n  getAriaLabel() {\n    const translate = this.localeService.getLocaleTextFunc();\n    const label = translate(\"ariaRowGroupDropZonePanelLabel\", \"Row Groups\");\n    return label;\n  }\n  getTooltipParams() {\n    const res = super.getTooltipParams();\n    res.location = \"rowGroupColumnsList\";\n    return res;\n  }\n  isItemDroppable(column, draggingEvent) {\n    if (this.gos.get(\"functionsReadOnly\") || !column.isPrimary()) {\n      return false;\n    }\n    return column.isAllowRowGroup() && (!column.isRowGroupActive() || this.isSourceEventFromTarget(draggingEvent));\n  }\n  updateItems(columns) {\n    this.funcColsService.setRowGroupColumns(columns, \"toolPanelUi\");\n  }\n  getIconName() {\n    return this.isPotentialDndItems() ? \"group\" : \"notAllowed\";\n  }\n  getExistingItems() {\n    return this.funcColsService.getRowGroupColumns();\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/agGridHeaderDropZones.ts\nvar AgGridHeaderDropZones = class extends Component2 {\n  wireBeans(beans) {\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n  }\n  constructor() {\n    super();\n  }\n  postConstruct() {\n    this.setGui(this.createNorthPanel());\n    const onRowGroupChanged = this.onRowGroupChanged.bind(this);\n    this.addManagedEventListeners({\n      columnRowGroupChanged: onRowGroupChanged,\n      newColumnsLoaded: onRowGroupChanged\n    });\n    this.addManagedPropertyListener(\"rowGroupPanelShow\", onRowGroupChanged);\n    this.addManagedPropertyListener(\"pivotPanelShow\", () => this.onPivotPanelShow());\n    this.onRowGroupChanged();\n  }\n  createNorthPanel() {\n    const topPanelGui = document.createElement(\"div\");\n    topPanelGui.classList.add(\"ag-column-drop-wrapper\");\n    _setAriaRole(topPanelGui, \"presentation\");\n    this.rowGroupComp = new RowGroupDropZonePanel(true);\n    this.createManagedBean(this.rowGroupComp);\n    this.pivotComp = new PivotDropZonePanel(true);\n    this.createManagedBean(this.pivotComp);\n    topPanelGui.appendChild(this.rowGroupComp.getGui());\n    topPanelGui.appendChild(this.pivotComp.getGui());\n    const listener = this.onDropPanelVisible.bind(this);\n    this.addManagedListeners(this.rowGroupComp, {\n      displayChanged: listener\n    });\n    this.addManagedListeners(this.pivotComp, {\n      displayChanged: listener\n    });\n    this.onDropPanelVisible();\n    return topPanelGui;\n  }\n  onDropPanelVisible() {\n    const bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();\n    const classStr = \"ag-column-drop-horizontal-half-width\";\n    this.rowGroupComp.addOrRemoveCssClass(classStr, bothDisplayed);\n    this.pivotComp.addOrRemoveCssClass(classStr, bothDisplayed);\n  }\n  onRowGroupChanged() {\n    if (!this.rowGroupComp) {\n      return;\n    }\n    const rowGroupPanelShow = this.gos.get(\"rowGroupPanelShow\");\n    if (rowGroupPanelShow === \"always\") {\n      this.rowGroupComp.setDisplayed(true);\n    } else if (rowGroupPanelShow === \"onlyWhenGrouping\") {\n      const grouping = !this.funcColsService.isRowGroupEmpty();\n      this.rowGroupComp.setDisplayed(grouping);\n    } else {\n      this.rowGroupComp.setDisplayed(false);\n    }\n  }\n  onPivotPanelShow() {\n    if (!this.pivotComp) {\n      return;\n    }\n    const pivotPanelShow = this.gos.get(\"pivotPanelShow\");\n    if (pivotPanelShow === \"always\") {\n      this.pivotComp.setDisplayed(true);\n    } else if (pivotPanelShow === \"onlyWhenPivoting\") {\n      const pivoting = this.columnModel.isPivotActive();\n      this.pivotComp.setDisplayed(pivoting);\n    } else {\n      this.pivotComp.setDisplayed(false);\n    }\n  }\n};\nvar AgGridHeaderDropZonesSelector = {\n  selector: \"AG-GRID-HEADER-DROP-ZONES\",\n  component: AgGridHeaderDropZones\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/columnDropZoneService.ts\nvar ColumnDropZoneService = class extends BeanStub4 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"columnDropZonesService\";\n  }\n  getDropZoneSelector() {\n    return AgGridHeaderDropZonesSelector;\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/filterAggregatesStage.ts\nimport { BeanStub as BeanStub5 } from \"@ag-grid-community/core\";\nvar FilterAggregatesStage = class extends BeanStub5 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"filterAggregatesStage\";\n  }\n  wireBeans(beans) {\n    this.filterManager = beans.filterManager;\n    this.columnModel = beans.columnModel;\n  }\n  execute(params) {\n    const isPivotMode2 = this.columnModel.isPivotMode();\n    const isAggFilterActive = this.filterManager?.isAggregateFilterPresent() || this.filterManager?.isAggregateQuickFilterPresent();\n    const defaultPrimaryColumnPredicate = (params2) => !params2.node.group;\n    const defaultSecondaryColumnPredicate = (params2) => params2.node.leafGroup;\n    const applyFilterToNode = this.gos.getGroupAggFiltering() || (isPivotMode2 ? defaultSecondaryColumnPredicate : defaultPrimaryColumnPredicate);\n    const { changedPath } = params;\n    const preserveChildren = (node, recursive = false) => {\n      if (node.childrenAfterFilter) {\n        node.childrenAfterAggFilter = node.childrenAfterFilter;\n        if (recursive) {\n          node.childrenAfterAggFilter.forEach((child) => preserveChildren(child, recursive));\n        }\n        this.setAllChildrenCount(node);\n      }\n      if (node.sibling) {\n        node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n      }\n    };\n    const filterChildren = (node) => {\n      node.childrenAfterAggFilter = node.childrenAfterFilter?.filter((child) => {\n        const shouldFilterRow = applyFilterToNode({ node: child });\n        if (shouldFilterRow) {\n          const doesNodePassFilter = this.filterManager.doesRowPassAggregateFilters({ rowNode: child });\n          if (doesNodePassFilter) {\n            preserveChildren(child, true);\n            return true;\n          }\n        }\n        const hasChildPassed = child.childrenAfterAggFilter?.length;\n        return hasChildPassed;\n      }) || null;\n      this.setAllChildrenCount(node);\n      if (node.sibling) {\n        node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n      }\n    };\n    changedPath.forEachChangedNodeDepthFirst(isAggFilterActive ? filterChildren : preserveChildren, true);\n  }\n  setAllChildrenCountTreeData(rowNode) {\n    let allChildrenCount = 0;\n    rowNode.childrenAfterAggFilter.forEach((child) => {\n      allChildrenCount++;\n      allChildrenCount += child.allChildrenCount;\n    });\n    rowNode.setAllChildrenCount(allChildrenCount);\n  }\n  setAllChildrenCountGridGrouping(rowNode) {\n    let allChildrenCount = 0;\n    rowNode.childrenAfterAggFilter.forEach((child) => {\n      if (child.group) {\n        allChildrenCount += child.allChildrenCount;\n      } else {\n        allChildrenCount++;\n      }\n    });\n    rowNode.setAllChildrenCount(allChildrenCount);\n  }\n  setAllChildrenCount(rowNode) {\n    if (!rowNode.hasChildren()) {\n      rowNode.setAllChildrenCount(null);\n      return;\n    }\n    if (this.gos.get(\"treeData\")) {\n      this.setAllChildrenCountTreeData(rowNode);\n    } else {\n      this.setAllChildrenCountGridGrouping(rowNode);\n    }\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/groupFilter/groupFilter.ts\nimport {\n  AgPromise,\n  AgSelect,\n  FilterWrapperComp,\n  RefPlaceholder as RefPlaceholder2,\n  TabGuardComp,\n  _clearElement,\n  _loadTemplate as _loadTemplate2,\n  _setDisplayed,\n  _warnOnce as _warnOnce2\n} from \"@ag-grid-community/core\";\nvar GroupFilter = class extends TabGuardComp {\n  constructor() {\n    super(\n      /* html */\n      `\n            <div class=\"ag-group-filter\">\n                <div data-ref=\"eGroupField\"></div>\n                <div data-ref=\"eUnderlyingFilter\"></div>\n            </div>\n        `\n    );\n    this.eGroupField = RefPlaceholder2;\n    this.eUnderlyingFilter = RefPlaceholder2;\n  }\n  wireBeans(beans) {\n    this.filterManager = beans.filterManager;\n    this.columnNameService = beans.columnNameService;\n    this.funcColsService = beans.funcColsService;\n  }\n  postConstruct() {\n    this.initialiseTabGuard({});\n  }\n  init(params) {\n    this.params = params;\n    this.validateParams();\n    return this.updateGroups().then(() => {\n      this.addManagedEventListeners({ columnRowGroupChanged: () => this.onColumnRowGroupChanged() });\n    });\n  }\n  validateParams() {\n    const { colDef } = this.params;\n    if (colDef.field) {\n      _warnOnce2(\n        'Group Column Filter does not work with the colDef property \"field\". This property will be ignored.'\n      );\n    }\n    if (colDef.filterValueGetter) {\n      _warnOnce2(\n        'Group Column Filter does not work with the colDef property \"filterValueGetter\". This property will be ignored.'\n      );\n    }\n    if (colDef.filterParams) {\n      _warnOnce2(\n        'Group Column Filter does not work with the colDef property \"filterParams\". This property will be ignored.'\n      );\n    }\n  }\n  updateGroups() {\n    const sourceColumns = this.updateGroupField();\n    return this.getUnderlyingFilters(sourceColumns);\n  }\n  getSourceColumns() {\n    this.groupColumn = this.params.column;\n    if (this.gos.get(\"treeData\")) {\n      _warnOnce2(\n        \"Group Column Filter does not work with Tree Data enabled. Please disable Tree Data, or use a different filter.\"\n      );\n      return [];\n    }\n    const sourceColumns = this.funcColsService.getSourceColumnsForGroupColumn(this.groupColumn);\n    if (!sourceColumns) {\n      _warnOnce2(\"Group Column Filter only works on group columns. Please use a different filter.\");\n      return [];\n    }\n    return sourceColumns;\n  }\n  updateGroupField() {\n    _clearElement(this.eGroupField);\n    if (this.eGroupFieldSelect) {\n      this.destroyBean(this.eGroupFieldSelect);\n    }\n    const allSourceColumns = this.getSourceColumns();\n    const sourceColumns = allSourceColumns.filter((sourceColumn) => sourceColumn.isFilterAllowed());\n    if (!sourceColumns.length) {\n      this.selectedColumn = void 0;\n      _setDisplayed(this.eGroupField, false);\n      return null;\n    }\n    if (allSourceColumns.length === 1) {\n      this.selectedColumn = sourceColumns[0];\n      _setDisplayed(this.eGroupField, false);\n    } else {\n      if (!this.selectedColumn || !sourceColumns.some((column) => column.getId() === this.selectedColumn.getId())) {\n        this.selectedColumn = sourceColumns[0];\n      }\n      this.createGroupFieldSelectElement(sourceColumns);\n      this.eGroupField.appendChild(this.eGroupFieldSelect.getGui());\n      this.eGroupField.appendChild(_loadTemplate2(\n        /* html */\n        `<div class=\"ag-filter-separator\"></div>`\n      ));\n      _setDisplayed(this.eGroupField, true);\n    }\n    return sourceColumns;\n  }\n  createGroupFieldSelectElement(sourceColumns) {\n    this.eGroupFieldSelect = this.createManagedBean(new AgSelect());\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    this.eGroupFieldSelect.setLabel(localeTextFunc(\"groupFilterSelect\", \"Select field:\"));\n    this.eGroupFieldSelect.setLabelAlignment(\"top\");\n    this.eGroupFieldSelect.addOptions(\n      sourceColumns.map((sourceColumn) => ({\n        value: sourceColumn.getId(),\n        text: this.columnNameService.getDisplayNameForColumn(sourceColumn, \"groupFilter\", false) ?? void 0\n      }))\n    );\n    this.eGroupFieldSelect.setValue(this.selectedColumn.getId());\n    this.eGroupFieldSelect.onValueChange((newValue) => this.updateSelectedColumn(newValue));\n    this.eGroupFieldSelect.addCssClass(\"ag-group-filter-field-select-wrapper\");\n    if (sourceColumns.length === 1) {\n      this.eGroupFieldSelect.setDisabled(true);\n    }\n  }\n  getUnderlyingFilters(sourceColumns) {\n    if (!sourceColumns) {\n      this.filterColumnPairs = void 0;\n      this.selectedFilter = void 0;\n      this.groupColumn.setFilterActive(false, \"columnRowGroupChanged\");\n      return AgPromise.resolve();\n    }\n    const filterPromises = [];\n    const filterColumnPairs = [];\n    sourceColumns.forEach((column) => {\n      const filterWrapper = this.filterManager.getOrCreateFilterWrapper(column);\n      if (filterWrapper?.filterPromise) {\n        filterPromises.push(\n          filterWrapper.filterPromise.then((filter) => {\n            if (filter) {\n              filterColumnPairs.push({\n                filter,\n                column\n              });\n            }\n            if (column.getId() === this.selectedColumn.getId()) {\n              this.selectedFilter = filter ?? void 0;\n            }\n            return filter;\n          })\n        );\n      }\n    });\n    return AgPromise.all(filterPromises).then(() => {\n      this.filterColumnPairs = filterColumnPairs;\n      this.groupColumn.setFilterActive(this.isFilterActive(), \"columnRowGroupChanged\");\n    });\n  }\n  addUnderlyingFilterElement() {\n    _clearElement(this.eUnderlyingFilter);\n    if (!this.selectedColumn) {\n      return AgPromise.resolve();\n    }\n    const comp = this.createManagedBean(new FilterWrapperComp(this.selectedColumn, \"COLUMN_MENU\"));\n    this.filterWrapperComp = comp;\n    if (!comp.hasFilter()) {\n      return AgPromise.resolve();\n    }\n    this.eUnderlyingFilter.appendChild(comp.getGui());\n    return comp.getFilter()?.then(() => {\n      comp.afterGuiAttached?.(this.afterGuiAttachedParams);\n      if (!this.afterGuiAttachedParams?.suppressFocus && this.eGroupFieldSelect && !this.eGroupFieldSelect.isDisabled()) {\n        this.eGroupFieldSelect.getFocusableElement().focus();\n      }\n    }) ?? AgPromise.resolve();\n  }\n  updateSelectedColumn(columnId) {\n    if (!columnId) {\n      return;\n    }\n    this.filterWrapperComp?.afterGuiDetached();\n    this.destroyBean(this.filterWrapperComp);\n    const selectedFilterColumnPair = this.getFilterColumnPair(columnId);\n    this.selectedColumn = selectedFilterColumnPair?.column;\n    this.selectedFilter = selectedFilterColumnPair?.filter;\n    this.dispatchLocalEvent({\n      type: \"selectedColumnChanged\"\n    });\n    this.addUnderlyingFilterElement();\n  }\n  isFilterActive() {\n    return !!this.filterColumnPairs?.some(({ filter }) => filter.isFilterActive());\n  }\n  doesFilterPass() {\n    return true;\n  }\n  getModel() {\n    return null;\n  }\n  setModel() {\n    return AgPromise.resolve();\n  }\n  afterGuiAttached(params) {\n    this.afterGuiAttachedParams = params;\n    this.addUnderlyingFilterElement();\n  }\n  afterGuiDetached() {\n    _clearElement(this.eUnderlyingFilter);\n    this.selectedFilter?.afterGuiDetached?.();\n  }\n  onColumnRowGroupChanged() {\n    this.updateGroups().then(() => {\n      this.dispatchLocalEvent({\n        type: \"columnRowGroupChanged\"\n      });\n    });\n  }\n  getFilterColumnPair(columnId) {\n    if (!columnId) {\n      return void 0;\n    }\n    return this.filterColumnPairs?.find(({ column }) => column.getId() === columnId);\n  }\n  getSelectedFilter() {\n    return this.selectedFilter;\n  }\n  getSelectedColumn() {\n    return this.selectedColumn;\n  }\n  isFilterAllowed() {\n    return !!this.selectedColumn;\n  }\n  destroy() {\n    super.destroy();\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/groupFilter/groupFloatingFilter.ts\nimport { AgInputTextField, AgPromise as AgPromise2, Component as Component3, RefPlaceholder as RefPlaceholder3, _clearElement as _clearElement2 } from \"@ag-grid-community/core\";\nvar GroupFloatingFilterComp = class extends Component3 {\n  constructor() {\n    super(\n      /* html */\n      `\n            <div data-ref=\"eFloatingFilter\" class=\"ag-group-floating-filter ag-floating-filter-input\" role=\"presentation\"></div>\n        `\n    );\n    this.eFloatingFilter = RefPlaceholder3;\n    this.haveAddedColumnListeners = false;\n  }\n  wireBeans(beans) {\n    this.columnNameService = beans.columnNameService;\n    this.filterManager = beans.filterManager;\n  }\n  init(params) {\n    this.params = params;\n    const canShowUnderlyingFloatingFilter = this.gos.get(\"groupDisplayType\") === \"multipleColumns\";\n    return new AgPromise2((resolve) => {\n      this.params.parentFilterInstance((parentFilterInstance) => {\n        this.parentFilterInstance = parentFilterInstance;\n        if (canShowUnderlyingFloatingFilter) {\n          this.setupUnderlyingFloatingFilterElement().then(() => resolve());\n        } else {\n          this.setupReadOnlyFloatingFilterElement();\n          resolve();\n        }\n      });\n    }).then(() => {\n      this.addManagedListeners(this.parentFilterInstance, {\n        selectedColumnChanged: this.onSelectedColumnChanged.bind(this),\n        columnRowGroupChanged: this.onColumnRowGroupChanged.bind(this)\n      });\n    });\n  }\n  onParamsUpdated(params) {\n    this.refresh(params);\n  }\n  refresh(params) {\n    this.params = params;\n    this.setParams();\n  }\n  setParams() {\n    const displayName = this.columnNameService.getDisplayNameForColumn(\n      this.params.column,\n      \"header\",\n      true\n    );\n    const translate = this.localeService.getLocaleTextFunc();\n    this.eFloatingFilterText?.setInputAriaLabel(`${displayName} ${translate(\"ariaFilterInput\", \"Filter Input\")}`);\n  }\n  setupReadOnlyFloatingFilterElement() {\n    if (!this.eFloatingFilterText) {\n      this.eFloatingFilterText = this.createManagedBean(new AgInputTextField());\n      this.eFloatingFilterText.setDisabled(true).addGuiEventListener(\"click\", () => this.params.showParentFilter());\n      this.setParams();\n    }\n    this.updateDisplayedValue();\n    this.eFloatingFilter.appendChild(this.eFloatingFilterText.getGui());\n  }\n  setupUnderlyingFloatingFilterElement() {\n    this.showingUnderlyingFloatingFilter = false;\n    this.underlyingFloatingFilter = void 0;\n    _clearElement2(this.eFloatingFilter);\n    const column = this.parentFilterInstance.getSelectedColumn();\n    if (column && !column.isVisible()) {\n      const compDetails = this.filterManager.getFloatingFilterCompDetails(column, this.params.showParentFilter);\n      if (compDetails) {\n        if (!this.haveAddedColumnListeners) {\n          this.haveAddedColumnListeners = true;\n          this.addManagedListeners(column, {\n            visibleChanged: this.onColumnVisibleChanged.bind(this),\n            colDefChanged: this.onColDefChanged.bind(this)\n          });\n        }\n        return compDetails.newAgStackInstance().then((floatingFilter) => {\n          this.underlyingFloatingFilter = floatingFilter;\n          this.underlyingFloatingFilter?.onParentModelChanged(\n            this.parentFilterInstance.getSelectedFilter()?.getModel()\n          );\n          this.appendChild(floatingFilter.getGui());\n          this.showingUnderlyingFloatingFilter = true;\n        });\n      }\n    }\n    this.setupReadOnlyFloatingFilterElement();\n    return AgPromise2.resolve();\n  }\n  onColumnVisibleChanged() {\n    this.setupUnderlyingFloatingFilterElement();\n  }\n  onColDefChanged(event) {\n    if (!event.column) {\n      return;\n    }\n    const compDetails = this.filterManager.getFloatingFilterCompDetails(\n      event.column,\n      this.params.showParentFilter\n    );\n    if (compDetails) {\n      if (this.underlyingFloatingFilter?.refresh) {\n        this.underlyingFloatingFilter.refresh(compDetails.params);\n      } else {\n        this.underlyingFloatingFilter?.onParamsUpdated?.(compDetails.params);\n      }\n    }\n  }\n  onParentModelChanged(_model, event) {\n    if (this.showingUnderlyingFloatingFilter) {\n      this.underlyingFloatingFilter?.onParentModelChanged(\n        this.parentFilterInstance.getSelectedFilter()?.getModel(),\n        event\n      );\n    } else {\n      this.updateDisplayedValue();\n    }\n  }\n  updateDisplayedValue() {\n    if (!this.parentFilterInstance || !this.eFloatingFilterText) {\n      return;\n    }\n    const selectedFilter = this.parentFilterInstance.getSelectedFilter();\n    if (!selectedFilter) {\n      this.eFloatingFilterText.setValue(\"\");\n      this.eFloatingFilterText.setDisplayed(false);\n      return;\n    }\n    this.eFloatingFilterText.setDisplayed(true);\n    if (selectedFilter.getModelAsString) {\n      const filterModel = selectedFilter.getModel();\n      this.eFloatingFilterText.setValue(filterModel == null ? \"\" : selectedFilter.getModelAsString(filterModel));\n    } else {\n      this.eFloatingFilterText.setValue(\"\");\n    }\n  }\n  onSelectedColumnChanged() {\n    if (!this.showingUnderlyingFloatingFilter) {\n      this.updateDisplayedValue();\n    }\n  }\n  onColumnRowGroupChanged() {\n    if (!this.showingUnderlyingFloatingFilter) {\n      this.updateDisplayedValue();\n    }\n  }\n  destroy() {\n    super.destroy();\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/groupStage.ts\nimport {\n  BeanStub as BeanStub6,\n  RowNode,\n  _areEqual,\n  _exists as _exists2,\n  _existsAndNotEmpty as _existsAndNotEmpty2,\n  _last as _last2,\n  _removeFromArray,\n  _sortRowNodesByOrder,\n  _warnOnce as _warnOnce3\n} from \"@ag-grid-community/core\";\n\n// enterprise-modules/row-grouping/src/rowGrouping/batchRemover.ts\nvar BatchRemover = class {\n  constructor() {\n    this.allSets = {};\n    this.allParents = [];\n  }\n  removeFromChildrenAfterGroup(parent, child) {\n    const set = this.getSet(parent);\n    set.removeFromChildrenAfterGroup[child.id] = true;\n  }\n  isRemoveFromAllLeafChildren(parent, child) {\n    const set = this.getSet(parent);\n    return !!set.removeFromAllLeafChildren[child.id];\n  }\n  preventRemoveFromAllLeafChildren(parent, child) {\n    const set = this.getSet(parent);\n    delete set.removeFromAllLeafChildren[child.id];\n  }\n  removeFromAllLeafChildren(parent, child) {\n    const set = this.getSet(parent);\n    set.removeFromAllLeafChildren[child.id] = true;\n  }\n  getSet(parent) {\n    if (!this.allSets[parent.id]) {\n      this.allSets[parent.id] = {\n        removeFromAllLeafChildren: {},\n        removeFromChildrenAfterGroup: {}\n      };\n      this.allParents.push(parent);\n    }\n    return this.allSets[parent.id];\n  }\n  getAllParents() {\n    return this.allParents;\n  }\n  flush() {\n    this.allParents.forEach((parent) => {\n      const nodeDetails = this.allSets[parent.id];\n      parent.childrenAfterGroup = parent.childrenAfterGroup.filter(\n        (child) => !nodeDetails.removeFromChildrenAfterGroup[child.id]\n      );\n      parent.allLeafChildren = parent.allLeafChildren?.filter((child) => !nodeDetails.removeFromAllLeafChildren[child.id]) ?? null;\n      parent.updateHasChildren();\n      if (parent.sibling) {\n        parent.sibling.childrenAfterGroup = parent.childrenAfterGroup;\n        parent.sibling.allLeafChildren = parent.allLeafChildren;\n      }\n    });\n    this.allSets = {};\n    this.allParents.length = 0;\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/groupStage.ts\nvar GroupStage = class extends BeanStub6 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"groupStage\";\n    /** Hierarchical node cache to speed up tree data node insertion */\n    this.treeNodeCache = new TreeDataNodeCache();\n  }\n  wireBeans(beans) {\n    this.beans = beans;\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n    this.selectableService = beans.selectableService;\n    this.valueService = beans.valueService;\n    this.selectionService = beans.selectionService;\n    this.showRowGroupColsService = beans.showRowGroupColsService;\n  }\n  execute(params) {\n    const details = this.createGroupingDetails(params);\n    if (details.transactions) {\n      this.handleTransaction(details);\n    } else {\n      const afterColsChanged = params.afterColumnsChanged === true;\n      this.shotgunResetEverything(details, afterColsChanged);\n    }\n    if (!details.usingTreeData) {\n      this.positionLeafsAndGroups(params.changedPath);\n      this.orderGroups(details);\n    }\n    this.selectableService.updateSelectableAfterGrouping();\n  }\n  positionLeafsAndGroups(changedPath) {\n    changedPath.forEachChangedNodeDepthFirst((group) => {\n      if (group.childrenAfterGroup) {\n        const leafNodes = [];\n        const groupNodes = [];\n        let unbalancedNode;\n        group.childrenAfterGroup.forEach((row) => {\n          if (!row.childrenAfterGroup?.length) {\n            leafNodes.push(row);\n          } else {\n            if (row.key === \"\" && !unbalancedNode) {\n              unbalancedNode = row;\n            } else {\n              groupNodes.push(row);\n            }\n          }\n        });\n        if (unbalancedNode) {\n          groupNodes.push(unbalancedNode);\n        }\n        group.childrenAfterGroup = [...leafNodes, ...groupNodes];\n      }\n    }, false);\n  }\n  createGroupingDetails(params) {\n    const { rowNode, changedPath, rowNodeTransactions, rowNodeOrder } = params;\n    const usingTreeData = this.gos.get(\"treeData\");\n    const groupedCols = usingTreeData ? null : this.funcColsService.getRowGroupColumns();\n    const details = {\n      expandByDefault: this.gos.get(\"groupDefaultExpanded\"),\n      groupedCols,\n      rootNode: rowNode,\n      pivotMode: this.columnModel.isPivotMode(),\n      groupedColCount: usingTreeData || !groupedCols ? 0 : groupedCols.length,\n      rowNodeOrder,\n      transactions: rowNodeTransactions,\n      // if no transaction, then it's shotgun, changed path would be 'not active' at this point anyway\n      changedPath,\n      groupAllowUnbalanced: this.gos.get(\"groupAllowUnbalanced\"),\n      isGroupOpenByDefault: this.gos.getCallback(\"isGroupOpenByDefault\"),\n      initialGroupOrderComparator: this.gos.getCallback(\"initialGroupOrderComparator\"),\n      usingTreeData,\n      suppressGroupMaintainValueType: this.gos.get(\"suppressGroupMaintainValueType\"),\n      getDataPath: usingTreeData ? this.gos.get(\"getDataPath\") : void 0,\n      keyCreators: groupedCols?.map((column) => column.getColDef().keyCreator) ?? []\n    };\n    return details;\n  }\n  handleTransaction(details) {\n    details.transactions.forEach((tran) => {\n      const batchRemover = !details.usingTreeData ? new BatchRemover() : void 0;\n      if (_existsAndNotEmpty2(tran.remove)) {\n        this.removeNodes(tran.remove, details, batchRemover);\n      }\n      if (_existsAndNotEmpty2(tran.update)) {\n        this.moveNodesInWrongPath(tran.update, details, batchRemover);\n      }\n      if (_existsAndNotEmpty2(tran.add)) {\n        this.insertNodes(tran.add, details, false);\n      }\n      if (batchRemover) {\n        const parentsWithChildrenRemoved = batchRemover.getAllParents().slice();\n        batchRemover.flush();\n        this.removeEmptyGroups(parentsWithChildrenRemoved, details);\n      }\n    });\n    if (details.rowNodeOrder) {\n      this.sortChildren(details);\n    }\n  }\n  // this is used when doing delta updates, eg Redux, keeps nodes in right order\n  sortChildren(details) {\n    details.changedPath.forEachChangedNodeDepthFirst(\n      (node) => {\n        const didSort = _sortRowNodesByOrder(node.childrenAfterGroup, details.rowNodeOrder);\n        if (didSort) {\n          details.changedPath.addParentNode(node);\n        }\n      },\n      false,\n      true\n    );\n  }\n  orderGroups(details) {\n    const comparator = details.initialGroupOrderComparator;\n    if (_exists2(comparator)) {\n      recursiveSort(details.rootNode);\n    }\n    function recursiveSort(rowNode) {\n      const doSort = _exists2(rowNode.childrenAfterGroup) && // we only want to sort groups, so we do not sort leafs (a leaf group has leafs as children)\n      !rowNode.leafGroup;\n      if (doSort) {\n        rowNode.childrenAfterGroup.sort((nodeA, nodeB) => comparator({ nodeA, nodeB }));\n        rowNode.childrenAfterGroup.forEach((childNode) => recursiveSort(childNode));\n      }\n    }\n  }\n  getExistingPathForNode(node, details) {\n    const res = [];\n    let pointer = details.usingTreeData ? node : node.parent;\n    while (pointer && pointer !== details.rootNode) {\n      res.push({\n        key: pointer.key,\n        rowGroupColumn: pointer.rowGroupColumn,\n        field: pointer.field\n      });\n      pointer = pointer.parent;\n    }\n    res.reverse();\n    return res;\n  }\n  /**\n   * Topological sort of the given row nodes based on the grouping hierarchy, where parents come before children.\n   * Used to ensure tree data is moved in the correct order (see AG-11678)\n   */\n  topoSort(rowNodes, details) {\n    const sortedNodes = [];\n    const idLookup = Object.fromEntries(rowNodes.map((node, i2) => [node.id, i2]));\n    const stillToFind = new Set(Object.keys(idLookup));\n    const queue = [details.rootNode];\n    let i = 0;\n    while (i < queue.length) {\n      const node = queue[i];\n      i++;\n      if (node === void 0) {\n        continue;\n      }\n      if (node.id && node.id in idLookup) {\n        sortedNodes.push(rowNodes[idLookup[node.id]]);\n        stillToFind.delete(node.id);\n      }\n      if (stillToFind.size === 0) {\n        return sortedNodes;\n      }\n      const children = node.childrenAfterGroup ?? [];\n      for (let i2 = 0; i2 < children.length; i2++) {\n        queue.push(children[i2]);\n      }\n    }\n    return sortedNodes;\n  }\n  moveNodesInWrongPath(childNodes, details, batchRemover) {\n    const sorted = details.usingTreeData ? this.topoSort(childNodes, details) : childNodes;\n    sorted.forEach((childNode) => {\n      if (details.changedPath.isActive()) {\n        details.changedPath.addParentNode(childNode.parent);\n      }\n      const infoToKeyMapper = (item) => item.key;\n      const oldPath = this.getExistingPathForNode(childNode, details).map(infoToKeyMapper);\n      const newPath = this.getGroupInfo(childNode, details).map(infoToKeyMapper);\n      const nodeInCorrectPath = _areEqual(oldPath, newPath);\n      if (!nodeInCorrectPath) {\n        this.moveNode(childNode, details, batchRemover);\n      }\n    });\n  }\n  moveNode(childNode, details, batchRemover) {\n    this.removeNodesInStages([childNode], details, batchRemover);\n    this.insertOneNode(childNode, details, true, batchRemover);\n    childNode.setData(childNode.data);\n    if (details.changedPath.isActive()) {\n      const newParent = childNode.parent;\n      details.changedPath.addParentNode(newParent);\n    }\n  }\n  removeNodes(leafRowNodes, details, batchRemover) {\n    this.removeNodesInStages(leafRowNodes, details, batchRemover);\n    if (details.changedPath.isActive()) {\n      leafRowNodes.forEach((rowNode) => details.changedPath.addParentNode(rowNode.parent));\n    }\n  }\n  removeNodesInStages(leafRowNodes, details, batchRemover) {\n    this.removeNodesFromParents(leafRowNodes, details, batchRemover);\n    if (details.usingTreeData) {\n      const nodeParents = leafRowNodes.map((n) => n.parent);\n      this.removeEmptyGroups(nodeParents, details);\n    }\n  }\n  forEachParentGroup(details, group, callback) {\n    let pointer = group;\n    while (pointer && pointer !== details.rootNode) {\n      callback(pointer);\n      pointer = pointer.parent;\n    }\n  }\n  removeNodesFromParents(nodesToRemove, details, provided) {\n    const batchRemoverIsLocal = provided == null;\n    const batchRemoverToUse = provided ? provided : new BatchRemover();\n    nodesToRemove.forEach((nodeToRemove) => {\n      this.removeFromParent(nodeToRemove, batchRemoverToUse);\n      this.forEachParentGroup(details, nodeToRemove.parent, (parentNode) => {\n        batchRemoverToUse.removeFromAllLeafChildren(parentNode, nodeToRemove);\n      });\n    });\n    if (batchRemoverIsLocal) {\n      batchRemoverToUse.flush();\n    }\n  }\n  removeEmptyGroups(possibleEmptyGroups, details) {\n    let checkAgain = true;\n    const groupShouldBeRemoved = (rowNode) => {\n      const mapKey = this.getChildrenMappedKey(rowNode.key, rowNode.rowGroupColumn);\n      const parentRowNode = rowNode.parent;\n      const groupAlreadyRemoved = parentRowNode?.childrenMapped ? !parentRowNode.childrenMapped[mapKey] : true;\n      if (groupAlreadyRemoved) {\n        return false;\n      }\n      return rowNode.isEmptyRowGroupNode();\n    };\n    while (checkAgain) {\n      checkAgain = false;\n      const batchRemover = new BatchRemover();\n      possibleEmptyGroups.forEach((possibleEmptyGroup) => {\n        this.forEachParentGroup(details, possibleEmptyGroup, (rowNode) => {\n          const shouldBeRemoved = groupShouldBeRemoved(rowNode);\n          if (shouldBeRemoved && details.usingTreeData && rowNode.data && details.getDataPath?.(rowNode.data)) {\n            rowNode.setGroup(\n              (rowNode.childrenAfterGroup && rowNode.childrenAfterGroup.length > 0) ?? false\n            );\n          } else if (shouldBeRemoved) {\n            checkAgain = true;\n            this.removeFromParent(rowNode, batchRemover);\n            rowNode.setSelectedParams({ newValue: false, source: \"rowGroupChanged\" });\n          }\n        });\n      });\n      batchRemover.flush();\n    }\n  }\n  // removes the node from the parent by:\n  // a) removing from childrenAfterGroup (using batchRemover if present, otherwise immediately)\n  // b) removing from childrenMapped (immediately)\n  // c) setRowTop(null) - as the rowRenderer uses this to know the RowNode is no longer needed\n  // d) setRowIndex(null) - as the rowNode will no longer be displayed.\n  removeFromParent(child, batchRemover) {\n    if (child.parent) {\n      if (batchRemover) {\n        batchRemover.removeFromChildrenAfterGroup(child.parent, child);\n      } else {\n        _removeFromArray(child.parent.childrenAfterGroup, child);\n        child.parent.updateHasChildren();\n      }\n    }\n    const mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);\n    if (child.parent?.childrenMapped != void 0) {\n      delete child.parent.childrenMapped[mapKey];\n    }\n    child.setRowTop(null);\n    child.setRowIndex(null);\n  }\n  /**\n   * This is idempotent, but relies on the `key` field being the same throughout a RowNode's lifetime\n   */\n  addToParent(child, parent) {\n    const mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);\n    if (parent?.childrenMapped != null) {\n      if (parent?.childrenMapped?.[mapKey] !== child) {\n        parent.childrenMapped[mapKey] = child;\n        parent.childrenAfterGroup.push(child);\n        parent.setGroup(true);\n      }\n    }\n  }\n  areGroupColsEqual(d1, d2) {\n    if (d1 == null || d2 == null || d1.pivotMode !== d2.pivotMode) {\n      return false;\n    }\n    return _areEqual(d1.groupedCols, d2.groupedCols) && _areEqual(d1.keyCreators, d2.keyCreators);\n  }\n  checkAllGroupDataAfterColsChanged(details) {\n    const recurse = (rowNodes) => {\n      if (!rowNodes) {\n        return;\n      }\n      rowNodes.forEach((rowNode) => {\n        const isLeafNode = !details.usingTreeData && !rowNode.group;\n        if (isLeafNode) {\n          return;\n        }\n        const groupInfo = {\n          field: rowNode.field,\n          key: rowNode.key,\n          rowGroupColumn: rowNode.rowGroupColumn,\n          leafNode: rowNode.allLeafChildren?.[0]\n        };\n        this.setGroupData(rowNode, groupInfo, details);\n        recurse(rowNode.childrenAfterGroup);\n      });\n    };\n    recurse(details.rootNode.childrenAfterGroup);\n  }\n  shotgunResetEverything(details, afterColumnsChanged) {\n    if (this.noChangeInGroupingColumns(details, afterColumnsChanged)) {\n      return;\n    }\n    this.selectionService.filterFromSelection((node) => node && !node.group);\n    const { rootNode, groupedCols } = details;\n    rootNode.leafGroup = details.usingTreeData ? false : groupedCols.length === 0;\n    rootNode.childrenAfterGroup = [];\n    rootNode.childrenMapped = {};\n    rootNode.updateHasChildren();\n    const sibling = rootNode.sibling;\n    if (sibling) {\n      sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      sibling.childrenMapped = rootNode.childrenMapped;\n    }\n    this.insertNodes(rootNode.allLeafChildren, details, false);\n  }\n  noChangeInGroupingColumns(details, afterColumnsChanged) {\n    let noFurtherProcessingNeeded = false;\n    const groupDisplayColumns = this.showRowGroupColsService.getShowRowGroupCols();\n    const newGroupDisplayColIds = groupDisplayColumns ? groupDisplayColumns.map((c) => c.getId()).join(\"-\") : \"\";\n    if (afterColumnsChanged) {\n      noFurtherProcessingNeeded = details.usingTreeData || this.areGroupColsEqual(details, this.oldGroupingDetails);\n      if (this.oldGroupDisplayColIds !== newGroupDisplayColIds) {\n        this.checkAllGroupDataAfterColsChanged(details);\n      }\n    }\n    this.oldGroupingDetails = details;\n    this.oldGroupDisplayColIds = newGroupDisplayColIds;\n    return noFurtherProcessingNeeded;\n  }\n  insertNodes(newRowNodes, details, isMove) {\n    if (details.usingTreeData) {\n      this.buildNodeCacheFromRows(newRowNodes, details);\n    } else {\n      this.treeNodeCache.clear();\n    }\n    newRowNodes.forEach((rowNode) => {\n      this.insertOneNode(rowNode, details, isMove);\n      if (details.changedPath.isActive()) {\n        details.changedPath.addParentNode(rowNode.parent);\n      }\n    });\n  }\n  insertOneNode(childNode, details, isMove, batchRemover) {\n    const path = this.getGroupInfo(childNode, details);\n    const level = details.usingTreeData ? path.length - 1 : void 0;\n    const parentGroup = this.findParentForNode(childNode, path, details, batchRemover, level);\n    if (details.usingTreeData) {\n      const info = _last2(path);\n      childNode.parent = parentGroup;\n      childNode.level = path.length;\n      this.ensureRowNodeFields(childNode, this.getChildrenMappedKey(info.key, info.rowGroupColumn));\n      this.setGroupData(childNode, info, details);\n      if (!isMove) {\n        this.setExpandedInitialValue(details, childNode);\n      }\n      this.addToParent(childNode, parentGroup);\n    } else {\n      if (!parentGroup.group) {\n        _warnOnce3(`duplicate group keys for row data, keys should be unique`, [\n          parentGroup.data,\n          childNode.data\n        ]);\n      }\n      childNode.parent = parentGroup;\n      childNode.level = path.length;\n      parentGroup.childrenAfterGroup.push(childNode);\n      parentGroup.updateHasChildren();\n    }\n  }\n  findParentForNode(childNode, path, details, batchRemover, stopLevel) {\n    let nextNode = details.rootNode;\n    path.forEach((groupInfo, level) => {\n      if (stopLevel !== void 0 && level >= stopLevel) {\n        return;\n      }\n      nextNode = this.getOrCreateNextNode(nextNode, path, groupInfo, level, details);\n      if (!batchRemover?.isRemoveFromAllLeafChildren(nextNode, childNode)) {\n        nextNode.allLeafChildren.push(childNode);\n      } else {\n        batchRemover?.preventRemoveFromAllLeafChildren(nextNode, childNode);\n      }\n    });\n    return nextNode;\n  }\n  getOrCreateNextNode(parentGroup, path, groupInfo, level, details) {\n    const key = this.getChildrenMappedKey(groupInfo.key, groupInfo.rowGroupColumn);\n    let nextNode = parentGroup?.childrenMapped?.[key];\n    if (!nextNode) {\n      if (details.usingTreeData && this.treeNodeCache.has(path, level, key)) {\n        nextNode = this.treeNodeCache.get(path, level, key);\n        nextNode.parent = parentGroup;\n      } else {\n        nextNode = this.createGroup(groupInfo, parentGroup, level, details);\n      }\n      this.addToParent(nextNode, parentGroup);\n    }\n    return nextNode;\n  }\n  /**\n   * Directly re-initialises the `TreeDataNodeCache`\n   */\n  buildNodeCacheFromRows(rowNodes, details) {\n    let width = 0;\n    const paths = rowNodes.map((node) => {\n      const info = this.getGroupInfo(node, details);\n      width = Math.max(width, info.length);\n      return info;\n    });\n    this.treeNodeCache.clear();\n    for (let level = 0; level < width; level++) {\n      for (const [rowIdx, path] of paths.entries()) {\n        const isDefined = path[level] !== void 0;\n        const isLeaf = path[level + 1] === void 0;\n        if (!isDefined) {\n          continue;\n        }\n        const info = path[level];\n        const currentValue = this.treeNodeCache.get(path, level, info.key);\n        if (currentValue != null) {\n          continue;\n        }\n        this.treeNodeCache.set(\n          path,\n          level,\n          info.key,\n          isLeaf ? this.ensureRowNodeFields(rowNodes[rowIdx], info.key) : null\n        );\n      }\n    }\n    this.backfillGroups(this.treeNodeCache.inner(), details.rootNode, 0, details);\n  }\n  ensureRowNodeFields(rowNode, key) {\n    if (key !== void 0) {\n      rowNode.key = key;\n    }\n    rowNode.childrenMapped ?? (rowNode.childrenMapped = {});\n    rowNode.allLeafChildren ?? (rowNode.allLeafChildren = []);\n    rowNode.childrenAfterGroup ?? (rowNode.childrenAfterGroup = []);\n    return rowNode;\n  }\n  /** Walks the TreeDataNodeCache recursively and backfills `null` entries with filler group nodes */\n  backfillGroups(cache, parent, level, details) {\n    for (const [key, value] of Object.entries(cache)) {\n      if (value.node === null) {\n        value.node = this.createGroup({ key, rowGroupColumn: null, field: null }, parent, level, details);\n      }\n      this.backfillGroups(value.subtree, value.node, level + 1, details);\n    }\n  }\n  createGroup(groupInfo, parent, level, details) {\n    const groupNode = new RowNode(this.beans);\n    groupNode.group = true;\n    groupNode.field = groupInfo.field;\n    groupNode.rowGroupColumn = groupInfo.rowGroupColumn;\n    this.setGroupData(groupNode, groupInfo, details);\n    groupNode.key = groupInfo.key;\n    groupNode.id = this.createGroupId(groupNode, parent, details.usingTreeData, level);\n    groupNode.level = level;\n    groupNode.leafGroup = details.usingTreeData ? false : level === details.groupedColCount - 1;\n    groupNode.allLeafChildren = [];\n    groupNode.setAllChildrenCount(0);\n    groupNode.rowGroupIndex = details.usingTreeData ? null : level;\n    groupNode.childrenAfterGroup = [];\n    groupNode.childrenMapped = {};\n    groupNode.updateHasChildren();\n    groupNode.parent = parent;\n    this.setExpandedInitialValue(details, groupNode);\n    return groupNode;\n  }\n  createGroupId(node, parent, usingTreeData, level) {\n    let createGroupId;\n    if (usingTreeData) {\n      createGroupId = (node2, parent2, level2) => {\n        if (level2 < 0) {\n          return null;\n        }\n        const parentId = parent2 ? createGroupId(parent2, parent2.parent, level2 - 1) : null;\n        return `${parentId == null ? \"\" : parentId + \"-\"}${level2}-${node2.key}`;\n      };\n    } else {\n      createGroupId = (node2, parent2) => {\n        if (!node2.rowGroupColumn) {\n          return null;\n        }\n        const parentId = parent2 ? createGroupId(parent2, parent2.parent, 0) : null;\n        return `${parentId == null ? \"\" : parentId + \"-\"}${node2.rowGroupColumn.getColId()}-${node2.key}`;\n      };\n    }\n    return RowNode.ID_PREFIX_ROW_GROUP + createGroupId(node, parent, level);\n  }\n  setGroupData(groupNode, groupInfo, details) {\n    groupNode.groupData = {};\n    const groupDisplayCols = this.showRowGroupColsService.getShowRowGroupCols();\n    groupDisplayCols.forEach((col) => {\n      const isTreeData = details.usingTreeData;\n      if (isTreeData) {\n        groupNode.groupData[col.getColId()] = groupInfo.key;\n        return;\n      }\n      const groupColumn = groupNode.rowGroupColumn;\n      const isRowGroupDisplayed = groupColumn !== null && col.isRowGroupDisplayed(groupColumn.getId());\n      if (isRowGroupDisplayed) {\n        if (details.suppressGroupMaintainValueType) {\n          groupNode.groupData[col.getColId()] = groupInfo.key;\n        } else {\n          groupNode.groupData[col.getColId()] = this.valueService.getValue(groupColumn, groupInfo.leafNode);\n        }\n      }\n    });\n  }\n  getChildrenMappedKey(key, rowGroupColumn) {\n    if (rowGroupColumn) {\n      return rowGroupColumn.getId() + \"-\" + key;\n    }\n    return key;\n  }\n  setExpandedInitialValue(details, groupNode) {\n    if (details.pivotMode && groupNode.leafGroup) {\n      groupNode.expanded = false;\n      return;\n    }\n    const userCallback = details.isGroupOpenByDefault;\n    if (userCallback) {\n      const params = {\n        rowNode: groupNode,\n        field: groupNode.field,\n        key: groupNode.key,\n        level: groupNode.level,\n        rowGroupColumn: groupNode.rowGroupColumn\n      };\n      groupNode.expanded = userCallback(params) == true;\n      return;\n    }\n    if (details.expandByDefault === -1) {\n      groupNode.expanded = true;\n      return;\n    }\n    groupNode.expanded = groupNode.level < details.expandByDefault;\n  }\n  getGroupInfo(rowNode, details) {\n    if (details.usingTreeData) {\n      return this.getGroupInfoFromCallback(rowNode, details);\n    }\n    return this.getGroupInfoFromGroupColumns(rowNode, details);\n  }\n  getGroupInfoFromCallback(rowNode, details) {\n    const keys = details.getDataPath?.(rowNode.data);\n    if (keys === void 0 || keys.length === 0) {\n      _warnOnce3(`getDataPath() should not return an empty path for data ${rowNode.data}`);\n    }\n    return keys?.map((key) => ({ key, field: null, rowGroupColumn: null })) ?? [];\n  }\n  getGroupInfoFromGroupColumns(rowNode, details) {\n    const res = [];\n    details.groupedCols.forEach((groupCol) => {\n      let key = this.valueService.getKeyForNode(groupCol, rowNode);\n      let keyExists = key !== null && key !== void 0 && key !== \"\";\n      const createGroupForEmpty = details.pivotMode || !details.groupAllowUnbalanced;\n      if (createGroupForEmpty && !keyExists) {\n        key = \"\";\n        keyExists = true;\n      }\n      if (keyExists) {\n        const item = {\n          key,\n          field: groupCol.getColDef().field,\n          rowGroupColumn: groupCol,\n          leafNode: rowNode\n        };\n        res.push(item);\n      }\n    });\n    return res;\n  }\n};\nvar TreeDataNodeCache = class {\n  constructor() {\n    this.cache = {};\n  }\n  traverse(path, level) {\n    let cache = this.cache;\n    let i = 0;\n    while (i <= level) {\n      const key = path[i].key;\n      if (!(key in cache)) {\n        cache[key] = { node: null, subtree: {} };\n      }\n      cache = cache[key].subtree;\n      i++;\n    }\n    return cache;\n  }\n  set(path, level, key, value) {\n    const cache = this.traverse(path, level - 1);\n    cache[key] = { node: value, subtree: {} };\n  }\n  has(path, level, key) {\n    const cache = this.traverse(path, level - 1);\n    return key in cache;\n  }\n  get(path, level, key) {\n    const cache = this.traverse(path, level - 1);\n    return cache[key]?.node;\n  }\n  clear() {\n    this.cache = {};\n  }\n  inner() {\n    return this.cache;\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/pivotColDefService.ts\nimport { BeanStub as BeanStub7, _cloneObject, _iterateObject as _iterateObject2 } from \"@ag-grid-community/core\";\nvar PIVOT_ROW_TOTAL_PREFIX = \"PivotRowTotal_\";\nvar PivotColDefService = class extends BeanStub7 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"pivotColDefService\";\n  }\n  wireBeans(beans) {\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n    this.columnNameService = beans.columnNameService;\n  }\n  postConstruct() {\n    const getFieldSeparator = () => this.gos.get(\"serverSidePivotResultFieldSeparator\") ?? \"_\";\n    this.fieldSeparator = getFieldSeparator();\n    this.addManagedPropertyListener(\"serverSidePivotResultFieldSeparator\", () => {\n      this.fieldSeparator = getFieldSeparator();\n    });\n    const getPivotDefaultExpanded = () => this.gos.get(\"pivotDefaultExpanded\");\n    this.pivotDefaultExpanded = getPivotDefaultExpanded();\n    this.addManagedPropertyListener(\"pivotDefaultExpanded\", () => {\n      this.pivotDefaultExpanded = getPivotDefaultExpanded();\n    });\n  }\n  createPivotColumnDefs(uniqueValues) {\n    const pivotColumnGroupDefs = this.createPivotColumnsFromUniqueValues(uniqueValues);\n    function extractColDefs(input, arr = []) {\n      input.forEach((def) => {\n        if (def.children !== void 0) {\n          extractColDefs(def.children, arr);\n        } else {\n          arr.push(def);\n        }\n      });\n      return arr;\n    }\n    const pivotColumnDefs = extractColDefs(pivotColumnGroupDefs);\n    this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs);\n    this.addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs);\n    this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs);\n    const pivotColumnDefsClone = pivotColumnDefs.map((colDef) => _cloneObject(colDef));\n    return {\n      pivotColumnGroupDefs,\n      pivotColumnDefs: pivotColumnDefsClone\n    };\n  }\n  createPivotColumnsFromUniqueValues(uniqueValues) {\n    const pivotColumns = this.funcColsService.getPivotColumns();\n    const maxDepth = pivotColumns.length;\n    const pivotColumnGroupDefs = this.recursivelyBuildGroup(\n      0,\n      uniqueValues,\n      [],\n      maxDepth,\n      pivotColumns\n    );\n    return pivotColumnGroupDefs;\n  }\n  recursivelyBuildGroup(index, uniqueValue, pivotKeys, maxDepth, primaryPivotColumns) {\n    const measureColumns = this.funcColsService.getValueColumns();\n    if (index >= maxDepth) {\n      return this.buildMeasureCols(pivotKeys);\n    }\n    const primaryPivotColumnDefs = primaryPivotColumns[index].getColDef();\n    const comparator = this.headerNameComparator.bind(this, primaryPivotColumnDefs.pivotComparator);\n    if (measureColumns.length === 1 && this.gos.get(\"removePivotHeaderRowWhenSingleValueColumn\") && index === maxDepth - 1) {\n      const leafCols = [];\n      _iterateObject2(uniqueValue, (key) => {\n        const newPivotKeys = [...pivotKeys, key];\n        const colDef = this.createColDef(measureColumns[0], key, newPivotKeys);\n        colDef.columnGroupShow = \"open\";\n        leafCols.push(colDef);\n      });\n      leafCols.sort(comparator);\n      return leafCols;\n    }\n    const groups = [];\n    _iterateObject2(uniqueValue, (key, value) => {\n      const openByDefault = this.pivotDefaultExpanded === -1 || index < this.pivotDefaultExpanded;\n      const newPivotKeys = [...pivotKeys, key];\n      groups.push({\n        children: this.recursivelyBuildGroup(index + 1, value, newPivotKeys, maxDepth, primaryPivotColumns),\n        headerName: key,\n        pivotKeys: newPivotKeys,\n        columnGroupShow: \"open\",\n        openByDefault,\n        groupId: this.generateColumnGroupId(newPivotKeys)\n      });\n    });\n    groups.sort(comparator);\n    return groups;\n  }\n  buildMeasureCols(pivotKeys) {\n    const measureColumns = this.funcColsService.getValueColumns();\n    if (measureColumns.length === 0) {\n      return [this.createColDef(null, \"-\", pivotKeys)];\n    }\n    return measureColumns.map((measureCol) => {\n      const columnName = this.columnNameService.getDisplayNameForColumn(measureCol, \"header\");\n      return {\n        ...this.createColDef(measureCol, columnName, pivotKeys),\n        columnGroupShow: \"open\"\n      };\n    });\n  }\n  addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs) {\n    if (this.gos.get(\"suppressExpandablePivotGroups\") || this.gos.get(\"pivotColumnGroupTotals\")) {\n      return;\n    }\n    const recursivelyAddSubTotals = (groupDef, currentPivotColumnDefs, acc) => {\n      const group = groupDef;\n      if (group.children) {\n        const childAcc = /* @__PURE__ */ new Map();\n        group.children.forEach((grp) => {\n          recursivelyAddSubTotals(grp, currentPivotColumnDefs, childAcc);\n        });\n        const firstGroup = !group.children.some((child) => child.children);\n        this.funcColsService.getValueColumns().forEach((valueColumn) => {\n          const columnName = this.columnNameService.getDisplayNameForColumn(\n            valueColumn,\n            \"header\"\n          );\n          const totalColDef = this.createColDef(valueColumn, columnName, groupDef.pivotKeys);\n          totalColDef.pivotTotalColumnIds = childAcc.get(valueColumn.getColId());\n          totalColDef.columnGroupShow = \"closed\";\n          totalColDef.aggFunc = valueColumn.getAggFunc();\n          if (!firstGroup) {\n            const children = groupDef.children;\n            children.push(totalColDef);\n            currentPivotColumnDefs.push(totalColDef);\n          }\n        });\n        this.merge(acc, childAcc);\n      } else {\n        const def = groupDef;\n        if (!def.pivotValueColumn) {\n          return;\n        }\n        const pivotValueColId = def.pivotValueColumn.getColId();\n        const arr = acc.has(pivotValueColId) ? acc.get(pivotValueColId) : [];\n        arr.push(def.colId);\n        acc.set(pivotValueColId, arr);\n      }\n    };\n    pivotColumnGroupDefs.forEach((groupDef) => {\n      recursivelyAddSubTotals(groupDef, pivotColumnDefs, /* @__PURE__ */ new Map());\n    });\n  }\n  addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs) {\n    if (!this.gos.get(\"pivotColumnGroupTotals\")) {\n      return;\n    }\n    const insertAfter = this.gos.get(\"pivotColumnGroupTotals\") === \"after\";\n    const valueCols = this.funcColsService.getValueColumns();\n    const aggFuncs = valueCols.map((valueCol) => valueCol.getAggFunc());\n    if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {\n      return;\n    }\n    const valueColumn = valueCols[0];\n    pivotColumnGroupDefs.forEach((groupDef) => {\n      this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter);\n    });\n  }\n  recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter) {\n    const group = groupDef;\n    if (!group.children) {\n      const def = groupDef;\n      return def.colId ? [def.colId] : null;\n    }\n    let colIds = [];\n    group.children.forEach((grp) => {\n      const childColIds = this.recursivelyAddPivotTotal(grp, pivotColumnDefs, valueColumn, insertAfter);\n      if (childColIds) {\n        colIds = colIds.concat(childColIds);\n      }\n    });\n    if (group.children.length > 1) {\n      const localeTextFunc = this.localeService.getLocaleTextFunc();\n      const headerName = localeTextFunc(\"pivotColumnGroupTotals\", \"Total\");\n      const totalColDef = this.createColDef(valueColumn, headerName, groupDef.pivotKeys, true);\n      totalColDef.pivotTotalColumnIds = colIds;\n      totalColDef.aggFunc = valueColumn.getAggFunc();\n      const children = groupDef.children;\n      insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);\n      pivotColumnDefs.push(totalColDef);\n    }\n    return colIds;\n  }\n  addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs) {\n    if (!this.gos.get(\"pivotRowTotals\")) {\n      return;\n    }\n    const insertAfter = this.gos.get(\"pivotRowTotals\") === \"after\";\n    const valueColumns = this.funcColsService.getValueColumns();\n    const valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();\n    for (let i = 0; i < valueCols.length; i++) {\n      const valueCol = valueCols[i];\n      let colIds = [];\n      pivotColumnGroupDefs.forEach((groupDef) => {\n        colIds = colIds.concat(this.extractColIdsForValueColumn(groupDef, valueCol));\n      });\n      const withGroup = valueCols.length > 1 || !this.gos.get(\"removePivotHeaderRowWhenSingleValueColumn\");\n      this.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, valueCol, colIds, insertAfter, withGroup);\n    }\n  }\n  extractColIdsForValueColumn(groupDef, valueColumn) {\n    const group = groupDef;\n    if (!group.children) {\n      const colDef = group;\n      return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];\n    }\n    let colIds = [];\n    group.children.forEach((grp) => {\n      this.extractColIdsForValueColumn(grp, valueColumn);\n      const childColIds = this.extractColIdsForValueColumn(grp, valueColumn);\n      colIds = colIds.concat(childColIds);\n    });\n    return colIds;\n  }\n  createRowGroupTotal(parentChildren, pivotColumnDefs, valueColumn, colIds, insertAfter, addGroup) {\n    const measureColumns = this.funcColsService.getValueColumns();\n    let colDef;\n    if (measureColumns.length === 0) {\n      colDef = this.createColDef(null, \"-\", []);\n    } else {\n      const columnName = this.columnNameService.getDisplayNameForColumn(valueColumn, \"header\");\n      colDef = this.createColDef(valueColumn, columnName, []);\n      colDef.pivotTotalColumnIds = colIds;\n    }\n    colDef.colId = PIVOT_ROW_TOTAL_PREFIX + colDef.colId;\n    pivotColumnDefs.push(colDef);\n    const valueGroup = addGroup ? {\n      children: [colDef],\n      pivotKeys: [],\n      groupId: `${PIVOT_ROW_TOTAL_PREFIX}_pivotGroup_${valueColumn.getColId()}`\n    } : colDef;\n    insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);\n  }\n  createColDef(valueColumn, headerName, pivotKeys, totalColumn = false) {\n    const colDef = {};\n    if (valueColumn) {\n      const colDefToCopy = valueColumn.getColDef();\n      Object.assign(colDef, colDefToCopy);\n      colDef.hide = false;\n    }\n    colDef.headerName = headerName;\n    colDef.colId = this.generateColumnId(\n      pivotKeys || [],\n      valueColumn && !totalColumn ? valueColumn.getColId() : \"\"\n    );\n    colDef.field = colDef.colId;\n    colDef.valueGetter = (params) => params.data?.[params.colDef.field];\n    colDef.pivotKeys = pivotKeys;\n    colDef.pivotValueColumn = valueColumn;\n    if (colDef.filter === true) {\n      colDef.filter = \"agNumberColumnFilter\";\n    }\n    return colDef;\n  }\n  sameAggFuncs(aggFuncs) {\n    if (aggFuncs.length == 1) {\n      return true;\n    }\n    for (let i = 1; i < aggFuncs.length; i++) {\n      if (aggFuncs[i] !== aggFuncs[0]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  headerNameComparator(userComparator, a, b) {\n    if (userComparator) {\n      return userComparator(a.headerName, b.headerName);\n    } else {\n      if (a.headerName && !b.headerName) {\n        return 1;\n      } else if (!a.headerName && b.headerName) {\n        return -1;\n      }\n      if (!a.headerName || !b.headerName) {\n        return 0;\n      }\n      if (a.headerName < b.headerName) {\n        return -1;\n      }\n      if (a.headerName > b.headerName) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n  merge(m1, m2) {\n    m2.forEach((value, key) => {\n      const existingList = m1.has(key) ? m1.get(key) : [];\n      const updatedList = [...existingList, ...value];\n      m1.set(key, updatedList);\n    });\n  }\n  generateColumnGroupId(pivotKeys) {\n    const pivotCols = this.funcColsService.getPivotColumns().map((col) => col.getColId());\n    return `pivotGroup_${pivotCols.join(\"-\")}_${pivotKeys.join(\"-\")}`;\n  }\n  generateColumnId(pivotKeys, measureColumnId) {\n    const pivotCols = this.funcColsService.getPivotColumns().map((col) => col.getColId());\n    return `pivot_${pivotCols.join(\"-\")}_${pivotKeys.join(\"-\")}_${measureColumnId}`;\n  }\n  /**\n   * Used by the SSRM to create secondary columns from provided fields\n   * @param fields\n   */\n  createColDefsFromFields(fields) {\n    const uniqueValues = {};\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      const parts = field.split(this.fieldSeparator);\n      let level = uniqueValues;\n      for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        if (level[part] == null) {\n          level[part] = {};\n        }\n        level = level[part];\n      }\n    }\n    const uniqueValuesToGroups = (id, key, uniqueValues2, depth) => {\n      const children = [];\n      for (const key2 in uniqueValues2) {\n        const item = uniqueValues2[key2];\n        const child = uniqueValuesToGroups(`${id}${this.fieldSeparator}${key2}`, key2, item, depth + 1);\n        children.push(child);\n      }\n      if (children.length === 0) {\n        const potentialAggCol = this.columnModel.getColDefCol(key);\n        if (potentialAggCol) {\n          const headerName = this.columnNameService.getDisplayNameForColumn(potentialAggCol, \"header\") ?? key;\n          const colDef = this.createColDef(potentialAggCol, headerName, void 0, false);\n          colDef.colId = id;\n          colDef.aggFunc = potentialAggCol.getAggFunc();\n          colDef.valueGetter = (params) => params.data?.[id];\n          return colDef;\n        }\n        const col = {\n          colId: id,\n          headerName: key,\n          // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n          // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n          valueGetter: (params) => params.data?.[id]\n        };\n        return col;\n      }\n      const collapseSingleChildren = this.gos.get(\"removePivotHeaderRowWhenSingleValueColumn\");\n      if (collapseSingleChildren && children.length === 1 && \"colId\" in children[0]) {\n        children[0].headerName = key;\n        return children[0];\n      }\n      const group = {\n        openByDefault: this.pivotDefaultExpanded === -1 || depth < this.pivotDefaultExpanded,\n        groupId: id,\n        headerName: key,\n        children\n      };\n      return group;\n    };\n    const res = [];\n    for (const key in uniqueValues) {\n      const item = uniqueValues[key];\n      const col = uniqueValuesToGroups(key, key, item, 0);\n      res.push(col);\n    }\n    return res;\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/pivotStage.ts\nimport { BeanStub as BeanStub8, _iterateObject as _iterateObject3, _missing as _missing2 } from \"@ag-grid-community/core\";\nvar EXCEEDED_MAX_UNIQUE_VALUES = \"Exceeded maximum allowed pivot column count.\";\nvar PivotStage = class extends BeanStub8 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"pivotStage\";\n    this.uniqueValues = {};\n    this.lastTimeFailed = false;\n    this.maxUniqueValues = -1;\n    this.currentUniqueCount = 0;\n  }\n  wireBeans(beans) {\n    this.valueService = beans.valueService;\n    this.columnModel = beans.columnModel;\n    this.pivotResultColsService = beans.pivotResultColsService;\n    this.funcColsService = beans.funcColsService;\n    this.pivotColDefService = beans.pivotColDefService;\n  }\n  execute(params) {\n    const changedPath = params.changedPath;\n    if (this.columnModel.isPivotActive()) {\n      this.executePivotOn(changedPath);\n    } else {\n      this.executePivotOff(changedPath);\n    }\n  }\n  executePivotOff(changedPath) {\n    this.aggregationColumnsHashLastTime = null;\n    this.uniqueValues = {};\n    if (this.pivotResultColsService.isPivotResultColsPresent()) {\n      this.pivotResultColsService.setPivotResultCols(null, \"rowModelUpdated\");\n      if (changedPath) {\n        changedPath.setInactive();\n      }\n    }\n  }\n  executePivotOn(changedPath) {\n    const numberOfAggregationColumns = this.funcColsService.getValueColumns().length ?? 1;\n    const configuredMaxCols = this.gos.get(\"pivotMaxGeneratedColumns\");\n    this.maxUniqueValues = configuredMaxCols === -1 ? -1 : configuredMaxCols / numberOfAggregationColumns;\n    let uniqueValues;\n    try {\n      uniqueValues = this.bucketUpRowNodes(changedPath);\n    } catch (e) {\n      if (e.message === EXCEEDED_MAX_UNIQUE_VALUES) {\n        this.pivotResultColsService.setPivotResultCols([], \"rowModelUpdated\");\n        const event = {\n          type: \"pivotMaxColumnsExceeded\",\n          message: e.message\n        };\n        this.eventService.dispatchEvent(event);\n        this.lastTimeFailed = true;\n        return;\n      }\n      throw e;\n    }\n    const uniqueValuesChanged = this.setUniqueValues(uniqueValues);\n    const aggregationColumns = this.funcColsService.getValueColumns();\n    const aggregationColumnsHash = aggregationColumns.map((column) => `${column.getId()}-${column.getColDef().headerName}`).join(\"#\");\n    const aggregationFuncsHash = aggregationColumns.map((column) => column.getAggFunc().toString()).join(\"#\");\n    const aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;\n    const aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;\n    this.aggregationColumnsHashLastTime = aggregationColumnsHash;\n    this.aggregationFuncsHashLastTime = aggregationFuncsHash;\n    const groupColumnsHash = this.funcColsService.getRowGroupColumns().map((column) => column.getId()).join(\"#\");\n    const groupColumnsChanged = groupColumnsHash !== this.groupColumnsHashLastTime;\n    this.groupColumnsHashLastTime = groupColumnsHash;\n    const pivotRowTotals = this.gos.get(\"pivotRowTotals\");\n    const pivotColumnGroupTotals = this.gos.get(\"pivotColumnGroupTotals\");\n    const suppressExpandablePivotGroups = this.gos.get(\"suppressExpandablePivotGroups\");\n    const removePivotHeaderRowWhenSingleValueColumn = this.gos.get(\"removePivotHeaderRowWhenSingleValueColumn\");\n    const anyGridOptionsChanged = pivotRowTotals !== this.pivotRowTotalsLastTime || pivotColumnGroupTotals !== this.pivotColumnGroupTotalsLastTime || suppressExpandablePivotGroups !== this.suppressExpandablePivotGroupsLastTime || removePivotHeaderRowWhenSingleValueColumn !== this.removePivotHeaderRowWhenSingleValueColumnLastTime;\n    this.pivotRowTotalsLastTime = pivotRowTotals;\n    this.pivotColumnGroupTotalsLastTime = pivotColumnGroupTotals;\n    this.suppressExpandablePivotGroupsLastTime = suppressExpandablePivotGroups;\n    this.removePivotHeaderRowWhenSingleValueColumnLastTime = removePivotHeaderRowWhenSingleValueColumn;\n    if (this.lastTimeFailed || uniqueValuesChanged || aggregationColumnsChanged || groupColumnsChanged || aggregationFuncsChanged || anyGridOptionsChanged) {\n      const { pivotColumnGroupDefs, pivotColumnDefs } = this.pivotColDefService.createPivotColumnDefs(\n        this.uniqueValues\n      );\n      this.pivotColumnDefs = pivotColumnDefs;\n      this.pivotResultColsService.setPivotResultCols(pivotColumnGroupDefs, \"rowModelUpdated\");\n      if (changedPath) {\n        changedPath.setInactive();\n      }\n    }\n    this.lastTimeFailed = false;\n  }\n  setUniqueValues(newValues) {\n    const json1 = JSON.stringify(newValues);\n    const json2 = JSON.stringify(this.uniqueValues);\n    const uniqueValuesChanged = json1 !== json2;\n    if (uniqueValuesChanged) {\n      this.uniqueValues = newValues;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  bucketUpRowNodes(changedPath) {\n    this.currentUniqueCount = 0;\n    const uniqueValues = {};\n    changedPath.forEachChangedNodeDepthFirst((node) => {\n      if (node.leafGroup) {\n        node.childrenMapped = null;\n      }\n    });\n    const recursivelyBucketFilteredChildren = (node) => {\n      if (node.leafGroup) {\n        this.bucketRowNode(node, uniqueValues);\n      } else {\n        node.childrenAfterFilter?.forEach(recursivelyBucketFilteredChildren);\n      }\n    };\n    changedPath.executeFromRootNode(recursivelyBucketFilteredChildren);\n    return uniqueValues;\n  }\n  bucketRowNode(rowNode, uniqueValues) {\n    const pivotColumns = this.funcColsService.getPivotColumns();\n    if (pivotColumns.length === 0) {\n      rowNode.childrenMapped = null;\n    } else {\n      rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter, pivotColumns, 0, uniqueValues);\n    }\n    if (rowNode.sibling) {\n      rowNode.sibling.childrenMapped = rowNode.childrenMapped;\n    }\n  }\n  bucketChildren(children, pivotColumns, pivotIndex, uniqueValues) {\n    const mappedChildren = {};\n    const pivotColumn = pivotColumns[pivotIndex];\n    children.forEach((child) => {\n      let key = this.valueService.getKeyForNode(pivotColumn, child);\n      if (_missing2(key)) {\n        key = \"\";\n      }\n      if (!uniqueValues[key]) {\n        this.currentUniqueCount += 1;\n        uniqueValues[key] = {};\n        const doesGeneratedColMaxExist = this.maxUniqueValues !== -1;\n        const hasExceededColMax = this.currentUniqueCount > this.maxUniqueValues;\n        if (doesGeneratedColMaxExist && hasExceededColMax) {\n          throw Error(EXCEEDED_MAX_UNIQUE_VALUES);\n        }\n      }\n      if (!mappedChildren[key]) {\n        mappedChildren[key] = [];\n      }\n      mappedChildren[key].push(child);\n    });\n    if (pivotIndex === pivotColumns.length - 1) {\n      return mappedChildren;\n    } else {\n      const result = {};\n      _iterateObject3(mappedChildren, (key, value) => {\n        result[key] = this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);\n      });\n      return result;\n    }\n  }\n  getPivotColumnDefs() {\n    return this.pivotColumnDefs;\n  }\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/rowGroupingApi.ts\nfunction addAggFunc(beans, key, aggFunc) {\n  if (beans.aggFuncService) {\n    beans.aggFuncService.addAggFuncs({ key: aggFunc });\n  }\n}\nfunction addAggFuncs(beans, aggFuncs) {\n  if (beans.aggFuncService) {\n    beans.aggFuncService.addAggFuncs(aggFuncs);\n  }\n}\nfunction clearAggFuncs(beans) {\n  if (beans.aggFuncService) {\n    beans.aggFuncService.clear();\n  }\n}\nfunction setColumnAggFunc(beans, key, aggFunc) {\n  beans.funcColsService.setColumnAggFunc(key, aggFunc, \"api\");\n}\nfunction isPivotMode(beans) {\n  return beans.columnModel.isPivotMode();\n}\nfunction getPivotResultColumn(beans, pivotKeys, valueColKey) {\n  return beans.pivotResultColsService.lookupPivotResultCol(pivotKeys, valueColKey);\n}\nfunction setValueColumns(beans, colKeys) {\n  beans.funcColsService.setValueColumns(colKeys, \"api\");\n}\nfunction getValueColumns(beans) {\n  return beans.funcColsService.getValueColumns();\n}\nfunction removeValueColumn(beans, colKey) {\n  beans.funcColsService.removeValueColumns([colKey], \"api\");\n}\nfunction removeValueColumns(beans, colKeys) {\n  beans.funcColsService.removeValueColumns(colKeys, \"api\");\n}\nfunction addValueColumn(beans, colKey) {\n  beans.funcColsService.addValueColumns([colKey], \"api\");\n}\nfunction addValueColumns(beans, colKeys) {\n  beans.funcColsService.addValueColumns(colKeys, \"api\");\n}\nfunction setRowGroupColumns(beans, colKeys) {\n  beans.funcColsService.setRowGroupColumns(colKeys, \"api\");\n}\nfunction removeRowGroupColumn(beans, colKey) {\n  beans.funcColsService.removeRowGroupColumns([colKey], \"api\");\n}\nfunction removeRowGroupColumns(beans, colKeys) {\n  beans.funcColsService.removeRowGroupColumns(colKeys, \"api\");\n}\nfunction addRowGroupColumn(beans, colKey) {\n  beans.funcColsService.addRowGroupColumns([colKey], \"api\");\n}\nfunction addRowGroupColumns(beans, colKeys) {\n  beans.funcColsService.addRowGroupColumns(colKeys, \"api\");\n}\nfunction moveRowGroupColumn(beans, fromIndex, toIndex) {\n  beans.funcColsService.moveRowGroupColumn(fromIndex, toIndex, \"api\");\n}\nfunction getRowGroupColumns(beans) {\n  return beans.funcColsService.getRowGroupColumns();\n}\nfunction setPivotColumns(beans, colKeys) {\n  beans.funcColsService.setPivotColumns(colKeys, \"api\");\n}\nfunction removePivotColumn(beans, colKey) {\n  beans.funcColsService.removePivotColumns([colKey], \"api\");\n}\nfunction removePivotColumns(beans, colKeys) {\n  beans.funcColsService.removePivotColumns(colKeys, \"api\");\n}\nfunction addPivotColumn(beans, colKey) {\n  beans.funcColsService.addPivotColumns([colKey], \"api\");\n}\nfunction addPivotColumns(beans, colKeys) {\n  beans.funcColsService.addPivotColumns(colKeys, \"api\");\n}\nfunction getPivotColumns(beans) {\n  return beans.funcColsService.getPivotColumns();\n}\nfunction setPivotResultColumns(beans, colDefs) {\n  beans.pivotResultColsService.setPivotResultCols(colDefs, \"api\");\n}\nfunction getPivotResultColumns(beans) {\n  const pivotResultCols = beans.pivotResultColsService.getPivotResultCols();\n  return pivotResultCols ? pivotResultCols.list : null;\n}\n\n// enterprise-modules/row-grouping/src/rowGrouping/showRowGroupColsService.ts\nimport { BeanStub as BeanStub9 } from \"@ag-grid-community/core\";\nvar ShowRowGroupColsService = class extends BeanStub9 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"showRowGroupColsService\";\n  }\n  wireBeans(beans) {\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n  }\n  refresh() {\n    this.showRowGroupCols = [];\n    this.showRowGroupColsMap = {};\n    this.columnModel.getCols().forEach((col) => {\n      const colDef = col.getColDef();\n      const showRowGroup = colDef.showRowGroup;\n      const isString = typeof showRowGroup === \"string\";\n      const isTrue = showRowGroup === true;\n      if (!isString && !isTrue) {\n        return;\n      }\n      this.showRowGroupCols.push(col);\n      if (isString) {\n        this.showRowGroupColsMap[showRowGroup] = col;\n      } else {\n        const rowGroupCols = this.funcColsService.getRowGroupColumns();\n        rowGroupCols.forEach((rowGroupCol) => {\n          this.showRowGroupColsMap[rowGroupCol.getId()] = col;\n        });\n      }\n    });\n  }\n  getShowRowGroupCols() {\n    return this.showRowGroupCols;\n  }\n  getShowRowGroupCol(id) {\n    return this.showRowGroupColsMap[id];\n  }\n};\n\n// enterprise-modules/row-grouping/src/version.ts\nvar VERSION = \"32.0.0\";\n\n// enterprise-modules/row-grouping/src/rowGroupingModule.ts\nvar RowGroupingCoreModule = {\n  version: VERSION,\n  moduleName: `${ModuleNames.RowGroupingModule}-core`,\n  beans: [\n    AggregationStage,\n    FilterAggregatesStage,\n    GroupStage,\n    PivotColDefService,\n    PivotStage,\n    AggFuncService,\n    AutoColService,\n    ShowRowGroupColsService,\n    ColumnDropZoneService\n  ],\n  userComponents: [\n    {\n      name: \"agGroupRowRenderer\",\n      classImp: GroupCellRenderer\n    },\n    {\n      name: \"agGroupCellRenderer\",\n      classImp: GroupCellRenderer\n    }\n  ],\n  controllers: [{ name: \"groupCellRendererCtrl\", classImp: GroupCellRendererCtrl }],\n  dependantModules: [EnterpriseCoreModule]\n};\nvar RowGroupingApiModule = {\n  version: VERSION,\n  moduleName: `${ModuleNames.RowGroupingModule}-api`,\n  apiFunctions: {\n    addAggFunc,\n    addAggFuncs,\n    clearAggFuncs,\n    setColumnAggFunc,\n    isPivotMode,\n    getPivotResultColumn,\n    setValueColumns,\n    getValueColumns,\n    removeValueColumn,\n    removeValueColumns,\n    addValueColumn,\n    addValueColumns,\n    setRowGroupColumns,\n    removeRowGroupColumn,\n    removeRowGroupColumns,\n    addRowGroupColumn,\n    addRowGroupColumns,\n    getRowGroupColumns,\n    moveRowGroupColumn,\n    setPivotColumns,\n    removePivotColumn,\n    removePivotColumns,\n    addPivotColumn,\n    addPivotColumns,\n    getPivotColumns,\n    setPivotResultColumns,\n    getPivotResultColumns\n  },\n  dependantModules: [RowGroupingCoreModule]\n};\nvar GroupFilterModule = {\n  version: VERSION,\n  moduleName: \"@ag-grid-enterprise/group-filter\",\n  userComponents: [{ name: \"agGroupColumnFilter\", classImp: GroupFilter }],\n  dependantModules: [RowGroupingCoreModule, _ColumnFilterModule]\n};\nvar GroupFloatingFilterModule = {\n  version: VERSION,\n  moduleName: \"@ag-grid-enterprise/group-floating-filter\",\n  userComponents: [{ name: \"agGroupColumnFloatingFilter\", classImp: GroupFloatingFilterComp }],\n  dependantModules: [GroupFilterModule, _FloatingFilterModule]\n};\nvar RowGroupingModule = {\n  version: VERSION,\n  moduleName: ModuleNames.RowGroupingModule,\n  dependantModules: [RowGroupingCoreModule, RowGroupingApiModule, GroupFilterModule, GroupFloatingFilterModule]\n};\n\n// enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/valueDropZonePanel.ts\nimport { _createIconNoSpan as _createIconNoSpan3 } from \"@ag-grid-community/core\";\nvar ValuesDropZonePanel = class extends BaseDropZonePanel {\n  constructor(horizontal) {\n    super(horizontal, \"aggregation\");\n  }\n  postConstruct() {\n    const localeTextFunc = this.localeService.getLocaleTextFunc();\n    const emptyMessage = localeTextFunc(\"valueColumnsEmptyMessage\", \"Drag here to aggregate\");\n    const title = localeTextFunc(\"values\", \"Values\");\n    super.init({\n      icon: _createIconNoSpan3(\"valuePanel\", this.gos, null),\n      emptyMessage,\n      title\n    });\n    this.addManagedEventListeners({ columnValueChanged: this.refreshGui.bind(this) });\n  }\n  getAriaLabel() {\n    const translate = this.localeService.getLocaleTextFunc();\n    const label = translate(\"ariaValuesDropZonePanelLabel\", \"Values\");\n    return label;\n  }\n  getTooltipParams() {\n    const res = super.getTooltipParams();\n    res.location = \"valueColumnsList\";\n    return res;\n  }\n  getIconName() {\n    return this.isPotentialDndItems() ? \"aggregate\" : \"notAllowed\";\n  }\n  isItemDroppable(column, draggingEvent) {\n    if (this.gos.get(\"functionsReadOnly\") || !column.isPrimary()) {\n      return false;\n    }\n    return column.isAllowValue() && (!column.isValueActive() || this.isSourceEventFromTarget(draggingEvent));\n  }\n  updateItems(columns) {\n    this.funcColsService.setValueColumns(columns, \"toolPanelUi\");\n  }\n  getExistingItems() {\n    return this.funcColsService.getValueColumns();\n  }\n};\nexport {\n  PivotDropZonePanel,\n  RowGroupDropZonePanel,\n  RowGroupingModule,\n  ValuesDropZonePanel\n};\n"],
  "mappings": "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",
  "names": ["ModuleNames", "_ColumnFilterModule", "_FloatingFilterModule", "EnterpriseCoreModule", "GroupCellRenderer", "GroupCellRendererCtrl", "BeanStub", "_exists", "_existsAndNotEmpty", "_includes", "_iterateObject", "_last", "defaultAggFuncNames", "AggFuncService", "aggMap", "aggSum", "aggFirst", "aggLast", "aggMin", "aggMax", "aggCount", "aggAvg", "column", "func", "allKeys", "allowed", "funcExists", "fctName", "defaultAgg", "aggFuncs", "key", "aggFunc", "name", "userAllowedFuncs", "params", "values", "result", "i", "value", "existingAggData", "sum", "count", "currentValue", "valueToAdd", "BeanStub2", "_errorOnce", "_missingOrEmpty", "AggregationStage", "beans", "noValueColumns", "noUserAgg", "changedPathActive", "aggDetails", "pivotActive", "measureColumns", "pivotColumns", "callback", "rowNode", "notPivoting", "measureColumnsMissing", "pivotColumnsMissing", "aggResult", "secondaryColumns", "canSkipTotalColumns", "secondaryCol", "colDef", "keys", "aggResults", "currentColId", "changedValueColumns", "notChangedValueColumns", "values2d", "oldValues", "valueColumn", "index", "colId", "childNode", "mappedSet", "mapPointer", "valueColumns", "filteredOnly", "valueColumnCount", "nodeList", "rowCount", "j", "aggFuncOrString", "pivotResultColumn", "aggFuncAny", "AgColumn", "BeanStub3", "GROUP_AUTO_COLUMN_ID", "_mergeDeep", "_missing", "_warnOnce", "AutoColService", "rowGroupCols", "autoCols", "doingTreeData", "doingMultiAutoColumn", "rowGroupCol", "autoGroupCols", "source", "col", "newCol", "colToUpdate", "oldColDef", "underlyingColId", "underlyingColumn", "res", "autoGroupColumnDef", "isSortingCoupled", "hasOwnData", "userDef", "BeanStub4", "Component2", "_setAriaRole", "_createIconNoSpan", "DragSourceType2", "PillDropZonePanel", "Component", "DragSourceType", "KeyCode", "RefPlaceholder", "SortIndicatorSelector", "_loadTemplate", "PillDragComp", "VirtualList", "DropZoneColumnComp", "dragSourceDropTarget", "ghost", "dropZonePurpose", "horizontal", "ariaInstructions", "translate", "isSortSuppressed", "isFunctionsReadOnly", "aggregationMenuAria", "sortProgressAria", "aggFuncName", "aggSeparator", "sortDirection", "columnSort", "part", "aggFuncString", "canSort", "isGroupingZone", "performSort", "event", "multiSort", "e", "visibleState", "virtualList", "rows", "eGui", "virtualListGui", "ePopup", "focusoutListener", "addPopupRes", "popupHiddenFunc", "callbackEvent", "row", "comp", "rowToFocus", "r", "hidePopup", "itemSelected", "localeTextFunc", "aggFuncStringTranslated", "AggItemComp", "BaseDropZonePanel", "dragItem", "type", "numberOfLockedCols", "numberOfGroupCols", "draggingEvent", "columns", "visible", "allowedCols", "c", "dropTarget", "PivotDropZonePanel", "emptyMessage", "title", "pivotMode", "_createIconNoSpan2", "RowGroupDropZonePanel", "AgGridHeaderDropZones", "onRowGroupChanged", "topPanelGui", "listener", "bothDisplayed", "classStr", "rowGroupPanelShow", "grouping", "pivotPanelShow", "pivoting", "AgGridHeaderDropZonesSelector", "ColumnDropZoneService", "BeanStub5", "FilterAggregatesStage", "isPivotMode2", "isAggFilterActive", "defaultPrimaryColumnPredicate", "params2", "defaultSecondaryColumnPredicate", "applyFilterToNode", "changedPath", "preserveChildren", "node", "recursive", "child", "filterChildren", "allChildrenCount", "AgPromise", "AgSelect", "FilterWrapperComp", "RefPlaceholder2", "TabGuardComp", "_clearElement", "_loadTemplate2", "_setDisplayed", "_warnOnce2", "GroupFilter", "sourceColumns", "allSourceColumns", "sourceColumn", "newValue", "filterPromises", "filterColumnPairs", "filterWrapper", "filter", "columnId", "selectedFilterColumnPair", "AgInputTextField", "AgPromise2", "Component3", "RefPlaceholder3", "_clearElement2", "GroupFloatingFilterComp", "canShowUnderlyingFloatingFilter", "resolve", "parentFilterInstance", "displayName", "compDetails", "floatingFilter", "_model", "selectedFilter", "filterModel", "BeanStub6", "RowNode", "_areEqual", "_exists2", "_existsAndNotEmpty2", "_last2", "_removeFromArray", "_sortRowNodesByOrder", "_warnOnce3", "BatchRemover", "parent", "set", "nodeDetails", "GroupStage", "TreeDataNodeCache", "details", "afterColsChanged", "group", "leafNodes", "groupNodes", "unbalancedNode", "rowNodeTransactions", "rowNodeOrder", "usingTreeData", "groupedCols", "tran", "batchRemover", "parentsWithChildrenRemoved", "comparator", "recursiveSort", "nodeA", "nodeB", "pointer", "rowNodes", "sortedNodes", "idLookup", "i2", "stillToFind", "queue", "children", "childNodes", "infoToKeyMapper", "item", "oldPath", "newPath", "newParent", "leafRowNodes", "nodeParents", "n", "nodesToRemove", "provided", "batchRemoverIsLocal", "batchRemoverToUse", "nodeToRemove", "parentNode", "possibleEmptyGroups", "checkAgain", "groupShouldBeRemoved", "mapKey", "parentRowNode", "possibleEmptyGroup", "shouldBeRemoved", "d1", "d2", "recurse", "groupInfo", "afterColumnsChanged", "rootNode", "sibling", "noFurtherProcessingNeeded", "groupDisplayColumns", "newGroupDisplayColIds", "newRowNodes", "isMove", "path", "level", "parentGroup", "info", "stopLevel", "nextNode", "width", "paths", "rowIdx", "isDefined", "isLeaf", "cache", "groupNode", "createGroupId", "node2", "parent2", "level2", "parentId", "groupColumn", "rowGroupColumn", "userCallback", "groupCol", "keyExists", "BeanStub7", "_cloneObject", "_iterateObject2", "PIVOT_ROW_TOTAL_PREFIX", "PivotColDefService", "getFieldSeparator", "getPivotDefaultExpanded", "uniqueValues", "pivotColumnGroupDefs", "extractColDefs", "input", "arr", "def", "pivotColumnDefs", "pivotColumnDefsClone", "maxDepth", "uniqueValue", "pivotKeys", "primaryPivotColumns", "primaryPivotColumnDefs", "leafCols", "newPivotKeys", "groups", "openByDefault", "measureCol", "columnName", "recursivelyAddSubTotals", "groupDef", "currentPivotColumnDefs", "acc", "childAcc", "grp", "firstGroup", "totalColDef", "pivotValueColId", "insertAfter", "valueCols", "valueCol", "colIds", "childColIds", "headerName", "withGroup", "parentChildren", "addGroup", "valueGroup", "totalColumn", "colDefToCopy", "userComparator", "a", "b", "m1", "m2", "updatedList", "measureColumnId", "fields", "parts", "p", "uniqueValuesToGroups", "id", "uniqueValues2", "depth", "key2", "potentialAggCol", "BeanStub8", "_iterateObject3", "_missing2", "EXCEEDED_MAX_UNIQUE_VALUES", "PivotStage", "numberOfAggregationColumns", "configuredMaxCols", "uniqueValuesChanged", "aggregationColumns", "aggregationColumnsHash", "aggregationFuncsHash", "aggregationColumnsChanged", "aggregationFuncsChanged", "groupColumnsHash", "groupColumnsChanged", "pivotRowTotals", "pivotColumnGroupTotals", "suppressExpandablePivotGroups", "removePivotHeaderRowWhenSingleValueColumn", "anyGridOptionsChanged", "newValues", "json1", "json2", "recursivelyBucketFilteredChildren", "pivotIndex", "mappedChildren", "pivotColumn", "doesGeneratedColMaxExist", "hasExceededColMax", "addAggFunc", "addAggFuncs", "clearAggFuncs", "setColumnAggFunc", "isPivotMode", "getPivotResultColumn", "valueColKey", "setValueColumns", "colKeys", "getValueColumns", "removeValueColumn", "colKey", "removeValueColumns", "addValueColumn", "addValueColumns", "setRowGroupColumns", "removeRowGroupColumn", "removeRowGroupColumns", "addRowGroupColumn", "addRowGroupColumns", "moveRowGroupColumn", "fromIndex", "toIndex", "getRowGroupColumns", "setPivotColumns", "removePivotColumn", "removePivotColumns", "addPivotColumn", "addPivotColumns", "getPivotColumns", "setPivotResultColumns", "colDefs", "getPivotResultColumns", "pivotResultCols", "BeanStub9", "ShowRowGroupColsService", "showRowGroup", "isString", "VERSION", "RowGroupingCoreModule", "RowGroupingApiModule", "GroupFilterModule", "GroupFloatingFilterModule", "RowGroupingModule", "_createIconNoSpan3", "ValuesDropZonePanel"]
}
